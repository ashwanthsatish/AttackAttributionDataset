operation clandestine wolf adobe flash zero-day in apt3 phishing campaign
june 23, 2015 | by erica eng, dan caselden | threat intelligence
bubbles in june, fireeye s fireeye as a service team in singapore uncovered a phishing campaign exploiting an adobe flash player zero-day vulnerability (cve-2015-3113). the attackers emails included links to compromised web servers that served either benign content or a malicious adobe flash player file that exploits cve-2015-3113. adobe has already released a patch for cve-2015-3113 with an out-of-band security bulletin ( ). fireeye recommends that adobe flash player users update to the latest version as soon as possible. fireeye mvx detects this threat as a web infection, the ips engine reports the attack as cve-2015-3113, and the shotput backdoor is reported as backdoor.apt.cookiecutter. apt3
the china-based threat group fireeye tracks as apt3, aka ups, is responsible for this exploit and the activity identified in our previous blog post, operation clandestine fox. this group is one of the more sophisticated threat groups that fireeye threat intelligence tracks, and they have a history of introducing new browser-based zero-day exploits (e.g., internet explorer, firefox, and adobe flash player). after successfully exploiting a target host, this group will quickly dump credentials, move laterally to additional hosts, and install custom backdoors. apt3 s command and control (cnc) infrastructure is difficult to track, as there is little overlap across campaigns. activity overview
in the last several weeks, apt3 actors launched a large-scale phishing campaign against organizations in the following industries: aerospace and defense
construction and engineering
high tech
telecommunications
transportation
upon clicking the urls provided in the phishing emails, targets were redirected to a compromised server hosting javascript profiling scripts. once a target host was profiled, victims downloaded a malicious adobe flash player swf file and an flv file, detailed below. this ultimately resulted in a custom backdoor known as shotput, detected by fireeye as backdoor.apt.cookiecutter, being delivered to the victim s system. the payload is obscured using xor encoding and appended to a valid gif file. attack vector
the phishing emails used by apt3 during this campaign were extremely generic in nature, almost appearing to be spam. an example email body: save between $200-450 by purchasing an apple certified refurbished imac through this link. refurbished imacs come with the same 1-year extendable warranty as new imacs. supplies are limited, but update frequently. don't hesitate . . .>go to sale the string >go to sale was a link that used the following url structure: hxxp://<subdomain>.<legitdomain>.<tld>/<directory>/<alphanumericid>.html exploit details
the attack exploits an unpatched vulnerability in the way adobe flash player parses flash video (flv) files. the exploit uses common vector corruption techniques to bypass address space layout randomization (aslr), and uses return-oriented programming (rop) to bypass data execution prevention (dep). a neat trick to their rop technique makes it simpler to exploit and will evade some rop detection techniques. shellcode is stored in the packed adobe flash player exploit file alongside a key used for its decryption. the payload is xor encoded and hidden inside an image. exploit packaging
the adobe flash player exploit is packed with a simple rc4 packer. the rc4 key and ciphertext are binarydata blobs that the packer uses to decrypt the layer 2 adobe flash player file. once decrypted, layer 2 is executed with loader.loadbytes. vector corruption
layer 2 uses a classic adobe flash player vector corruption technique to develop its heap corruption vulnerability to a full relative read/write available to actionscript3. in this technique, the attacker sprays adobe flash player vectors to the heap, and triggers a write vulnerability to change the size of one of the vectors. the attacker can then perform subsequent reads and writes to memory outside the intended boundaries of the corrupted vector object from as3. for more details on this technique, see flash in 2015. once the attacker has limited read/write access to memory, they choose to corrupt a second vector to increase their access to a range of 0x3fffffff bytes. this second vector is used for the remainder of the exploit. return-oriented programming
the attackers use a rop chain to call kernel32!virtualalloc to mark their shellcode as executable before jumping to their shellcode. instead of writing their rop chain to the heap along with their shellcode and payload, they used a different technique. usually, exploit developers will corrupt a built-in adobe flash player object such as a sound object. instead, the attackers chose to define their own class in as3 with a function that takes a lot of arguments: class customclass { public function victimfunction(arg1:uint, arg2:uint, , arg80:uint):uint
} then, the attackers can simply overwrite the function pointer with a gadget that adds to the stack pointer and returns to pivot to rop. they have no need to identify the absolute address of the rop chain and preserve it in a register for a typical xchg reg32, esp pivot. additionally, storing the rop chain on the stack will evade rop detection mechanisms designed around detecting when the stack pointer points outside of a thread s stack region. this.customobj.victimfunction(
6f73b68b, // ret; (ropsled) ,
6f73b68a, //pop eax
1f140100,
6fd36da1, //call kernel32!virtualalloc(0x1f140000, 0x10000, 0x1000, 0x40)
1f140000, // address
00010000, // size
00001000, // type
00000040, // protection = rwx
6f73b68b*9 // ret (ropsled)
6fd36da7*2 // ret
6f73aff0 pop ecx
6fd36da7
6fd36da7 jmp [eax] )
this.customobj.victimfunction pointer modified to:
00000000`6de533dc 5e pop rsi
00000000`6de533dd 83c448 add esp,48h
00000000`6de533e0 c3 ret lastly, the rop chain has a ropsled following the call to virtualalloc. this could just be an artifact of development, or it could be designed to bypass detection mechanisms that test for valid return addresses up to a limited depth at calls to virtualalloc. full exploit flow
1. create a new video object 2. fetch the payload 3. attach the video to a new netstream 4. spray the heap with adobe flash player vectors a. create a vector containing 98688 vectors containing 1022 uints b. set the first two dwords in each vector<uint> to 0x41414141, 0x42424242 5. create holes for the controlled flv object a. free approximately every 3rd vector in the spray 6. spray custom class objects for future control transfer a. define a new class customclass i. define a function victimfunction with lots of arguments b. create a vector of 0x100 vectors of 1007 references to an customclass instance 7. fetch and play the flv exploit a. the flv file will allocate an attacker controlled object in one of the holes from step 5 b. the attacker controlled object will overwrite the length field of an adjacent vector 8. re-fill holes from step 5 with vectors as in step 4 9. find the corrupted vector a. search through vectors from step 4 b. check the length of each vector to find one that is abnormally large 10. corrupt a second vector (vector2) a. using the corrupted vector from step 9 to read/write relative memory addresses i. search memory for an adjacent vector ii. overwrite the length field with 0x3fffffff iii. verify that a corrupted vector with length 0x3fffffff now exists in the spray 1. if not, undo corruption and attempt to corrupt the next vector 11. decrypt shellcode and store it and the payload on the heap 12. overwrite the customclass.victimfunction function pointer a. find the sprayed customclass object instance references from step 6 b. the new function is a form of pivot that transfers control to the attacker 13. build rop chain on the stack and call it a. find rop gadgets in memory using vector2 i. including a call to kernel32!virtualalloc b. call the corrupted customclass.victimfunction from step 6.a.i i. arguments to the function are the gadgets of the rop chain ii. they are conveniently pushed onto the stack iii. corrupted vtable from step 12 calls a pivot 1. the pivot just adds to to the stack pointer and returns because the rop chain is on the stack 14. rop chain calls shellcode a. call kernel32!virtualalloc b. jmp to shellcode 15. shellcode calls payload a. shellcode searches memory for the payload, which is stored inside an image b. shellcode decodes the payload by xoring each byte (that is not 0 or 0x17) with 0x17 conclusion
once apt3 has access to a target network, they work quickly and they are extremely proficient at enumerating and moving laterally to maintain their access. additionally, this group uses zero-day exploits, continually updated custom backdoors, and throwaway cnc infrastructure, making it difficult to track them across campaigns.