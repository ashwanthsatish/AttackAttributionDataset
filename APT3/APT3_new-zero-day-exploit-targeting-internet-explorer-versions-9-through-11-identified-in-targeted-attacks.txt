new zero-day exploit targeting internet explorer versions 9 through 11 identified in targeted attacks
april 26, 2014 | by xiaobo chen, mike scott, dan caselden
summary fireeye research labs identified a new internet explorer (ie) zero-day exploit used in targeted attacks. the vulnerability affects ie6 through ie11, but the attack is targeting ie9 through ie11. this zero-day bypasses both aslr and dep. microsoft has assigned cve-2014-1776 to the vulnerability and released security advisory to track this issue. threat actors are actively using this exploit in an ongoing campaign which we have named "operation clandestine fox." however, for many reasons, we will not provide campaign details. but we believe this is a significant zero day as the vulnerable versions represent about a quarter of the total browser market. we recommend applying a patch once available. according to netmarket share, the market share for the targeted versions of ie in 2013 were: ie 9 13.9% ie 10 11.04% ie 11 1.32% collectively, in 2013, the vulnerable versions of ie accounted for 26.25% of the browser market. the vulnerability, however, does appear in ie6 through ie11 though the exploit targets ie9 and higher. the details
the exploit leverages a previously unknown use-after-free vulnerability, and uses a well-known flash exploitation technique to achieve arbitrary memory access and bypass windows aslr and dep protections. exploitation preparing the heap
the exploit page loads a flash swf file to manipulate the heap layout with the common technique heap feng shui. it allocates flash vector objects to spray memory and cover address 0x18184000. next, it allocates a vector object that contains a flash.media.sound() object, which it later corrupts to pivot control to its rop chain. arbitrary memory access
the swf file calls back to javascript in ie to trigger the ie bug and overwrite the length field of a flash vector object in the heapspray. the swf file loops through the heapspray to find the corrupted vector object, and uses it to again modify the length of another vector object. this other corrupted vector object is then used for subsequent memory accesses, which it then uses to bypass aslr and dep. runtime rop generation
with full memory control, the exploit will search for zwprotectvirtualmemory, and a stack pivot (opcode 0x94 0xc3) from ntdll. it also searches for setthreadcontext in kernel32, which is used to clear the debug registers. this technique, documented here, may be an attempt to bypass protections that use hardware breakpoints, such as emet s eaf mitigation. with the addresses of the aforementioned apis and gadget, the swf file constructs a rop chain, and prepends it to its rc4 decrypted shellcode. it then replaces the vftable of a sound object with a fake one that points to the newly created rop payload. when the sound object attempts to call into its vftable, it instead pivots control to the attacker s rop chain. rop and shellcode
the rop payload basically tries to make memory at 0x18184000 executable, and to return to 0x1818411c to execute the shellcode. 0:008> dds eax
18184100 770b5f58 ntdll!zwprotectvirtualmemory 18184104 1818411c 18184108 ffffffff 1818410c 181840e8 18184110 181840ec 18184114 00000040 18184118 181840e4 inside the shellcode, it saves the current stack pointer to 0x18181800 to safely return to the caller. mov dword ptr ds:[18181800h],ebp
then, it restores the flash.media.sound vftable and repairs the corrupted vector object to avoid application crashes. 18184123 b820609f06 mov eax,69f6020h
18184128 90 nop 18184129 90 nop 1818412a c700c0f22169 mov dword ptr [eax],offset flash32_11_7_700_261!adobecpgetapi+0x42ac00 (6921f2c0) 18184133 b800401818 mov eax,18184000h 18184138 90 nop 18184139 90 nop 1818413a c700fe030000 mov dword ptr [eax],3feh ds:0023:18184000=3ffffff0 the shellcode also recovers the esp register to make sure the stack range is in the current thread stack base/limit. 18184140 8be5 mov esp,ebp
18184142 83ec2c sub esp,2ch 18184145 90 nop 18184146 eb2c jmp 18184174 the shellcode calls setthreadcontext to clear the debug registers. it is possible that this is an attempt to bypass mitigations that use the debug registers. 18184174 57 push edi
18184175 81ece0050000 sub esp,5e0h 1818417b c7042410000100 mov dword ptr [esp],10010h 18184182 8d7c2404 lea edi,[esp+4] 18184186 b9dc050000 mov ecx,5dch 1818418b 33c0 xor eax,eax 1818418d f3aa rep stos byte ptr es:[edi] 1818418f 54 push esp 18184190 6afe push 0fffffffeh 18184192 b8b308b476 mov eax,offset kernel32!setthreadcontext (76b408b3) 18184197 ffd0 call eax the shellcode calls urldownloadtocachefilea to download the next stage of the payload, disguised as an image. mitigation
using emet may break the exploit in your environment and prevent it from successfully controlling your computer. emet versions 4.1 and 5.0 break (and/or detect) the exploit in our tests. enhanced protected mode in ie breaks the exploit in our tests. epm was introduced in ie10. additionally, the attack will not work without adobe flash. disabling the flash plugin within ie will prevent the exploit from functioning. threat group history
the apt group responsible for this exploit has been the first group to have access to a select number of browser-based 0-day exploits (e.g. ie, firefox, and flash) in the past. they are extremely proficient at lateral movement and are difficult to track, as they typically do not reuse command and control infrastructure. they have a number of backdoors including one known as pirpi that we previously discussed here. cve-2010-3962, then a 0-day exploit in internet explorer 6, 7, and 8 dropped the pirpi payload discussed in this previous case. as this is still an active investigation we are not releasing further indicators about the exploit at this time. acknowledgement: we thank christopher glyer, matt fowler, josh homan, ned moran, nart villeneuve and yichong lin for their support, research, and analysis on these findings. this entry was posted on april 26, 2014 and filed under xiaobo chen, zero-day, mike scott, and dan caselden.