the oilrig group has been active since at least mid-2016, and continues their attack campaigns throughout the middle east, targeting both governmental agencies and businesses on an almost routine basis. often preferring homegrown tools and malware, oilrig continually modifies their malware and tools to accomplish their objectives. in august 2018, unit 42 observed oilrig targeting a government organization using spear-phishing emails to deliver an updated version of a trojan known as bondupdater. bondupdater is a powershell-based trojan first discovered by fireeye in mid-november 2017, when oilrig targeted a different middle eastern governmental organization. the bondupdater trojan contains basic backdoor functionality, allowing threat actors to upload and download files, as well as the ability to execute commands. bondupdater, like other oilrig tools, uses dns tunneling to communicate with its c2 server. during the past month, unit 42 observed several attacks against a middle eastern government leveraging an updated version of the bondupdater malware, which now includes the ability to use txt records within its dns tunneling protocol for its c2 communications. a new series of attacks in mid-august, the oilrig threat group sent what appeared to be a highly targeted phishing email to a high-ranking office in a middle eastern nation. the email had no subject and what initially drew our attention to this attack was the content of the spear phishing email. figure 1. spear phishing email sent by the oilrig threat group attached to the email was a malicious document named (sha256: ) which contained a macro that attempted to install a new version of the bondupdater trojan. figure 2. microsoft word document with embedded macros and powershell updated bondupdater the spear-phishing email had an attached microsoft word document that contained a macro responsible for installing a new variant of bondupdater. the macro begins this installation process by creating two files on the system at the following location: the macro finishes by running the dropped vbscript apppool.vbs file by running wscript c:\programdata\windowsapppool\apppool.vbs . when first executed, the apppool.vbs file will create the following scheduled task to execute every minute, which provides bondupdater persistence and the ability to continually run on the system as the trojan does not have a main loop to carry out its functionality: after creating the scheduled task, the vbscript will execute the apppool.ps1 script dropped by the macro using the following command line: subsequent executions of apppool.vbs will check for the existence of a file named quid , which, if present, will also use the above powershell script to run apppool.ps1 . the powershell script creates the quid file upon its first execution to avoid creating multiple scheduled tasks. the apppool.ps1 file is a powershell script that is a variant of the bondupdater payload. bondupdater, like other oilrig payloads, uses dns tunneling to communicate with its c2 server. this variant of the bondupdater trojan has a new lock file, which involves creating a lock file at the following location which will write the current powershell process identifier (pid) to this file: the purpose of this lock file is to only have one instance of the trojan running at one time. however, it also uses this lock file to determine how long the powershell process has been executing, as it checks the creation time of the file lock against the current time to determine if the powershell process has been running for more than ten minutes. if it has, the script will stop the process based on the pid in the lock file and delete the lock file. future executions of the powershell script will fully execute as the lock file will no longer exist on the system. this suggests the threat actors may have experienced issues with this trojan running for extended periods in the past, likely related to the communication loops that we will discuss later. this bondupdater variant also creates the following file that it will use to store a unique identifier for the system, which is generated by obtaining a random number between 10 and 99 and appending the first 8 characters of a generated guid: the bondupdater trojan then creates several folders that it will use to store files it receives from the c2 server and files that it generates or gathers to send to the c2 server. the folder names are: even though the script creates the files folder, it does not appear that the trojan uses these folders within the code. the trojan uses the receivebox folder to store files obtained from the c2 server, while the sendbox folder is used to store files that the trojan will upload to the server. the trojan uses the filenames of the file received from the c2 server stored in the receivebox folder to determine how to handle the file, which is explained below. the bondupdater sample retains its original command handling and c2 communication functionality. this process involves communicating with the c2 server to receive a file and using a character in the filename as the command. the trojan s command handler checks the trailing character of the filename to process the file contents, which can be seen in table 1. trailing character/command	purpose	description
0	execute command	reads the contents of the file and runs them as a command with . the output of the command is saved to a file whose name starts with proc and is stored in the sendbox folder, which the trojan will send to the c2 server.
1	download file	reads the contents of the file for a path to a file to download. copies the specified file to a file in the sendbox folder for the trojan to send to the c2 server.
any other character	upload file	used to store a file on the system. the file is moved to the done folder, which stores the file for future use. the trojan writes 200<>[path to stored file] to a file in the sendbox folder to notify the c2 that the file was downloaded successfully.
table 1 commands available in bondupdater and their purpose after handling the command, bondupdater will send files it saved in the sendbox folder to the c2 server, after which it terminates and relies on the scheduled task to run again in the future. as discussed above, the bondupdater trojan uses a dns tunneling protocol to receive files from the c2 server for processing. this particular bondupdater sample includes two different variations of the dns tunneling protocol, one using dns a records, and one using dns txt records to transmit data from the c2 to the trojan. the use of txt records for c2 communications appears to be a new feature to the bondupdater trojan. the dns tunneling protocol uses carefully crafted subdomains sent to the authoritative name server of the c2 domain, which in this specific sample was the domain withyourface[.]com . the trojan generates subdomains differently when it sends data to the c2 compared to when it is looking to receive data from the c2, regardless of which dns tunneling protocol is used for communications. the format of the generated domains for both sending and receiving starts with the previously generated guid created to uniquely identify the system. however, the trojan inserts a part number value and an action type character into this guid string at random offsets. the part number value is a three-digit string that corresponds to the chunk of data the trojan is attempting to transmit. the action type is a single character that notifies the c2 the type of communication the trojan is carrying out. the two static characters c and t in the subdomain surround two digits, which help the c2 server find the part number and action type mixed in within the guid string at random offsets. sending data format receiving data format depending on whether the c2 communications use dns a or txt records, different action types are used when generating the subdomains to notify the c2 what format to use to respond. table 2 shows action types used in outbound requests and the purpose of the request. for example, the trojan will begin communicating with its c2 server by sending an initial beacon with the action character m . this initial beacon will follow the receiving format, as seen in the following example: the offset to the part number and action type in the guid above may not seem correct at first, as the action type does not appear to be at offset 8 in the string. however, this is correct, as the action type is inserted at offset 8 before the part number was inserted at offset 3. therefore, we believe the c2 server just adds the two offsets together to find the actual location of the action type in the string. original data transfer using dns tunneling the original data transfer process within bondupdater looked for specific a records within answers to dns queries, shown in table 3. the trojan processed the a records in the c2 response to obtain a filename, which specifically looks for an ipv4 address within the a record with 24.125 in the first two octets. the trojan appends the remaining two octets of this a record to the string rcvd and uses this as the filename to save future data to in the receivebox folder. this ip address also instructs the trojan to treat following dns a records as data. the following dns a records are split on the . and each of the first three octets are treated as data, whereas the fourth octet is used as a counter to obtain the correct chunk of data. lastly, the trojan looks for the a record 1.2.3 as a signal to write the provided data to the specified file, which is then subjected to the previously mentioned file-based command handler. table 3 ip addresses and their meanings within the original data transfer process in bondupdater new data transfer using dns tunneling this bondupdater sample has a new method to obtain files from the c2 server using a series of dns txt queries. this method follows a similar process as the original method but uses dns txt results to obtain a filename and the data to write to the file. once data is written to the file system, this method uses the same command handler as the original method to process the contents of the file based on the trailing character of the filename, as seen in table 1. the c2 can initiate the new command handling functionality by responding to the initial beacon with a dns a record of . the script will enter a loop attempting to communicate with its c2 every 50 milliseconds, looking for a series of responses with specific characters that the script will use as instructions to determine how to handle the result of the txt record, which can be seen in table 4. the trojan will split each txt record from the c2 response on the character > , with the data to the left of the > character used as the instruction and the data to the right as the data. while we have not seen the c2 use this txt record-based communications, we believe the process would involve the c2 providing a txt record with the s000s instruction to set the filename to which data is saved. the c2 would then provide a series of s instructions to provide data, followed by the e instruction to write that data to the file, which would then be subjected to the command handler. conclusion as expected, oilrig is continuing their onslaught of attacks well into 2018 with continued targeting in the middle east. sometimes developing new tools, oilrig also often uses what has worked in the past, including developing variants of previously used tools and malware. this reduces development time and capitalizes on previous versions of the tool and its success. oilrig is a highly diverse and very resourceful threat actor, employing a litany of methods and tools to compromise victims, but palo alto networks customers are protected from this oilrig attack and bondupdater by: autofocus customers can track this trojan with the bondupdater_docs tag
all known bondupdater document samples are marked with malicious verdicts in wildfire
all known bondupdater document c2 domains have dns signatures and are classified as command and control 