oilrig actors provide a glimpse into development and testing efforts
robert falcone	by robert falcone
april 27, 2017 at 1:00 pm
category: unit 42 tags: clayside, helminth, oilrig, oilrig attacks throughout an attack campaign, actors will continue to develop their tools in an attempt to remain undetected and to carry out multiple attacks without having to completely retool. in regard to the attack lifecycle, development of tools occurs in the weaponization/staging phase that precedes the delivery phase, of which is typically the first opportunity we see the actors activities as they interact directly with their target. we have been presented with a rare opportunity to see some development activities from the actors associated with the oilrig attack campaign, a campaign unit 42 has been following since may 2016. recently we were able to observe these actors making modifications to their clayslide delivery documents in an attempt to evade antivirus detection. we have identified two separate testing efforts carried out by the oilrig actors, one occurring in june and one in november of 2016. the sample set associated with each of these testing activities is rather small, but the changes made to each of the files give us a chance to understand what modifications the actor performs in an attempt to evade detection. this testing activity also suggests that the threat group responsible for the oilrig attack campaign have an organized, professional operations model that includes a testing component to the development of their tools. testing activity, analysis, and methodology
we collected two sets of clayslide samples that appear to be created during the oilrig actor s development phase of their attack lifecycle. the threat actor uploaded each of these files to a popular antivirus testing website to find out which vendors detected the file. the actor then made subtle modifications to the file and uploaded the newly created file to the same popular antivirus testing website in order to determine how to evade detection. the flowchart in figure 1explains the process in which the threat actors followed during their testing activities. lucky for us, the threat actors do not modify the metadata within their delivery documents, which allows us to determine when the actor last modified each word document. these untainted timestamps allow us to create a timeline that we can use to order the files as they were created by the actor. our analysis methodology involves iteratively comparing each file with the next file in the timeline to determine the changes the actor made to the first file that resulted in the creation of the second file. the first testing activity we observed began with an initial sample created on june 13, 2016 with 17 subsequent files created for testing purposes that the actor created in a two-hour period on june 15, 2016. table 1shows the samples we observed associated with the june 2016 testing activity, including the iteration, the last modified timestamp, the hash, the filename, and the antivirus detection rate of the newly created file. the first file and the files with incrementing filenames have the same decoy contents, which is the reason we initially included this sample with this group despite the difference in naming. also, the filename contains the acronym for to the top , which is common usage in internet forums and could depict the actor starting testing activities. the second testing activity of clayslide delivery documents began with the actor creating a base sample on november 14, 2016, followed by six subsequent test files created within a 30-minute window on the following day. table 2 shows the pertinent information related to the clayslide testing activity that occurred in november 2016. again, there was an obvious difference in filenames at the beginning of this activity, but we included the first two samples in with this group based on the first two files initially sharing decoy contents, but more importantly sharing the same macro code and payload scripts as the initial testing sample with the filename of . by analyzing the changes made to the clayslide delivery document during these two separate testing activities we were able to gain insight into the techniques used by the actors during the testing. before reviewing the activities performed in the two testing sessions, the following high level observations can be made: patterns in filenames emerge, with testing files having the same word or incrementing numbers for the filenames, or a set of testing files sharing the same exact filename
very structured approach, using a baseline test sample followed by small iterative changes
actor may also revert back to the baseline test sample and continue testing
changes made only a few minutes apart and can involve:
removal or location change of payload
modified decoy contents and sheet names
changes to function and variable names
removal of entire lines of code
obfuscating strings via concatenation or an alternate encoding (base64 or hexadecimal)
reordering of functions in the code
in many cases, testing files are no longer functional due to:
removal of a required component(s)
replacement of variables with nonsensical values
use of encoded strings without ability to decode
testing activities ceases with a very low antivirus detection rate
the number of vendors detecting the samples increases and decrease throughout the testing as the actor attempts to determine what the detection signatures are triggering on
june 2016 testing activity
in june 2016, an actor related to the oilrig campaign began a series of testing activities in an attempt to determine the portions of the clayslide macro code that antivirus vendors were using for detection purposes. these activities resulted in 17 different iterations of the clayslide delivery document, many of which no longer run properly due to the changes made within the files. we have included an exhaustive analysis of the june 2016 testing activity in appendix a. in the june testing, the actor started by removing the malicious payload from the excel delivery document to focus their testing on the malicious macro. the actor made many iterative changes during their testing of the macro, however, the actor began these changes by completely removing a block of the code that was responsible for saving the payload to the system and for creating the scheduled task to run the payload. the removal of this code brought the detection rate to 0, which told the actor that the antivirus detection rules were detecting these files based on these lines of code. the actor spent most of their subsequent efforts modifying portions of this code. now that the actor knew the portion of the code that caused antivirus detection, the actor added that portion of the code back to the macro and made changes in attempt to determine the exact line of code that was detected. this process involved changing the commands used to create the payload and the scheduled task. the changes made to these two commands involved their complete removal, their replacement with non-functioning strings such as keyboard mashing and their equivalent strings in a variety of different encodings, including base64 and hexadecimal representation. the actor also changed the way these commands were executed as well, specifically by either using the wscript.shell object directly or the object stored in a variable. the actor also uses intentional misspelling of commands, such as poawearshell and scshtassks , as well as variations to the filenames for the payloads, such as firaeeye.vbs instead of fireeye.vbs . after making changes to the commands above, the actor shifted their focus onto changing the function names within the macro, which did not result in any change in the detection rate. after a 40-minute break, it appears the actor reverts to the base macro instead of modifying the previously created test file. again, the actor modifies the code in the base macro responsible for saving and running the payload, but this time the actor changes the folder names it creates for the payload to store its generated files. also, the two files generated during these activities that occurred after the actor reverted back to the base macro had keyboard-mashed strings for their decoy contents, which differed dramatically from the previous test files. during the entirety of this testing activity, the antivirus detection rate reached a high of 6 but ended with a zero vendors detecting the sample when the actor ceased testing activities, which suggests that the actor was satisfied with this result. however, we do not see conclusive evidence to suggest that the actor was attempting to evade a specific antivirus vendor. november 2016 testing activity
on november 15, 2016, an actor related to the oilrig campaign began testing the clayslide delivery documents. while the testing activities in june began with the removal of the payloads from the delivery document, the files generated during the november testing all retained their helminth payloads, all of which were the same payload that use the c2 domain of updateorg[.]com . we have included an exhaustive analysis of the november 2016 testing activity in appendix b. in the november testing, the actor appears to initially focus on making modifications to the excel worksheet that contains the decoy contents. the changes made to the worksheet involved adding random strings to cells within the decoy, to changing the names of the worksheets themselves. eventually, the actor completely changes the contents of the decoy to a different theme entirely, from a decoy containing routing settings to a list of weak passwords. in addition to making changes to the excel worksheets that contain the decoy content, the actor also made changes to the worksheet that is initially displayed to the user. taking a step back, as discussed in the appendix in our initial oilrig blog, clayslide delivery documents initially open with a worksheet named incompatible that displays content that instructs the user to enable content to see the contents of the document, which in fact runs the malicious macro and compromises the system. when the macro runs, it hides the incompatible worksheet and displays the worksheet that contains the decoy document. the actor modified the incompatible worksheet to include random strings, which appears to be an attempt to see if detection rules are using the hash of this sheet for detection purposes. meanwhile, during these changes to the incompatible worksheet, the actor is also making changes to the malicious macro as well. the actor began changing the function names in the malicious macro from doom_init and doom_showhidesheets to doon_init and doon_shsheet to ini and shsheet . at one point, the actor changed the order of the functions in the macro to see if it was the cause of detection. the actor also changed the variable name used to store the vb script used to run the helminth payload from backupvbs to backup_vbs . another change made during these testing activities involved the actor splitting the command needed to create the scheduled task in several strings and concatenating them back together. this technique is interesting, as the resulting command is still functional which differs dramatically from the modifications seen in the june testing where the commands were changed to a point where they were no longer operational. the last change made to the malicious macro is the locations in which the macro obtains the payload. in all clayslide delivery documents, the macro obtains scripts related to the helminth trojan from specific cells within the incompatible worksheet. by changing the cells containing the scripts, the actor is checking to see if detection rules are looking for scripts at these specific locations. by the time the threat actor ceased this testing activity, the actor had lowered the detection rate of the clayslide delivery document to 2, suggesting this was a satisfactory result. like the june testing activity, we do not see conclusive evidence of the threat actor attempting to evade a specific antivirus vendor in the november testing. conclusion
the threat actors involved with the oilrig attack campaign have shown part of their playbook that involves testing and modifying their delivery documents prior to use in attacks. the purpose of these modifications is to evade detection from security products to extend the usage of their clayslide delivery documents. by analyzing these testing activities, we gain some helpful insight into the oilrig actors, specifically that this threat group is fairly mature from an operational standpoint and the fact that they hope to use their delivery documents as long as possible. we were already aware of this threat group making modifications to their clayslide delivery document that we discussed in our previous blog. now we know that there is an organized process involved that results in these changes, rather than the threat actor arbitrarily making changes to parts of the delivery documents, such as filenames and payload behavior. this realization suggests that the oilrig threat group will continue to use their delivery documents for extended periods with subtle modifications to remain effective. appendix a
this appendix contains an in-depth analysis of each iteration of testing activity carried out by the oilrig actors in june 2016. we provide screenshots and diffs between files (when available) to visualize the modifications made during the iteration. the actor removed all but three bytes from the vbs and powershell scripts, while the macro itself remains unchanged. this suggests that the delivery document no longer contains the malicious payload (helminth scripts) used to infect the system. by removing the payload from the delivery document, the actor can isolate antivirus detection results based on the delivery document itself. also, without the payload the samples no longer have some attributes and entities that security researchers typically use to correlate samples to a specific threat group, such as the c2 server of update-kernal[.]net that was in the payload in the base sample. with the payload removed, the actor focuses their efforts in subsequent iterations on modifying the macro within the delivery document.
the actor completely removed code that is responsible for a majority of the functionality within the macro. the code removed, as seen in figure 2, is responsible for the following: the actor adds the content removed in the previous iteration. however, the line of code responsible for running the command to create the scheduled task to run the vb script was omitted. this suggests the threat actor was testing to see if vendors were detecting clayslide samples based on this line within the macro. the actor adds the line of code omitted from the previous iteration, suggesting this specific code was not used for detection purposes. the actor also changed the method in which it calls the powershell script in the cmd variable, by using a wscript.shell object stored in the wss variable instead of creating a new wscript.shell object. the actor base64 encoded the contents of the cmd variable that stored a command to invoke a powershell script that would save the payload to the filesystem. also, the actor changed the command to create the scheduled task to be base64 encoded as well. these alterations do not come with a base64 decoding routine, suggesting that the sample generated in this iteration would result in an error. the lack of a decoding routine suggests that the actor does not waste time making sure the code actually works, as they could add code to support these changes. the actor tests to see if the base64 encoded strings added in the previous iteration were detected by removing these strings and leaving the two command strings empty. the actor adds the base64 encoded string for within the cmd variable and in place of the command to create the scheduled task. the actor replaces the first base64 for with the base64 encoded string to run the powershell command, but replaces the second with the cleartext string to create the scheduled task. the base64 encoded powershell command is similar to those seen in previous iterations. however, the actor changed one of the filenames used to save the payload to firaeeye.vbs (from fireeye.vbs ) and references a variable named fireeayevbs (from fireeyevbs ) that does not appear in the code. the actor replaces the cleartext string to create the scheduled task with the base64 encoded version of the string. however, the base64 encoded string changes the name of the created task from googleupdatestaskmachineui to goosgleupdatestaskmachineui and the script name from fireeye.vbs to fireeyse.vbs . the actor makes changes to the base64 encoded strings that used as a command to use powershell to install the payload and to schedule a task to run the payload. the base64 encoded powershell command reintroduces the filename fireeye.vbs and the variable name fireeyevbs , both of which were changed in iteration 8; however, the base64 encoded command uses the string poawearshell instead of powershell . as for the base64 string used to create the scheduled task, the actor reintroduced the scheduled task name of googleupdatestaskmachineui and script filename of fireeye.vbs , which were changed in iteration 9. however, the actor uses the string scshtassks to see if the schtasks string was being detected. the actor changed the base64 encoded strings within the cmd variable and the string used to create the scheduled task. instead of including the base64 encoded string of the powershell and create task command, the actor replaced these strings with the base64 encoded representation of the following string: the actor replaced the base64 strings within the cmd variable and the string to create the scheduled task with randomly typed letters. it appears the actor performed two-handed keyboard mashing to generate the strings used in these variables. the actor changed the randomly typed keys in the cmd and the string for creating the scheduled task with the base64 strings from two iterations back. however, the base64 strings were added between opening and closing brackets. the actor changed the base64 encoded strings used for the powershell command and the command to create a scheduled task from the last iteration to a hexadecimal string. the string contains the hexadecimal representation of the characters that make up the command to create the scheduled task, which was last seen in iteration 4. again, the script does not contain decoding functions to decode the hexadecimal values to the correct characters, therefore this script is not functional. the actor changed the two function names that are run when the excel document is opened. in all prior iterations, these function names were fireeye_init and fireeye_showhidesheets , which are responsible for installing the trojan and displaying the decoy contents within the excel spreadsheet, respectively. the actor changed these two function names to fireeye_init2 and fireeye_showhidesheets3 to determine if the function names were being detected by antivirus products. this iteration is very interesting, as we believe the actor reverts back to the base document instead of making changes to the document created in the previous iteration. the filename changed from an incrementing number to , which is the same filename as the base document. also, when we compared the sample from the previous iteration, there were a number of changes seen here: however, if you compare the file created in this iteration with the base file, the number of and type of changes seem to align closer to the modifications performed in previous iterations. if the actor reverted to the base document as we suspect, then modifications were made to the script filename, the folder names that store files generated by the payload, as well as the method the script invokes the powershell script. the actor changed the script filename from fireeye.vbs to fireueye.vbs , changed the up , dn and tp folder names to uup , dgn and tup and uses the wscript.shell object stored in the wss variable instead of creating a new wscript.shell object to run the command. in the last iteration of this testing activity, the actor changed some of the modifications made in the previous iteration back to the values used in the base document, specifically the filenames and folder names. however, the actor also adds a new variable to store the %public% environment variable that the script uses as the path to store the fireeye.vbs script and the folders that the payload would use. this iteration also includes a modified powershell command that attempts to run a command stored in the fireeye.vbs file, but does not include the portion of the command that would write the script to that file. the actor also removed the line that would run the command to create the scheduled task to run the vb script. appendix b
this appendix contains an in-depth analysis of each iteration of testing activity carried out by the oilrig actors in november 2016. we provide screenshots and diffs between files (when available) to visualize the modifications made during the iteration. in the first iteration of this testing, the actor changed the decoy content from the base sample. at a high level, the decoy contents contained commands to configure a cisco router with static routes and other settings. originally, the base test file used in this testing activity contained just these configuration settings in an excel worksheet named sheet1 , as seen in figure 19. in the first iteration of testing, the actor changed the worksheet name that contains the decoy content from sheet1 to hgvc and added a string to the worksheet jgvchhctf , as seen in figure 20. we believe the threat actor is attempting to determine if the worksheet name or the hash of the decoy worksheet were causing antivirus detection. the actor then changed the name of the worksheet that contains the decoy content from hgcv to table and completely changed the decoy content from the cisco routing settings to a list of weak passwords, as seen in figure 21. we believe this is the threat actor testing the new decoy content that they will use in an upcoming attack. following the lead of previous iterations, the actor made modifications to the content in the excel worksheet; however, in this iteration the changes were not made to the decoy worksheet, rather the change was made to the initial worksheet called incompatible that displays the message to instruct the user to enable content to run the macro. as seen in figure 22, the actor adds the string yy to this worksheet to determine whether antivirus vendors were detecting clayslide documents based on this worksheet. the actor also made modifications to the macro in this iteration, specifically by changing function names and by splitting up strings and concatenating them back together. the function names in the macro doom_init and doom_showhidesheets were changed to doon_init and doon_shsheet to determine if these function names were causing detection. also, the actor split the word powershell in the commands within the macro and concatenated them together to retain functionality. much like the previous iteration, the threat actor makes changes to the incompatible worksheet and the code within the macro. first, the threat actor added the string hi to two cells within the initially displayed incompatible worksheet, as seen in figure 24. the actor also made modifications to the macro in this iteration, as seen in figure 25. the actor changed the two function names from doon_ini and doon_shsheet to ini and shsheet respectively. also, the actor changed the variable name that stores the vb script obtained from the spreadsheet from backupvbs to backup_vbs , and modified the powershell command to use this new variable as well. lastly, the actor further split the name of the created task using concatenation to retain functionality. in this iteration, the actor rearranges the order of the functions in the script, specifically putting the ini function before the shsheet function. figure 26 shows this function reordering. in the final iteration of testing, the actor moves the base64 encoded vb script and the two base64 encoded powershell scripts to three different cells within the incompatible worksheet. the actor also changes the macro to access the base64 encoded strings from these new locations, which retains the functionality of this document. 