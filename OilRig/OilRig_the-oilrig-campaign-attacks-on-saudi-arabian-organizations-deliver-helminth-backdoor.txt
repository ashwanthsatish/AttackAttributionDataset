the oilrig campaign: attacks on saudi arabian organizations deliver helminth backdoor
robert falcone	by robert falcone and bryan lee
may 26, 2016 at 2:05 pm
category: financial services, malware, threat prevention, unit 42 tags: autofocus, helminth, oilrig, oilrig attacks, powershell, saudi arabia, vbscript, wildfire, windows in may 2016, unit 42 observed targeted attacks primarily focused on financial institutions and technology organizations within saudi arabia. artifacts identified within the malware samples related to these attacks also suggest the targeting of the defense industry in saudi arabia, which appears to be related to an earlier wave of attacks carried out in the fall of 2015. we have grouped these two waves of attacks into a campaign we have named oilrig . in recent oilrig attacks, the threat actors purport to be legitimate service providers offering service and technical troubleshooting as a social engineering theme in their spear-phishing attacks. earlier oilrig attacks appear to use fake job offers as a social engineering theme. the campaign appears highly targeted and delivers a backdoor we have called helminth . over the course of the attack campaign, we have observed two different variations of the helminth backdoor, one written in vbscript and powershell that was delivered via a macro within excel spreadsheets and the other a standalone windows executable. clayslide: excel macros install helminth script
in may 2016, unit 42 began researching attacks that used spear-phishing emails with attachments, specifically malicious excel spreadsheets sent to financial organizations within saudi arabia. we observed spear-phishing emails sent between may 4 and may 12 of this year that delivered these malicious excel spreadsheets, which we are tracking as clayslide . clayslide documents contain malicious macros that display decoy content within the spreadsheet and installs a variant of a helminth backdoor. fireeye also reported on these attacks in a may 22 blog post. the macro within clayslide samples installs the helminth script, which is composed of a vbscript called update.vbs and a powersshell script called dns.ps1 . the purpose of the vbscript is to send network beacons to its command and control server using http requests and will either download a file or run a batch script provided within the http response. the vbscript also uploads the output of the provided batch scripts to the command and control (c2) server, which provides threat actors a functional remote shell to the system. the powershell script has similar capabilities to the vbscript, but instead of using http for communications it uses a series of dns queries to send and receive data from the server. this communication channel relies on the c2 server responding to dns queries with ip addresses that the powershell script will parse treat as data to construct a batch script to execute on the system. the script specifically looks for the ip address 33.33.x.x to mark the beginning of the batch script transfer. the script will continue sending additional dns requests and use the octets of the resolving ip addresses as characters to write to the batch script. the script continues to write data to the batch script until it receives the ip address , which notifies the script to stop saving data to the file and to run the batch script. please reference the appendix for more detailed information on the clayslide delivery documents and the helminth script variant. discovery of executable helminth variant
additional samples were discovered in wildfire exhibiting the same dns-based c2 behavior as the script variant of helminth; however, many of these samples were found to be windows executable, instead of the previously observed vbscript and powershell combination. these samples were found to contain the same functionality as the previously mentioned helminth samples. figure 1 shows the code within the vbscript version of helminth checking resolving ip addresses for the ip address to stop appending data to a batch script before executing it, while figure 2 shows the same functionality within the executable version of the trojan. oilrig_unit 41_ fig 1 this suggests that the threat actors developed the executable variant of helminth as a standalone option whose installation does not rely on a macro within an excel spreadsheet. this also suggests that the threat actors purposely used the same communication methods across both variants with the intention to use the same command and control server application. this variant of the trojan is also where we obtained its name, as several of these payloads had the following debug symbol path that suggests the malware author called this project helminth : please reference the appendix for additional details on the helminth executable variant. delivery of windows executable helminth variant
unit 42 does not have detailed targeting information associated with attacks delivering the executable variant of the helminth trojan, however, we found a zip archive created in august 2015 that may have been used by the threat actors to deliver the helminth trojan. this zip file was hosted at the following location: hxxp://minfosecu.doosan[.]com/data/joboffer.zip the zip archive is encrypted with an unknown password, but we know it contains two files named joboffer.chm and . the file in the archive has the same name and file size (368128 bytes) as a dropper trojan we track as herher (sha256: ) that installs a known helminth executable sample. the joboffer.chm file is a compiled html file that we believe loads and executes the file as a payload, but we cannot be absolutely sure as we do not have the password required to extract the files from the archive. the decoy opened by the helminth sample installed by (seen in figure 3) is a dialog box associated with html help, which further strengthens our theory that the joboffer.chm ran the sample. this decoy suggests that the threat actors wanted to open the html help dialog after installing the helminth trojan, as the joboffer.chm file is effectively a standalone html file. we believe that the threat actors employed social engineering to underplay the situation and provide a different legitimate job offer if the victim responded with concerns of malicious activity. the executable variant of helminth is installed with a dropper trojan that we are tracking as the herher trojan. this trojan has two objectives: installing embedded trojans and displaying either a fake error prompt or a fake trubleshooting (the malware author misspelled this word in each sample) utility. figure 4 is an example of the fake error prompt displayed by the herher trojan. the helminth executable variant is very similar in functionality to its script-based counterpart, as it also communicates with its c2 server using both http and dns queries. the major difference in capabilities between the two variants is that the executable version comes with a module that helminth uses to log keystrokes and the clipboard contents to exfiltrate to the c2 server. helminth executable samples send artifacts within network beacons to its c2 server that the trojan refers to as a group and name . we extracted the group and name values from the helminth executable samples to determine their purpose. it appears that the group values hardcoded into the malware is associated with the targeted organization, as several are saudi arabian organizations within the telecommunications and defense industries. this suggests that the threat actors are not only focused on financial organizations, as their target set could include other industries as well. the name values hardcoded into the helminth samples are also interesting, as a majority of the names are related to famous philosophers, such as plato (greek philosopher), arasto (persian and urdu for greek philosopher aristotle), and alafghani (jamal ad-din al-afghani, islamic philosopher). other name values embedded in samples contain other persian words, such as nafti that translates to oily , which led us to name this campaign oilrig). helminth infrastructure
examining the known infrastructure of the collected sample set of helminth provides several interesting findings in regards to the adversary s tactics. the variants leveraging malicious macros embedded in excel documents all share the same command and control server of go0gie[.]com. the executable variants, on the other hand, used a variety of domains:
each of these domains, however, resolved to the same ip address of . this ip is observed as the resolution for two domains in use by the portable executable variants, kernel[.]ws and mydomain1110[.]com. judging by compile timestamps of the executables and last saved timestamps of the weaponized documents, it is likely the adversary is recycling a previously created c2 server at for the newer macro based variant. the other c2 domains and ips observed in use by the previous portable executable samples did not have shared infrastructure with the newer macro variants, although there is tactical overlap via the naming scheme of the domains. historical whois data reveals additional findings, potentially alluding to an iranian-based operator. from a timeline perspective, a new domain was registered almost in consecutive months, beginning in july 2015. each of the domains s whois data contained registrant information that was either reused, or was closely related to previously used information. for example, the domains mydomain1607[.]com and mydomain1609[.]com used the exact same registrant information. the email address edmundj@chmail[.]ir and the geolocation of tehran, iran, being of note. kernel[.]ws and checkgoogle[.]org used very similar email addresses, andre_serkisian@yahoo[.]com and andre.serkisian@chmail[.]ir, respectively. the registrant information for kernel[.]ws also provided a geolocation of tehran, ir and the email provider for the address used in checkgoogle[.]org was the same used for mydomain1607[.]com and mydomain1609[.]com, . the mydomain1110[.]com domain did not appear to reuse any of the previously observed whois data artifacts, but did still give a geolocation of tehran in addition to the use of an email address linked to other domains thematically similar to the know command and control domains and are potentially related. although there is heavy use of iranian-based artifacts within the whois registrant information, it is important to remember that this data is easily falsified. at face value, however, taking into account the registrant information and the use of persian language in the samples are compelling indicators that the operators may indeed be based out of iran. conclusion
while researching the oilrig campaign, we have seen two waves of targeted attacks on saudi arabian organizations in which a group of threat actors delivered the helminth trojan as a payload. the two waves of attacks used separate variants of the helminth trojan, specifically a script and executable variant of the trojan. the two variants of helminth use almost identical command and control protocols, which allows the threat actors to maintain consistent infrastructure throughout the campaign to manage the compromised hosts, regardless of the helminth variant used in the attack. the two variants of helminth do require different delivery methods, with the script variant relying on an excel spreadsheet for delivery, while the executable variant is more traditional in the fact that it can be installed without a delivery document. we speculate that the executable variant involves threat actors socially engineering the victim into running the payload, rather than installing the payload as the result of successful exploitation of a vulnerability. the multiple delivery methods suggest this threat group is capable of adapting their procedures to suit the current operation in the overarching campaign. palo alto networks customers are protected from the helminth trojan and can gather additional information using the following tools: wildfire detection of all known samples as malicious
all helminth c2 domains have dns signatures created and are identified as malicious in pan-db.
autofocus tags clayslide, helminth and herherdropper.
appendix
clayslide delivery documents at first, clayslide spreadsheets display a worksheet called incompatible that contains instructions for the user to manually enable macros (as seen in figure 6), as macros are disabled in excel by default. this is an attempt to trick the user into running the embedded macro to install the trojan, which does not require any vulnerability exploitation. figure 6 shows the protected view alert in excel informing the user that there is an embedded macro that may cause harm to the system. before the user can enable the macros in accordance with the instructions displayed in the spreadsheet, the user must click the red bar displayed by protected view and click the edit anyway button, as seen in 7. after clicking the edit anyway button, excel displays another security warning bar alerting that the spreadsheet contains macros, as seen in figure 8. the enable content button mentioned within the instructions displayed within the clayslide spreadsheet is now presented to the user. if the user clicks the enable content button, the macro hides the incompatible worksheet and makes hidden worksheets visible that displays decoy content to minimize the victim s suspicions of malicious behavior taking place. figure 9 below shows the decoy content displayed by macros within a clayslide sample, specifically showing the status of internal network ip addresses that fit with the service provider social engineering theme used throughout the attack campaign. figure 9 also shows that the incompatible worksheet is no longer visible, as the decoy content is displayed in a worksheet called sheet1 . figure 9 decoy content displayed after enabling macros within a clayslide sample after displaying the decoy content, the macro begins installing the script variant of the helminth trojan to the system. the process used by the macro to install this variant of helminth begins with the creation of the following files and folders: the malicious macro finishes the installation process by creating a scheduled task that is responsible for running the two scripts at regular intervals, as the scripts themselves do not have the ability to continually run after the initial execution. the following code snippet within the macro creates a scheduled task named googleupdatetaskmachineui that will run the update.vbs script every three minutes: wss.run schtasks /create /f /sc minute /mo 3 /tn & chr(34) & googleupdatetaskmachineui & chr(34) & /tr & wss.expandenvironmentstrings( %public% ) & \libraries\update.vbs , 0 helminth script variant
the script variant of the helminth trojan consists of a vbscript and powershell script named update.vbs and dns.ps1. we aptly named this variant the script version, as we found another version of this trojan that we will discuss later in this appendix. the update.vbs script is responsible for reaching out to its command and control (c2) server using http requests to the following two urls: the c2 server will respond to the http requests to the bat&m=d url with a batch script that update.vbs will save to the dn folder and execute. the output of the downloaded batch script is saved to a text file in the up folder and uploaded to the c2 server via an http post request to the following url: palo alto networks wildfire observed commands provided by the c2 server for the known helminth samples. the commands, as seen below, show that the threat actors are attempting to do initial information gathering on the system, including available user accounts, username, computer name, running tasks, services, network services and if remote desktop is enabled. whoami & hostname & ipconfig /all & net user /domain 2>&1 & net group /domain 2>&1 & net group domain admins /domain 2>&1 & net group exchange trusted subsystem /domain 2>&1 & net accounts /domain 2>&1 & net user 2>&1 & net localgroup administrators 2>&1 & netstat -an 2>&1 & tasklist 2>&1 & sc query 2>&1 & systeminfo 2>&1 & reg query hkey_current_user\software\microsoft\terminal server client\default 2>&1 the update.vbs concludes by running the dns.ps1 powershell script. the dns.ps1 script is also responsible for communicating with the c2 server, but it uses dns queries to send data to the server. the dns queries sent by this script are queries to subdomains on the same domain as the c2 server, which contains system information or the contents of files from the system. the subdomain of the dns request that acts as the initial c2 beacon has the following structure: the dns.ps1 script checks the response to this dns query and uses the first octet of the resolving ip address as an identifier for the compromised system. the script then uses this identifier in a follow up dns request to a subdomain with the following structure: the c2 server will respond to these dns queries with ip addresses that the script will parse and eventually treat as data to construct a batch script to execute on the system. the script specifically looks for the ip address 33.33.x.x to mark the beginning of the batch script transfer. upon receipt of this ip address, the script uses the last two octets of this ip address as a filename for the batch file that it saves to the tp folder that was initially created by the macro. once the batch file name is obtained, the script will continue sending additional dns requests and use the octets of the resolving ip addresses as characters to write to the batch script. the script continues writing characters to the batch script until it receives the ip address that notifies the script to stop saving data to the file and to run the batch script. the output of the downloaded batch file is saved to %public%\libraries\tp\<batch . the script will then upload the output of this batch file by including the data in a sequence of dns queries. the exfiltrates the output of the batch script by splitting up the data within the text file into chunks up to 23 bytes and sends the data within a series of dns queries that have the following structure: 00<identifier><filename of batch file without its extension><base36 of sequence number><base36 of a random number smaller than 46655><up to 23 bytes of data from batch script output> both the update.vbs and dns.ps1 both provide a fully functional remote shell to the actors, which allow the actor to carry out any activities on the compromised system they wish. helminth executable variant
the executable variant of helminth is installed with a trojan that we are tracking as the herher trojan. the herher trojan saves several files to the file system upon execution to install the helminth trojan to the system.
additionally, it has a comment of herher , which is basis of the dropper s name. helminth relies on the following shortcut for persistence, as it runs the trojan each time the system starts using the following command line: the and files are the actual helminth trojan, both of which are the same executable. the reason for two different filenames is currently unknown. the helminth trojan requires arguments on the command-line to execute properly ( q in the analyzed sample as seen in the certificate shortcut), one of which will run the trojan s functional code and the other can open a dialog box as a decoy. the helminth trojan begins by creating a mutex named [username]ver4.1 and writes its embedded configuration as ciphertext to the following file: %appdata% the trojan will later decrypt the contents of this file using the rc4 algorithm, using the md5 hash of f246b23d-c2d6-45f2-b268-dec30d9adaad as the key. we decrypted the configuration file dropped by helminth and found the structure of the configuration file is isalive,[sleep interval]\r\n[c2 domain] . for example, one helminth sample had the following data within the file: the helminth executable variant is able to run batch scripts provided by the c2 server, which is very similar to the script version of this trojan. the executable variant has one additional capability that is not present in the script version, which involves the ability to log keystrokes via a supplemental keylogger module. helminth loads its keylogger module of the trojan by loading the wintrust.hlm file dropped by the herher trojan as a dll and calling its exported function named initialize . the keylogger that creates a window named kk to monitor both the clipboard and keystrokes and to save the data in cleartext to the file %temp%/acro/users/[guid from . the keylogger saves the keystrokes and the name of the window visible while the keys were typed to this file in the following structure: the wintrust.hlm keylogger logs the contents of the clipboard to the same file, but the clipboard contents do not follow a header that specifies the window name like the other logged keystrokes. the clipboard contents are logged to the file in the following format: helminth exe c2 communications
the helminth executable is able to communicate with its c2 server via http and via dns queries in very similar ways to the helminth script variant. in fact, the dns beacons follow the same structure and sequence as the script variant of helminth discussed in the previous section. the main difference between the beacons sent from the two variants of helminth is the data included within the beacon, as the script variant does not send any system information within the beacons, whereas the executable version sends system and malware specific information within both the http and dns beacons. helminth executables include the system and malware information within http beacons in the cookie field of the request. helminth structures the beacon data as follows: function=f1; id=[md5 of computer and username]; group=[hardcoded in malware]; name=[hardcoded in malware]; service=0; the trojan will encrypt this data using rc4 and the md5 hash of f246b23d-c2d6-45f2-b268-dec30d9adaad as the key and encode the encrypted data using base64. figure 11 shows a helminth http beacon with the cookie field containing the base64 data. helminth sends data within dns beacons differently than the http beacons and includes additional information as well. the data within the dns beacons follows the structure: the trojan does not encrypt the data sent via dns beacons, rather it converts the ascii characters into their hexadecimal values and includes these values in cleartext. the dns beacons sent from the helminth executable have the following structure, which is very similar to the script version: 