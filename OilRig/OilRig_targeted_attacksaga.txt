targeted attacks against banks in the middle east
may 22, 2016 | by sudeep singh, yin hong chang | targeted attack
update (dec. 8, 2017): we now attribute this campaign to apt34, a suspected iranian cyber espionage threat group that we believe has been active since at least 2014. learn more about apt34 and their late 2017 targeting of a government organization in the middle east. introduction
in the first week of may 2016, fireeye s dti identified a wave of emails containing malicious attachments being sent to multiple banks in the middle east region. the threat actors appear to be performing initial reconnaissance against would-be targets, and the attacks caught our attention since they were using unique scripts not commonly seen in crimeware campaigns. in this blog we discuss in detail the tools, tactics, techniques and procedures (ttps) used in these targeted attacks. delivery method
the attackers sent multiple emails containing macro-enabled xls files to employees working in the banking sector in the middle east. the themes of the messages used in the attacks are related to it infrastructure such as a log of server status report or a list of cisco iron port appliance details. in one case, the content of the email appeared to be a legitimate email conversation between several employees, even containing contact details of employees from several banks. this email was then forwarded to several people, with the malicious excel file attached. macro details
the macro first calls an init() function (shown in figure 1) that performs the following malicious activities: extracts base64-encoded content from the cells within a worksheet titled "incompatible".
checks for the presence of a file at the path %public%\libraries\ update.vbs. if the file is not present, the macro creates three different directories under %public%\libraries, namely up, dn, and tp.
the extracted content from step one is decoded using powershell and dropped into two different files: %public%\libraries\update.vbs and %public%\libraries\dns.ps1
the macro then creates a scheduled task with name: googleupdatetaskmachineui, which executes update.vbs every three minutes.
note: due to the use of a hardcoded environment variable %public% in the macro code, the macro will only run successfully on windows vista and subsequent versions of the operating system. figure 1: macro init() subroutine run-time unhiding of content
one of the interesting techniques we observed in this attack was the display of additional content after the macro executed successfully. this was done for the purpose of social engineering specifically, to convince the victim that enabling the macro did in fact result in the unhiding of additional spreadsheet data. office documents containing malicious macros are commonly used in crimeware campaigns. because default office settings typically require user action in order for macros to run, attackers may convince victims to enable risky macro code by telling them that the macro is required to view protected content. in crimeware campaigns, we usually observe that no additional content is displayed after enabling the macros. however, in this case, attackers took the extra step to actually hide and unhide worksheets when the macro is enabled to allay any suspicion. a screenshot of the worksheet before and after running the macro is shown in figure 2 and figure 3, respectively.
in the following code section, we can see that the subroutine showhidesheets() is called after the init() subroutine executes completely: the code of subroutine showhidesheets(), which unhides the content after completion of malicious activities, is shown in figure 4. first stage download
after the macro successfully creates the scheduled task, the dropped vbscript, update.vbs (figure 5), will be launched every three minutes. this vbscript performs the following operations: leverages powershell to download content from the uri hxxp://go0gie[.]com/sysupdate.aspx?req=xxx\dwn&m=d and saves it in the directory %public%\libraries\dn.
uses powershell to download a bat file from the uri hxxp://go0gie[.]com/sysupdate.aspx?req=xxx\bat&m=d and saves it in the directory %public%\libraries\dn.
executes the bat file and stores the results in a file in the path %public%\libraries\up.
uploads this file to the server by sending an http post request to the uri hxxp://go0gie[.]com/sysupdate.aspx?req=xxx\upl&m=u.
finally, it executes the powershell script dns.ps1, which is used for the purpose of data exfiltration using dns. figure 5: content of update.vbs during our analysis, the vbscript downloaded a customized version of mimikatz in the previously mentioned step one. the customized version uses its own default prompt string as well as its own console title, as shown in figure 6. figure 6: custom version of mimikatz used to extract user password hashes similarly, the contents of the bat file downloaded in step two are shown in figure 7: whoami & hostname & ipconfig /all & net user /domain 2>&1 & net group /domain 2>&1 & net group "domain admins" /domain 2>&1 & net group "exchange trusted subsystem" /domain 2>&1 & net accounts /domain 2>&1 & net user 2>&1 & net localgroup administrators 2>&1 & netstat -an 2>&1 & tasklist 2>&1 & sc query 2>&1 & systeminfo 2>&1 & reg query "hkey_current_user\software\microsoft\terminal server client\default" 2>&1 figure 7: content of downloaded bat script this bat file is used to collect important information from the system, including the currently logged on user, the hostname, network configuration data, user and group accounts, local and domain administrator accounts, running processes, and other data. data exfiltration over dns
another interesting technique leveraged by this malware was the use of dns queries as a data exfiltration channel. this was likely done because dns is required for normal network operations. the dns protocol is unlikely to be blocked (allowing free communications out of the network) and its use is unlikely to raise suspicion among network defenders. the script dns.ps1, dropped by the macro, is used for this purpose. in the following section, we describe its functionality in detail. the script requests an id (through the dns protocol) from go0gie[.]com. this id will then be saved into the powershell script.
next, the script queries the c2 server for additional instructions. if no further actions are requested, the script exits and will be activated again the next time update.vbs is called.
if an action is required, the dns server replies with an ip with the pattern 33.33.xx.yy. the script then proceeds to create a file at %public%\libraries\tp\chr(xx)chr(yy).bat. the script then proceeds to make dns requests to fetch more data. each dns request results in the c2 server returning an ip address. each octet of the ip address is interpreted as the decimal representation of an ascii character; for example, the decimal number 99 is equivalent to the ascii character c . the characters represented by the octets of the ip address are appended to the batch file to construct a script. the c2 server signals the end of the data stream by replying to a dns query with the ip address .
once the file has been successfully transferred, the bat file will be run and its output saved as %public%\libraries\tp\chr(xx)chr(yy).txt.
the text file containing the results of the bat script will then be uploaded to the dns server by embedding file data into part of the subdomain. the format of the dns query used is shown in table 1.
the bat file and the text file will then be deleted. the script then quits, to be invoked again upon running the next scheduled task.
the dns communication portion of the script is shown in figure 8, along with a table showing the various subdomain formats being generated by the script. format of subdomains used in dns c2 protocol: subdomain used to request for botid, used in step 2 above subdomain used while performing file transfers used in step 3 above subdomain used while performing file upload, used in step 5 above
conclusion
although this attack did not leverage any zero-days or other advanced techniques, it was interesting to see how attackers used different components to perform reconnaissance activities on a specific target. this attack also demonstrates that macro malware is effective even today. users can protect themselves from such attacks by disabling office macros in their settings and also by being more vigilant when enabling macros (especially when prompted) in documents, even if such documents are from seemingly trusted sources. this entry was posted on may 22, 2016 and filed under cybersecurity, advanced threats, targeted attacks, targeted attackers, yin hong chang, targeted attack, email security, sudeep singh, targeted attack, threat intel, advanced targeted attack, bank security, cybercrime, advanced threat actor, and email attacks.
