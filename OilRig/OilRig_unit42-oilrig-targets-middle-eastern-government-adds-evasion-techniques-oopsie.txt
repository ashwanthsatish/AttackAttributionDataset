the oilrig group maintains their persistent attacks against government entities in the middle east region using previously identified tools and tactics. as observed in previous attack campaigns, the tools used are not an exact duplicate of the previous attack and instead is an iterative variant. in this instance a spear phishing email was used containing a lure designed to socially engineer and entice the victim to executing a malicious attachment. the attachment was identified as a variant of the oopsie trojan we identified in february 2018. in this iteration of oopsie, the general functionality largely remained the same but contained the addition of anti-analysis and anti-virtual machine capabilities to further evade detection from automated defensive systems. attack details in july 2018, we reported on a wave of oilrig attacks delivering a tool called quadagent involving a middle eastern government agency. during that wave, we also observed oilrig leveraging additional compromised email accounts at the same government organization to send spear phishing emails delivering the oopsie trojan as the payload instead of quadagent. the oopsie attack also targeted a government agency within the same nation state, though a different organization than the one targeted delivering quadagent. the email subject was in arabic, which translated to business continuity management training . the email was sent to an address belonging to a user group, rather than a specific individual s email address. based on open source data collection, it appears the targeted group had publicly published several documents regarding business continuity management on the internet, indicating the lures were purposefully crafted for this specific attack. evasion techniques the oopsie variant delivered in this attack begins its execution by performing a series of anti-vm and sandbox checks. if any of the checks described in table 1 are successful, the trojan will exit without running any of its functional code. these evasion techniques are meant to thwart automated analysis in an effort to avoid detection. according to msdn, this query should return a class that provides statistics on the cpu fan. the trojan checks to see if the result of this query returned a class with more than 0 elements, which would most likely be true in a non-virtual environment. temperature check	the trojan will perform the following wmi query: the trojan will specifically attempt to get the currenttemperature value from this object and will check to see if the attempt results in an error that contains the word supported. this is meant to find the result of not supported, which is the result if run in a virtual machine. mouse pointer check	the trojan will perform the following wmi query: the trojan will check the caption, description, hardwaretype, infsection, manufacturer and name fields in the results for the string vmware, virtual, vbox, vm or oracle. hard disk check	the trojan will perform the following wmi query: the trojan will check the caption and model fields in the results for the strings virtual, vmware, vm, vbox or oracle. motherboard check	the trojan will perform the following wmi query: the trojan will check the manufacturer and product fields in the results for the strings vmware, virtual, vbox, vm or oracle. sandboxie dll check	the trojan will attempt to load the module via loadlibrary.
vbox dll check	the trojan checks to see if the file exists in the system directory.
vmware dll check	the trojan checks to see if the files or exist in the system directory.
timezone check	the trojan check to see if the system is configured ( daylightname ) with one of the following time zones: human interaction check	before executing its functional code, the trojan presents a dialog box with the following line of code: this dialog box displays an error occurred while processing !, which the user must click the ok button for the trojan to run its functional code. table 1 list of anti-vm and anti-sandbox techniques used by oopsie most of these evasion techniques have been observed in other malware families; however, a few of the techniques were more novel. first, we had not seen the cpu fan check used before, and upon testing the wmi query in a vmware windows 7 virtual machine we saw no result, as seen in figure 1 figure 1 wmi query for the win32_fan class on a vm returning no statistics however, when we ran the same query in a physical system running windows 7, we saw the contents of the win32_fan class, as seen in figure 2. the oopsie payload checks to see if the result of this query as more than 0 elements to determine if it is running on a virtual machine. figure 2 wmi query for win32_fan run on a physical system showing statistics secondly, the cpu temperature check seen in this payload was previously used by gravityrat, as discussed earlier this year by security researchers at talos. they noted that while virtual machines were detected by this technique, some physical systems were also detected as virtual machines because they did not support the wmi query. this suggests that other wmi-based vm detection techniques may also detect certain physical systems if those systems do not support the specific wmi query. the last technique that was particularly interesting is the time zone check, as the trojan will not execute its functional code if the system does not have a specific time zone set. the trojan compares the timezone.currenttimezone.daylightname property to strings iran, arab, arabia and middle east, which will match the following time zones in windows: according to msdn, these five time zones encompass 10 countries that fall within utc+2, +3, +3.5 or +4 as seen in figure 3. the fact that the trojan will not operate on systems that are not configured with these time zones suggests that this is a highly targeted attack focused on a specific subset of target nations. figure 3 countries in which oopsie will run in based on the time zone notable differences the oopsie trojan delivered in this attack had functional code that was very similar to the oopsie variant discussed in our previous blog. the main similarities include the use of a scheduled task to persistently execute on the system, as well as the same general process to communicate with its c2 server. for instance, this trojan uses the internetexplorer application object much like the previous oopsie trojan and a very similar sequence of requests to obtain commands. also, this version of the trojan inspects http responses from the c2 server for the tags <pre> and </pre> and will parse that data for commands. however, there are many differences introduced to this version of oopsie from the previously discussed variant. at face value, this current variant of oopsie has a vast majority of its strings obfuscated, which can be deobfuscated by splitting the strings using the hyphen as a delimiter, treating each split value as an integer, subtracting one from each integer and converting each into a character. the following code snippet was used to decode strings within oopsie:
when first run, this oopsie variant runs a variety of checks to avoid running in an analysis environment, as discussed in the previous section. the last check requires the user to click the ok button in an error dialog box, as seen in figure 4. figure 4 error dialog box displayed by oopsie after displaying the error dialog box, the trojan will sleep for two seconds by running the following command that runs the choice application. the use of the choice command, as seen below, did not appear in previous versions of oopsie and appears to have been added in the most recent version used in this attack. after sleeping, the trojan will create a guid and write it to %appdata% . it then moves itself to %appdata% and sets both of these files to have the hidden and system flags to hide them from the user. with the trojan moved its final location, it will then create a scheduled task to run a vbscript to make sure it runs persistently. the trojan accesses two resources, named sch and vbs that contains obfuscated strings that contain the command to create the scheduled task and the vbscript to run. the decoded string from the sch resource is: the decoded string from the vbs resource is: the %n% string in the schtasks command above will be replaced with the guid saved to . this differs from the previous oopsie variant that used a hardcoded task name for the scheduled task. the %path% string in the scheduled task command will be replaced with the path to the following: the decoded string from the vbs resource is written to shwdoc.vbs. the %app% string in the vbscript is replaced with %appdata% . this process ultimately attempts to run the trojan every three minutes, which is important as oopsie relies on this scheduled task as it does not include a main loop to continue its execution. after creating this scheduled task for persistence, the trojan will begin communicating with its c2 server. the process in which the trojan communicates with its c2 server is very similar to the previous oopsie trojan that we discussed in our previous blog. this particular sample uses the following domain as its c2 server: one obvious difference between this version of oopsie compared to the previously analyzed version is the strings in the c2 urls are reversed, from chk to khc, what to tahw and resp to pser. also, the oops string used to signify and erroneous transmission from the c2, which gave oopsie its name is reversed to spoo. also, this variant of oopsie uses the output of the whoami command as the parameter within the url when communicating with the c2 server, which differs from the previous oopsie variant that used the hostname and username from the environment variables. the c2 communications begins with a beacon to the following url: if the c2 server wishes to send a command, it will respond to the beacon above by echoing the whoami command results sent by the trojan to the c2 in the url. if the trojan receives this echo, it will create the following file that the trojan uses as a signal that it was able to successfully communicate with its c2 server: if the trojan determines the c2 server wishes to send a command, it sends an http request to the following url: the trojan will first check the response to this request for the string spoo, which signifies the c2 does not wish to issue a command. otherwise, the trojan will attempt to parse the response for a command, specifically by splitting the decode response on <> and treating the text to the left of the <> string as the command the text to the right as the command arguments. the command handler in this oopsie variant is very similar to the previous version, as it contains the same three (1, 2 and 3) commands seen in table 2. the one difference in this command handler from the previous version is the boom! command, which allows the actor to uninstall the oopsie trojan from the system. command	description
1	runs a supplied command and writes it output to %appdata%\schwin.vbs, which will then be uploaded to the c2 server.
2	downloads a file to the system. splits argument on (|) , with the string to the left representing the filename to save and the string to the right representing the data to write to the file.
3	read specified file and uploads its contents to the c2 server.
boom!	deletes , shwdoc.vbs and shwdoc.srv files, as well as the scheduled task whose name a guid stored in the file.
table 2 oopsie commands when sending data to the c2 server after running commands, the trojan will use the following url structure with either bby or bbz splitting the whoami output and the exfiltrated data: conclusion the oilrig group remains a persistent adversary in the middle east region. they continue to iterate and add capabilities to their tools while still functionally using the same tactics over and over again. within the time frame we have been tracking the oilrig group, they have repeatedly shown a willingness to add less commonly found functionality to their tools, such as their heavy use of dns tunneling in their backdoors or adding authentication to their webshells. this attack is no different, now adding anti-analysis capabilities into their tools. this adversary is highly resourceful and continues to adapt over time. however, the tactics they continue to deploy are generally unsophisticated, and simple security hygiene would help organizations protect themselves against this threat. palo alto networks customers are protected from this oilrig attack campaign and oopsie by: autofocus customers can track this trojan with the oopsie tag
all known oopsie samples are marked with malicious verdicts in wildfire
all known oopsie c2 domains have dns signatures and are classified as command and control
