the oilrig group remains highly active in their attack campaigns while they continue to evolve their toolset. on january 8, 2018, unit 42 observed the oilrig threat group carry out an attack on an insurance agency based in the middle east. just over a week later, on january 16, 2018, we observed an attack on a middle eastern financial institution. in both attacks, the oilrig group attempted to deliver a new trojan that we are tracking as oopsie. the january 8 attack used a variant of the threedollars delivery document, which we identified as part of the oilrig toolset based on attacks that occurred in august 2017. however, the attack on january 16 did not involve threedollars at all. instead, this attack involved delivering the oopsie trojan directly to the victim, most likely using a link in a spear phishing email. interestingly, the targeted organization in the january 16 attack had already been targeted by the oilrig group a year ago on january 2017. this repeat attack may suggest that the adversaries have lost their foothold in the targeted organization, or that it may be considered a high value target. a new attack on january 8, 2018, the oilrig threat group sent an email with the subject beirut insurance seminar invitation to an insurance agency in the middle east. the oilrig group sent two emails to two different email addresses at the same organization within a six minutes time span. the recipient email addresses suggest they may be the addresses used for specific regional branches of the targeted organization. both emails originated from the same address. the email address is associated with the lebanese domain of a major global financial institution. however, based upon the captured session data, it is highly likely the source email address was spoofed. the email contained an attachment named seminar- , which is a malicious microsoft word document we track as threedollars. examining this sample of threedollars reveals that it contains a new payload, which we have named oopsie. in the january 16, 2018 attack, we observed oilrig attacking an organization it previously targeted in january 2017. in this case, the threedollars delivery document was not used and instead an attempt was made to deliver the oopsie trojan directly to the targeted organization, likely via a link within an email. the trojan was directly downloaded from the command and control server for oopsie, signifying that this server was also used for staging. this suggests that due to the january 2017 attack, the targeted organization may have taken actions to counter known oilrig ttps, in this case delivering malicious macro documents, causing the oilrig operators to adopt a different delivery tactic. we also identified another sample of threedollars, created on january 15, 2017 with the file name strategy preparation.dot. while this sample was very similar to the seminar- sample it also had some significant differences. the primary difference was that this sample was encrypted and password protected, requiring the victim to enter in a password which was likely provided by the adversary to view the document. while this is not a new tactic, this is the first instance where we have observed the oilrig using it in their playbook. typically, password protected documents is commonly used by adversaries as an evasion tactic to bypass automated analysis mechanisms due to the password requirement for successful execution. as we have observed throughout our tracking of the oilrig group, adopting proven tactics has been a common behavior over time. threedollars document analysis the samples of threedollars we collected in these attacks are structurally very similar to the first sample we analyzed in october 2017, down to the lure image used to trick the recipient into clicking the enable content button to execute the malicious macro. the images used in the january 2018 attacks were the exact same in each sample, verified by file hash. figure 1 shows the lure image extracted from the newer attacks, and the lure image from the first sample we analyzed. while it is unsurprising that attacks originating from the same adversary group would use the same resource over time, we analyzed exactly how similar these lure images were. superficially, we can immediately see the images are quite similar, but with some glaring differences. the image from the august 2017 attack for example, is significantly larger, using an image resolution of 3508 pixels x 4961 pixels which is also the exact resolution for a sheet of a3 paper at 300 dpi. it also contains some additional artifacts in the image, such as the inclusion of the microsoft logo as well as additional text, specifically against unauthorized use . in comparison, the newer lure image appears to be horizontally distorted due to it being resized to fit into the constraints of the document. in addition, the period after this document is protected is misaligned. by overlaying these two lure images and accounting for the newer image s distortion, we are able to clearly visualize that the newer image is highly likely to be a cropped and edited version of the august 2017 image. examining the color code used in both images also shows they are the exact same, #da3b01. the dimensions of the newer image are roughly 40% of the older october image, suggesting that after cropping and editing the newer image, the creator is also likely to have resized the image. one peculiar artifact from the original image is the usage of the st (unicode \ufb06) ligature in the word against . this is a highly uncommon glyph and is not generally available in standard keyboard layouts. this may suggest that the string was machine generated rather than directly inputted from a keyboard. the use of this glyph also may suggest that the actor is not a native english speaker. malicious macro analysis when the victim opens the threedollars document they are presented with the lure image and prompted to click on the enable content button. when button is clicked, a malicious macro is silently run which installs then executes a payload on a system. a decoy image is also displayed to the victim to lower suspicion of malicious activity. the decoy message that is eventually presented to the victim does not actually show the expected content of an insurance seminar invitation as presented in the delivery email. instead, it displays a fake error message of nullrefrencedexception! error has occurred in by 0x32ef2121 within the word document, as seen in figure 2. while the decoy in figure 2 is displayed, the macro will search the document for the delimiter ###$$$ and write the base64 encoded text that follows this delimiter to the file %appdata% . the macro then creates a scheduled task named securityassist that runs after waiting one minute. the securityassist task is responsible for running the following command line command that uses the certutil application to decode the base64 encoded data in and saves the decoded data to the file %programdata% : the macro also creates a second scheduled task named conhost that waits two minutes and runs a vbscript %appdata%\chksrv.vbs. the macro saves the chksrv.vbs script to the system, which is responsible for running the payload (oopsie trojan) and cleaning up the installation by deleting the two scheduled tasks, the file, the threedollars document, and the chksrv.vbs script. oopsie trojan analysis the oopsie trojan delivered in these attacks is packed with smartassembly and further obfuscated with confuserex v1.0.0. to run persistently on the system, the trojan will first create a vbscript file: the trojan replaces the %app% string in the above vbscript with the path to its executable. finally, the trojan creates a scheduled task to run itself every three minutes by running the following command on the command prompt after replacing the %path% string with the path to the srvresesponded.vbs vbscript: the trojan uses http to communicate with its c2 server, specifically using the internetexplorer application object within an embedded microsoft .net framework assembly called interop.shdocvw. the trojan extracts and loads this embedded assembly by concatenating the contents of two resources named s1 and s2 and decompresses the resulting data using the gzipsteam class. the resulting interop.shdocvw .net assembly is packed with smartassembly and further obfuscated using confuser v . the concatenation of resources to construct embedded assemblies is not a new technique for the oilrig group, as they used the very same technique in october 2017 in their isminjector tool to construct its embedded libraries and . by using the internetexplorer application object, all c2 related requests will look as if they came from the legitimate browser and therefore will not contain any anomalous fields within the request, such as custom user-agents. the oopsie trojan is configured to use a c2 server hosted at: the trojan will construct specific urls to communicate with the c2 server and parses the c2 server s response looking for content within the tags <pre> and </pre>. the initial http request acts as a beacon, as shown in the image below. as seen in the above request, the trojan will generate a url for its beacon with the following structure: the trojan will issue a request to this url to check (hence the chk string in the url) to see if the c2 server has a command for the trojan to run. the c2 server will respond to the trojan s request by echoing the value <hex(environment.username/environment.machinename)> if it wishes to provide additional commands. if the c2 server does not respond with the appropriate echoed data, the trojan will create a file named in the specialfolder.commonapplicationdata folder and write nothing to it before exiting. if the c2 server provides the appropriate echoed data in the response, the trojan attempts to determine what commands the c2 wishes to run by issuing a request to the following url: after issuing the what command, the trojan will parse the c2 s response for the string oops, which the trojan will treat as the c2 making a mistake and will exit. otherwise, the server will respond with a command followed by a set of parameters, split up by the delimiter <>: the parameters for each command are issued in hexadecimal format. for instance, the character a would be represented by the two characters 41, which is the hexadecimal representation of that character. this hexadecimal format is used extensively throughout this trojan. the run command (1) creates the process /c with the command parameters appended and will write the output of the command in hexadecimal format to the file %appdata%\tmpca.vbs. the trojan will then read the hexadecimal formatted contents of this file in 1500 byte blocks, sending each 1500 bytes of data from the file to the c2 server via an http get request to a url with the following structure: the upload command (2) writes data provided by the c2 to a specified file. the parameters supplied to this command include hexadecimal values for the binary data and the filename, which are split up by a delimiter of (!). the trojan will respond to the c2 to notify it of a successful upload by sending a url structured as follows: the download command (3) reads the contents of a specified file and sends the data to the c2 server. if the file does not exist, the trojan will send the c2 server a message < file not found > by sending the following url: if the file exists, the trojan will read the contents of the specified file and compresses the contents using the gzipstream class. the trojan then gets the hexadecimal values of the compressed data and will replace the following hexadecimal values on each line with ascii characters to further compressed the data: the trojan then writes 1500 bytes of the hexadecimal formatted data, one per line to a temporary file in the specialfolder.commonapplicationdata folder named as: the trojan will then read each line from this temporary file and send them to the c2 server by issuing requests to a url structured as follows: once all of the lines of hexadecimal formatted data in the temporary file are sent to the c2 server, the trojan will send a request to the c2 server to notify the data has been successfully transmitted via a url structured as follows: overlaps with previous oilrig group attacks since may 2016, we have continued to monitor and uncover various attacks and tools associated with the oilrig group. as we discover new tools used by this group, we have consistently discovered overlapping artifacts with previously used tools and infrastructure. this type of commonality is unsurprising as we are assuming a single adversary, and is an excellent example of how adversaries will often times reuse certain tactics and techniques whether it is for efficiencies sake or sheer laziness. in the attacks described above, we observed a new payload being delivered using a previously unknown command and control domain. however, as we continued to follow the trail of evidence, we found immediate links to past attacks and common artifacts from the oilrig group. the most obvious link is the reuse of the threedollars delivery document, which we had previously observed delivering a different payload. however, we also found other connection to other oilrig group attacks starting with the command and control domain, msoffice365cdn[.]com. beginning with the whois record, we see that the domain was registered by emilia.jones@ . examining additional domains registered to this email address reveals the domain office365-management[.]com, which we previously identified in october 2017 to be an oilrig c2. continuing to examine the whois records, we see that a fairly unique phone number is also used in the record. it is only found in one other whois record, for the domain office365-technical[.]info, which is registered to leonard.horner@ . based off the relational links and thematic similarity of the domain name, we have strong reason to believe this domain and registrant are also attributed to the oilrig group. moving onto ip resolutions of the identified domains proves to be fruitful as well. msoffice365cdn[.]com resolves to , which resides on the same class c network range as the ip resolution of office365-technical[.]info, which resolves to . in addition, we find that shares an ssl certificate with a small number of other ip addresses, one of which is . this ip resolves to office365-management[.]com which was one of the domains registered by the emilia.jones@ entity. inspecting the class c network for /24 shows us that another ip on the same network resolves to an oilrig domain, msoffice-cdn[.]com which we identified in august 2017. lastly, we examine the delivery document itself. although we have already identified the documents as a variant of the threedollars tool and analyzed the lure image used in this document in comparison to the previously used lure image, additional artifacts also exist to further strengthen the relational link of this sample and the attack to previous oilrig attributed tools and attacks. in this case, one of the threedollars samples we collected contained a unique author name of j-win-7-32-vm. we had previously observed this author name in use once before, in the very first threedollars document we collected that we had reported on in august 2017. oopsiemaltego conclusion the oilrig group continues to remain a highly active adversary in the middle east region. this group has repeatedly shown evidence of a willingness to adapt and evolve their tactics, while also reusing certain aspects as well. we have now observed this adversary deploy a multitude of tools, with each appearing to be some form of iterative variation of something used in the past. however, although the tools themselves have morphed over time, the plays they have executed in their playbook largely remain the same when examined over the attack life cycle. we have added this play to the oilrig playbook, which can be viewed online via our playbook viewer. palo alto networks customers are protected from this threat by: wildfire detects all threedollars and oopsie payloads with malicious verdicts.
autofocus customers can track these tools with the threedollars and oopsie
traps blocks the threedollars delivery documents and the oopsie payload.
panav detects the threedollars samples as virus/win32.wgeneric.pefia and the oopsie payload as virus/win32.wgeneric.pipwf