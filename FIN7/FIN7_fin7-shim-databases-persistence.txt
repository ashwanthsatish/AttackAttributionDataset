to sdb, or not to sdb: fin7 leveraging shim databases for persistence
may 03, 2017 | by matthew mcwhirt, jon erickson, dj palombo
in 2017, mandiant responded to multiple incidents we attribute to fin7, a financially motivated threat group associated with malicious operations dating back to 2015. throughout the various environments, fin7 leveraged the carbanak backdoor, which this group has used in previous operations. a unique aspect of the incidents was how the group installed the carbanak backdoor for persistent access. mandiant identified that the group leveraged an application shim database to achieve persistence on systems in multiple environments. the shim injected a malicious in-memory patch into the services control manager ( ) process, and then spawned a carbanak backdoor process. mandiant identified that fin7 also used this technique to install a payment card harvesting utility for persistent access. this was a departure from fin7 s previous approach of installing a malicious windows service for process injection and persistent access. application compatibility shims background
according to microsoft, an application compatibility shim is a small library that transparently intercepts an api (via hooking), changes the parameters passed, handles the operation itself, or redirects the operation elsewhere, such as additional code stored on a system. today, shims are mainly used for compatibility purposes for legacy applications. while shims serve a legitimate purpose, they can also be used in a malicious manner. mandiant consultants previously discussed shim databases at both brucon and blackhat. shim database registration
there are multiple ways to register a shim database on a system. one technique is to use the built-in command line tool. figure 1 displays the two registry keys created when a shim is registered with the utility. figure 1: shim database registry keys once a shim database has been registered on a system, the shim database file ( .sdb file extension) will be copied to the c:\windows\apppatch\custom directory for 32-bit shims or c:\windows\apppatch\custom\custom64 directory for 64-bit shims. malicious shim database installation
to install and register the malicious shim database on a system, fin7 used a custom base64 encoded powershell script, which ran the utility to register a custom shim database file containing a patch onto a system. figure 2 provides a decoded excerpt from a recovered fin7 powershell script showing the parameters for this command. figure 2: excerpt from a fin7 powershell script to install a custom shim fin7 used various naming conventions for the shim database files that were installed and registered on systems with the utility. a common observance was the creation of a shim database file with a .tmp file extension (figure 3). figure 3: malicious shim database example upon registering the custom shim database on a system, a file named with a random guid and an .sdb extension was written to the 64-bit shim database default directory, as shown in figure 4. the registered shim database file had the same md5 hash as the file that was initially created in the c:\windows\temp directory. figure 4: shim database after registration in addition, specific registry keys were created that correlated to the shim database registration. figure 5 shows the keys and values related to this shim installation. figure 5: shim database registry keys the database description used for the shim database registration, microsoft kb2832077 was interesting because this kb number was not a published microsoft knowledge base patch. this description (shown in figure 6) appeared in the listing of installed programs within the windows control panel on the compromised system. figure 6: shim database as an installed application malicious shim database details
during the investigations, mandiant observed that fin7 used a custom shim database to patch both the 32-bit and 64-bit versions of with their carbanak payload. this occurred when the process executed at startup. the shim database file contained shellcode for a first stage loader that obtained an additional shellcode payload stored in a registry key. the second stage shellcode launched the carbanak dll (stored in a registry key), which spawned an instance of service host ( ) and injected itself into that process. figure 7 shows a parsed shim database file that was leveraged by fin7. figure 7: parsed shim database file for the first stage loader, the patch overwrote the scregistertcpendpoint function at relative virtual address (rva) 0x0001407c within the process with the malicious shellcode from the shim database file. the new scregistertcpendpoint function (shellcode) contained a reference to the path of \registry\machine\software\microsoft\drm , which is a registry location where additional malicious shellcode and the carbanak dll payload was stored on the system. figure 8 provides an excerpt of the parsed patch structure within the recovered shim database file. figure 8: parsed patch structure from the shim database file the shellcode stored within the registry path hklm\software\microsoft\drm used the api function rtldecompressbuffer to decompress the payload. it then slept for four minutes before calling the carbanak dll payload's entry point on the system. once loaded in memory, it created a new process named that contained the carbanak dll. bringing it together
figure 9 provides a high-level overview of a shim database being leveraged as a persistent mechanism for utilizing an in-memory patch, injecting shellcode into the 64-bit version of . figure 9: shim database code injection process detection
mandiant recommends the following to detect malicious application shimming in an environment: monitor for new shim database files created in the default shim database directories of c:\windows\apppatch\custom and c:\windows\apppatch\custom\custom64 monitor for registry key creation and/or modification events for the keys of hklm\software\microsoft\windows nt\currentversion\appcompatflags\custom and hklm\software\microsoft\windows nt\currentversion\appcompatflags\installedsdb monitor process execution events and command line arguments for malicious use of the utility 