turla apt actor refreshes kopiluwak javascript backdoor for use in g20-themed attack
august 17, 2017
darien huss overview proofpoint researchers have observed a well-known russian-speaking apt actor usually referred to as turla using a new .net/msil dropper for an existing backdoor called js/kopiluwak. the backdoor has been analyzed previously [11] and is a robust tool associated with this group, likely being used as an early stage reconnaissance tool. in this case, the dropper is being delivered with a benign and possibly stolen decoy document inviting recipients to a g20 task force meeting on the "digital economy". the digital economy event is actually scheduled for october of this year in hamburg, germany. the dropper first appeared in mid-july, suggesting that this apt activity is potentially ongoing, with turla actively targeting g20 participants and/or those with interest in the g20, including member nations, journalists, and policymakers. this blog provides details on the dropper and known information on the infection chain and current related turla activity. actor overview turla is a well-documented, long operating apt group that is widely believed to be a russian state-sponsored organization. turla is perhaps most notoriously suspected as responsible for the breach of the united states central command in 2008 [1]. more recently turla was accused of breaching ruag, a swiss technology company, in a public report published by [2]. various other turla frameworks, implants, and campaigns have been detailed extensively by our fellow security organizations and companies [3-10]. delivery the delivery of kopiluwak in this instance is currently unknown as the msil dropper has only been observed by proofpoint researchers on a public malware repository. assuming this variant of kopiluwak has been observed in the wild, there are a number of ways it may have been delivered including some of turla s previous attack methods such as spear phishing or via a watering hole. based on the theme of the decoy pdf, it is very possible that the intended targets are individuals or organizations that are on or have an interest in g20 s digital economy task force. this could include diplomats, experts in the areas of interest related to the digital economy task force, or possibly even journalists. analysis the earliest step in any possible attack(s) involving this variant of kopiluwak of which proofpoint researchers are currently aware begin with the msil dropper. the basic chain of events upon execution of the msil dropper include dropping and executing both a pdf decoy and a javascript (js) dropper. as explained in further detail below, the js dropper ultimately installs a js decryptor onto an infected machine that will then finally decrypt and execute the actual kopiluwak backdoor in memory only (fig. 1). figure 1 figure 1: diagram showing execution beginning with the msil dropper as proofpoint has not yet observed this attack in the wild it is likely that there is an additional component that leads to the execution of the msil payload. this may include a malicious document, compressed package attached to an e-mail, or perhaps it could be delivered via a watering hole attack. the kopiluwak msil dropper is straightforward and contains absolutely no obfuscation or anti-analysis. internally the msil dropper is called and also contains a pdb string: . the stage1 js and pdf decoy are both stored in plaintext in the dropper and are simply written to %appdata% then executed (fig. 2). both of the dropped files have hardcoded names: the js is named while the pdf is named save the date g20 digital economy taskforce 23 24 . the decoy in this case is an invitation to save the date for a meeting of the g20 s digital economy taskforce (fig. 3) in hamburg, germany. as far as we are aware, this document is not publicly available and so may indicate that an entity with access to the invitation was already compromised. alternatively, the document may have been legitimately obtained from a recipient. proofpoint researchers ascertain with medium confidence that the document is legitimate and not fabricated. one piece of evidence suggesting that the document could be authentic is that in the document s exif metadata, the creator tool is listed as be.d4.113.1 (fig. 4) which matches another pdf document that appears to have been scanned and is hosted on the bundesministerium f r wirtschaft und energie website (fig. 5). bmwi, which translates to federal ministry for economic affairs and energy, is the organization from which the decoy document supposedly originated. both documents were also supposedly created on a konica minolta bizhub c284e according to their exif metadata. analysis is essentially a dropper for the actual backdoor in addition to running all the necessary commands to fingerprint the infected system and set up persistence. first creates a scheduled task named policyconverter for persistence. this scheduled task should execute shortly after being created and is then scheduled to run every 10 minutes. the scheduled task is executed with the following parameters: filetypexml gwvaj83jsiqtz5fg . similar to the older kopiluwak variant, the second parameter is used as an rc4 key to decrypt the encrypted js backdoor code contained in . next, decodes a large base64 blob containing the js backdoor decryptor and saves it to the following location: c:\users\[executing user]\appdata\roaming\microsoft\protect\ lastly, executes various commands to fingerprint details about the infected system. in the older variant of kopiluwak, these commands were executed directly from the backdoor js. now, however, they have been moved to the dropper. despite moving the machine fingerprinting code to the dropper, all of the commands are the same as in the older sample (and executed in the same order) except for the following three additions: interestingly the only anti-virus company that is specifically fingerprinted is kaspersky, which was possibly added as a result of their public analysis of this backdoor. the output from the commands are saved to the following location: %appdata%\microsoft\protect\~~.tmp the script contains a large string that is first base64-decoded then rc4-decrypted using the supplied parameter as a key ( gwvaj83jsiqtz5fg ) from the executed task. once the kopiluwak backdoor code is successfully decrypted, it is then executed with eval(). the decrypted code functions similarly to the original kopiluwak discussed by kaspersky with some slight changes. the backdoor still communicates with what appear to be two compromised, legitimate websites using http post requests (fig. 6). differing from the older sample, the http user-agent is now hardcoded and no longer contains a component unique to each infected machine. each http post request sent to the command and control (c&c) will contain information in its client body. the plaintext content is first preceded with a hardcoded key prc1mhxf_vb0ht7s . next, the key is followed by a separator string ridid . next, the hardcoded key prc1mhxf_vb0ht7s is used to encode the infected system s os installation date (fig. 7). if any additional information is being sent to the c&c it will then be appended after the encoded installation date. finally, the data is encrypted with rc4 using a hardcoded key: and then quoted (fig. 8). responses from the command and control are also encrypted using rc4 and the same key. after responses from the c&c are decrypted, they are compared to a list of supported commands. this newer variant of kopiluwak has several different supported command keywords, including one additional command, giving a total of five commands versus the old variant s four (table 1). exit the script. the scheduled task would execute the backdoor again in ~10 minutes dwld saves the provided content with provided extension to %appdata%\microsoft\protect\d8chd.[ext]. if successful sends success message to c2. table 1: kopiluwak supported commands and descriptions the newer variant of kopiluwak is now capable of exfiltrating files to the c&c as well as downloading files and saving them to the infected machine. although these capabilities could have been accomplished in the previous variant by executing arbitrary commands, they are now implemented with their own dedicated commands. despite the added capabilities, we still agree with kaspersky that this backdoor is likely used as an initial reconnaissance tool and would probably be used as a staging point to deploy one of turla s more fully featured implants. we also believe this backdoor will continue to be used in the future as suggested by the continued development of the backdoor itself as well as the new delivery mechanisms. conclusion because the samples were obtained from a public malware repository and we have not yet observed them in the wild, the full scope and impact of the attack (or, possibly, a pending attack) cannot be fully assessed. however, for pcs running the .net framework (which includes most modern windows operating systems), the potential impact is high: the javascript dropper profiles the victim s system, establishes persistence, and installs the kopiluwak backdoor.
kopiluwak is a robust tool capable of exfiltrating data, downloading additional payloads, and executing arbitrary commands provided by the actor(s)
the high profile of potentially targeted individuals associated with the g20 and early reconnaissance nature of the tools involved bear further watching. we have notified cert-bund of this activity. we will continue to track the activities associated both with this actor and these new tools and update this blog as details emerge.
