 introduction
neuron and nautilus are malicious tools designed to operate on microsoft windows
platforms, primarily targeting mail servers and web servers. the ncsc has observed
these tools being used by the turla group to maintain persistent network access and
to conduct network operations.
the turla group use a range of tools and techniques, many of which are custom. using
their advanced toolkit, the turla group compromise networks for the purposes of
intelligence collection. the turla group is known to target government, military,
technology, energy and commercial organisations.
the turla group has operated on targets using a rootkit known as snake for many
years. like neuron and nautilus, snake provides a platform to steal sensitive data,
acts as a gateway for internal network operations and is used to conduct onward
attacks against other organisations.
the turla group are experienced in maintaining covert access through incident
response activities. they infect multiple systems within target networks and deploy a
diverse range of tools to ensure that they retain a foothold back onto a victim even
after the initial infection vector has been mitigated.
the ncsc has observed both neuron and nautilus being used in conjunction with the
snake rootkit. in a number of instances, one or both of these tools has been deployed
following the successful installation of snake. the ncsc believes that neuron and
nautilus are another component of the wider turla campaign and are not acting as
replacements for the snake rootkit. it is likely that these tools have seen wider
deployment since the snake rootkit has been reported on by the information security
industry, providing the group with additional methods of access.
this advisory provides information to detect neuron and nautilus infections. the
ncsc encourages any organisation that has previously experienced a compromise
by the turla group to be diligent in checking for the presence of these additional tools.
whilst they are commonly deployed alongside the snake rootkit, these tools can also
be operated independently. neuron analysis
neuron consists of both client and server components. the neuron client and neuron
service are written using the .net framework with some codebase overlaps.
the neuron client is used to infect victim endpoints and extract sensitive information
from local client machines. the neuron server is used to infect network infrastructure
such as mail and web servers, and acts as local command & control (c2) for the client
component. establishing a local c2 limits interaction with the target network and
remote hosts. it also reduces the log footprint of actor infrastructure and enables client
interaction to appear more convincing as the traffic is contained within the target
network.
the main method of communication between the neuron client and service is via
http requests. the neuron service creates its own http listener and waits for
requests to a configured neuron url endpoint. these endpoint names are themed
around legitimate web services, such as microsoft exchange and microsoft iis, which
further helps malware traffic appear legitimate. details of these endpoints are provided
in the neuron service communications section of this advisory.
a subset of neuron services analysed by the ncsc can receive communications via
pipes alongside the http listener, however this functionality is missing from some
samples.
one of the main pieces of functionality implemented within neuron is the synchronising
of storagefile objects and storagescript objects between the client and service.
these are described in more detail in the network communications section.
this malware is referred to as neuron due to the presence of a pdb string within the
binary and various other references throughout. neuron service
the neuron service is typically installed on compromised infrastructure such as mail
and web servers, and listens for http requests from infected clients. in this way,
neuron service acts as a command & control (c2) server inside the victim network
for infected neuron clients. while neuron service examples observed by the ncsc
have been running on servers, it is also possible for it to be run on windows clients.
the installation of a c2 server inside the victim network allows the actor to evade
detection by network gateway based monitoring. while external communications are
required for the actor to make connections back to their upstream c2 infrastructure,
these communications are often encrypted using the legitimate tls configuration of
the victim network.
the neuron service and client model enables the communications to appear
legitimate, with endpoint victims running the client, and the actor initiating connections
to the (typically) outward-facing neuron infected server.
associated files
infection vector & install
the infection vector for the neuron service is typically via exploitation of application
layer vulnerabilities in server software, server misconfigurations, or brute-force attacks
on administrative accounts.
neuron service requires a dropper that essentially performs the same actions as the
client dropper, embedding the final payload using the same method detailed in the
neuron client section. the service dropper takes a parameter of the path where the
payload will be dropped.
following execution, the dropper modifies the last access time of the deployed files to
match the timestamps of the legitimate file . it is advised that
forensic investigators conduct a search for files that have this timestamp applied.
finally, the dropper executes the following command to remove all installation log files: /c del *.installlog *.installstate
persistence
in order to persist on the compromised hosts, neuron service installs itself as an
automatic service, allowing the infection to persist through a server restart. the
neuron service can be manually stopped and removed, and contains no method of reestablishing execution. the neuron service attempts to masquerade as legitimate microsoft exchange or
microsoft iis services. a list of the service names and descriptions used within neuron
samples is as follows:
service name display name description
msexchangeservice microsoft exchange
service
host service for the microsoft exchange
server management provider. if this service
is stopped or disabled, microsoft exchange
cannot be managed.
w3wpdiag microsoft iis
diagnostics service
host service for the microsoft iis management
provider. if this service is stopped or
disabled, microsoft iis cannot be managed.
updater updater host service for software update. if this
service is stopped or disabled, software
cannot be update.
network communications
communications between the client and service are via http requests. the service
will establish a http listener, commonly on port 443 (https), however instances have
been analysed where port 80 (http) is used instead. the listener waits for requests on
the host matching specific uris defined by the configuration. the following have been
defined in the configuration in neuron samples analysed by the ncsc:
neuron clients send requests to the defined endpoint in order to communicate with the
service. in order to make the traffic from clients look legitimate, the actor has chosen
to name their endpoints with common microsoft windows terms.
communications are encrypted using rc4 as an additional layer of security. the rc4
key is sent to the connecting client using a pre-configured rsa key.
parameters for a request are sent in the post body, with the following values
possible: the values for these parameters are base64 encoded and rc4 encrypted using the
key exchanged between the client and service. each parameter performs a different
task within the service; for example, cid requests the current rc4 key and cadata sends an instruction to be run.
an example http communication is shown below:
the following snort rules can be used to alert on this traffic. network collection will
need to be in place between the client and server; in most instances, this is between
two machines within the same lan:
in addition to http communications, some observed neuron service samples have
functionality that enables the clients to communicate with it via pipes, for example:
capabilities
the main functionality of the neuron service is to return and synchronise storagefile
and storagescript objects between the client and service.
a storagefile object contains information about a file including its name, modified date
and the file contents; a storagescript object contains instructions . there are multiple
instruction types, including the following: executing a command using creating new storagefiles downloading specified or all storagefiles
neuron client
the neuron client component is typically installed on endpoint machines within a
victim network. command & control (c2) is conducted by the neuron service. the
client is designed to collect, package and send documents to the service component
for onward exfiltration.
infection vector and install
the neuron client infection vector appears to be via spear-phishing victims with
documents containing macros. when a document is opened, and macros are enabled,
a base64 encoded blob is constructed and written to the %temp% directory as signature.crt ; this is then decoded using the legitimate microsoft binary ,
for example: -decode %temp%\signature.crt %temp% the resulting executable is the neuron client dropper, which is responsible for setting
up any initial configuration, establishing persistence and dropping the main payload to
disk.
the main payloads are embedded in the dropper executable and are gzip
compressed and rc4 encrypted with a hardcoded key. the dropper is also
responsible for deploying any legitimate dlls that may also be required these are
stored in the same way.
all files are placed into the directory from which the dropper was executed.
persistence
the neuron client executable contains no functionality to establish persistence.
instead, the dropper handles this for the client by creating a scheduled task, enabling
it to persist after a reboot.
the task is scheduled to run every 12 minutes (pt12m), with a task id of microsoft
corporation and a task description constructed from a string retrieved from a
randomly selected registry value. to build the task description, a list of value names
of length 9 or greater but not containing "\" are retrieved from
hklm\\software\\microsoft registry. one of these values is selected and prefixed to
the string " updater". this is then used as the description for the scheduled task. configuration
the neuron client configuration is stored in the registry as json; it must be set up by
the dropper before the client is run as no defaults are specified.
the configuration includes the domains where neuron service implants have been
deployed, so that the client can communicate with them. the configuration also
specifies a beacon interval for each domain, along with a keep alive interval and time
wait interval.
an example of the server configuration in json representation, taken from a neuron
client dropper, is as follows:
network communications
communications are detailed in the neuron service section. the neuron client and
service primarily communicate via http requests.
as an extra layer of security, the client rc4 encrypts any data being sent. the key
used is the machine guid retrieved from the registry
(software\microsoft\cryptography\machineguid); if this is not set then the default
capability
once loaded the neuron client will loop indefinitely, performing a sync of storage files
with the neuron service. the interval between synchronisations is specified in the
configuration by the cmdtimewait value.
in order to synchronise with the service, the client will retrieve all local storagefile
objects and all storagefiles on the service (without file data) and compare these for
differences. the client retrieves the storagefiles from the service by sending a post
request with the following data within the parameter cadata :
this is encrypted with rc4 and then base64 encoded before being sent.
the service will respond with a list of all storagefile metadata (i.e. name and date of
each storagefile). this is then used to determine which storagefiles the client is
missing, as well as any files which the service is missing.
the client will send any required files (including file data) to the service by sending the
following command data:
where a storage file object has a json representation as follows:
finally, the client will download all missing storagefiles from the service by sending
the following command data:
where the sent data contains the required storagefile names, as follows:
these new files are then written to disk, and added to the clients list of storagefiles.
nautilus
nautilus is very similar to neuron both in the targeting of mail servers and how client
communications are performed. this malware is referred to as nautilus due to its
embedded internal dll name nautilus- , again sharing some resemblance
to neuron.
the main payload and configuration of nautilus is encrypted within a covert store on
disk which is located in \programdata\microsoft\windows\caches\ . the loader dll
will access this covert store to decrypt the payload ( ), which is then loaded
into a target process via reflective loading.
the nautilus service listens for http requests from clients to process tasking
requests such as executing commands, deleting files and writing files to disk.
the server configuration block, which defines the port and url for nautilus to listen
on, is passed in the identifier config_listen.system . a sample configuration is shown
the covert store uses a proprietary format to store data. this format stores separate
streams (i.e. one for the config and one for the context) with each split into chunks of
4096 bytes and encrypted using rc4. the offset to the next chunk is calculated by
taking the decrypted int value at offset 0xff8 of the decrypted chunk, shifting this left
by 0xc and then adding 0x10000. for the first chunk, this initial int value is at offset
0xb4 of the header.
a default rc4 key is used to decrypt the first chunk; this key is hardcoded into nautilus
as but is passed into a function that
trims the length to 31 bytes, resulting in the final 32 byte initial rc4 key being 1b1440d90fc9bcb46a9ac96438feea8\x00 .
the rc4 implementation used for encryption of the covert store has been modified
from a standard implementation. this may be an attempt to frustrate decryption;
however, it is easily spotted when reverse engineering the sample. the following python implementation duplicates the modified rc4 xor loop:
a covert store can be identified by rc4 decrypting the 4 bytes at offset 0xfffc with the
default rc4 key followed by comparison with the magic bytes 0x3a29bd32.
communications
communication with clients is performed in a similar fashion to neuron. nautilus
listens for incoming connections from clients on port 443 that are addressed to the
url /owa-autodiscover-ews ; this url path could be modified. nautilus is
commonly installed on a victim mail server, enabling the pre-installed tls
configuration to be used.
data sent to the service is encoded in the referrer header, which is masquerading as
a legitimate bing search. the format string used to create this is as follows:
alongside the neuron and nautilus toolkits, the ncsc identified a file named . this file was installed on a number of victims following the successful
exploitation of web application software, and provides additional persistence to enable
the deployment of further tools.
the script defines its working directory as the value of the windows environment
variable temp , using this location to drop and execute files and collect data.
this script accepts web requests and extracts the cookie parameter; valid data in the
cookie is base64 encoded and aes encrypted using hardcoded values.
the script supports the processing of multiple cookies from a single request, indicating
it is possible to issue multiple commands in a single request. when the cookie value
is decoded and decrypted, the script expects one of the following commands followed
by any additional parameters:
command function
put accepts a file name and writes the contents
of data request parameter to a file in
the working directory
update overwrites the shell itself with the
content of the data request parameter
time updates the timestamp on a specific file
with a specified timestamp (creation, last
write and access).
cmd executes a provided command using del deletes a specified file
get gets a specified filename from the working
directory and returns its contents to the
requestor