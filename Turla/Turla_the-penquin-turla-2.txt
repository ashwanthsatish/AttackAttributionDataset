the penquin turla
a turla/snake/uroburos malware for linux
by kurt baumgartner, costin raiu on december 8, 2014. 7:05 pm
recently, an interesting malicious sample was uploaded to a multi-scanner service. this immediately triggered our interest because it appears to represent a previously unknown piece of a larger puzzle. that puzzle is turla , one of the most complex apts in the world. we have written previously about the turla apt with posts about their epic turla operations and agent.btz inspiration. so far, every single turla sample we ve encountered was designed for the microsoft windows family, 32 and 64 bit operating systems. the newly discovered turla sample is unusual in the fact that it s the first turla sample targeting the linux operating system that we have discovered. this newly found turla component supports linux for broader system support at victim sites. the attack tool takes us further into the set alongside the snake rootkit and components first associated with this actor a couple years ago. we suspect that this component was running for years at a victim site, but do not have concrete data to support that statement just yet. the linux turla module is a c/c++ executable statically linked against multiple libraries, greatly increasing its file size. it was stripped of symbol information, more likely intended to increase analysis effort than to decrease file size. its functionality includes hidden network communications, arbitrary remote command execution, and remote management. much of its code is based on public sources. elf 32-bit lsb executable, intel 80386, version 1 (sysv), statically linked, for gnu/linux 2.2.5, stripped statically linked libraries:
this turla cd00r-based malware maintains stealth without requiring elevated privileges while running arbitrary remote commands. it can t be discovered via netstat, a commonly used administrative tool. it uses techniques that don t require root access, which allows it to be more freely run on more victim hosts. even if a regular user with limited privileges launches it, it can continue to intercept incoming packets and run incoming commands on the system. startup and execution
to start execution, the process requires two parameters: id (a numeric value used as a part of the magic packet for authentication ) and an existing network interface name. the parameters can be inputted two different ways: from stdin, or from dropper a launching the sample. this is not a command-line parameter, it s a real prompt asking the attacker user to provide the input parameters. after the id and interface name are entered and the process launched, the backdoor s process pid is returned. here is a screenshot of this simple interface: while there is no initial network callback, a section of code maintains a hardcoded c2 string news-bbc.podzone[.]org . this fully qualified domain name was first set up in 2010, suggesting that this binary is fairly recent in the string of turla campaigns. also, while we haven t seen additional file download activity from this server by this tool, it likely participated as a file server of sorts. magic packets for remote command execution
the module statically links pcap libraries, and uses this code to get a raw socket, applies a filter on it, and captures packets, checking for a specific condition (the *original cd00r first used this method, based on ports and syn-packets). this condition is expressed here (it is based on the id value input at startup by the attacker): id = 123 filter = (tcp[8:4] & 0xe007ffff = 0xe003bebe) or (udp[12:4] & 0xe007ffff = 0xe003bebe) id = 321 filter = (tcp[8:4] & 0xe007ffff = 0x1bebe) or (udp[12:4] & 0xe007ffff = 0x1bebe)
in simple terms, it checks for an ack number in the tcp header, or the second byte from the udp packet body. if such a packet is received and the condition check is successful, execution jumps to the packet payload contents, and it creates a regular socket. the backdoor handles this socket as a file with read/write operations. it s not the typical recv/send used in this code. it uses this new socket to connect to the source address of the magic packets . then it reports its own pid and ip to the remote address, and starts an endless loop for receiving remote commands. when a command arrives, it is executed with a /bin/sh -c script. further analysis of the sample s functionality will be updated here. conclusions
although linux variants from the turla framework were known to exist, we haven t seen any in the wild yet. this specific module appears to have been put together from public sources with some added functionality from the attackers. some of the malicious code appears to be inactive, perhaps leftovers from older versions of the implant. perhaps the most interesting part here is the unusual command and control mechanism based on tcp/udp packets, as well as the c&c hostname which fits previously known turla activity. the discovery of this turla module rises one big question: how many other unknown turla variants exist? update: since the publishing of this blogpost, we have discovered another linux turla module, which apparently represents a different malware generation than the previously known samples: turla_linux_2 the new sample was heuristically detected by our product due to similarities with the previously discovered samples.
