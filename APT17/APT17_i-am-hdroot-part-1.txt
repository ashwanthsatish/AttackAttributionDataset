some time ago while tracking winnti group activity we came across an intriguing sample. it was protected by a commercial vmprotect win64 executable signed with a known compromised certificate from chinese entity guangzhou yuanluo technology. moreover, the properties of the executable read as if it were microsoft s net command , and even running the sample also resulted in output typical of the original utility: masquerading as all this pointed to the sample being rather suspicious. bootkit
since the code of the program was protected, an analysis of its functionality would have been an arduous task. but luckily a dump revealed some unique and quite important strings and four more samples hidden inside the initial one: win32 and win64 versions of one library and one driver: strings in malware body the strings led us to suspect that this sample was actually a bootkit installer. and thanks to some clear artifacts we found a similar sample but with no code protection that confirmed our suspicions. first of all, let s run this tool: original hdd rootkit output the program parameters are quite self-explanatory this tool installs a bootkit that infects the operating system during the boot stage with an arbitrary backdoor specified as a parameter. the backdoor has to be a win32 executable or dynamic link library. this utility is called hdd rootkit ; hence the base of our verdict names hdroot. on 22 august 2006 the version number was 1.2. so, we can conclude that the protected version was the same utility modified for use on the victim side to avoid revealing the intent of the tool in case someone outside the intruders circle discovered it. hdd rootkit maintains a bunch of resources that also have quite telling names: hdd rootkit resources as it reads: mbr maintains the 1st piece of malicious code that is injected to the mbr of an infected computer; boot 2nd piece of malicious booting code; rkimage 3rd piece of malicious booting code; dllload dynamic link library that is pushed by the malicious booting code into the file system and os autorun. let s try running some executable with the help of a bootkit. in our experiment the role of the executable is played by a benign program that does nothing apart from create a file in the root of the c: drive. i will try to run it using the hdd rootkit utility with the following command line: telling it that i d like to install a bootkit on drive c: that will make the program run on system startup. live installing of hdroot bootkit the utility checks the free space left on the specified drive and refuses to install the bootkit when the value is less than 30% of overall volume. free space check so, now the bootkit has been installed. let s take a look at what has happened. first of all, part of the code in the mbr is replaced with a malicious one from the resource mbr : mbr resource the first 2 bytes eb 70 mean a jump to the 72nd offset where the rest of the 1st booting code block is located. the zeros before 0x70 and after 0xb0 mean the code of the original mbr at these positions remains intact. the following image represents a patched mbr after the bootkit is installed: injected malicious code in mbr this first piece loads the next booting code block that has been placed by the bootkit installer in the 11th sector (offset: 0x1400 bytes). the 2nd block is taken from the resource boot . 2nd booting block the byte at 8th offset of the 2nd booting block is a drive number and the next dword is an offset in sectors where the next booting part is located. this example has the value 0x80, meaning drive 0 and the offset 0x5fd9a0, which if multiplied by 0x200 bytes (size of sector) results in 0xbfb34000. this is the offset in bytes from the beginning of the drive where the bootkit installer has put the 3rd booting block taken from its resource rkimage . the rkimage resource has a large piece of code that implements a dll injection (the dll is taken from the dllload resource) into the file system and makes changes in the system registry so that dll is loaded and run during system start-up. as that piece of code is executed at the early booting stage, there is no api for accessing the file system and the code parses the file systems (fat32 and ntfs) on its own. supported file systems it searches for the hardcoded special file whose content is replaced with the dll taken from a specified place on the disk. most versions of hdroot that we have found and detected use the file prx for these purposes. sometimes the dll overwrites some existing system library which is certainly not a safe way for malware to work because it could cause os failure in some cases and alert the user to the infection. among other files that can be used for overwriting we have noticed: the code then reads the content of the file that maintains the content of the hkey_local_machine\system registry hive. among other things the registry hive contains information about installed services. there are numerous system services that are started during os logon as servicedll via where the path to the functional library to be run is specified in the servicedll registry value for a particular service. the malicious booting code searches in the file system for the hardcoded path to a system library associated with a system service and replaces that value with the path to the injected dll in all the versions we encountered we found that hdroot exploited the following services: so, when the operating system starts running services, instead of loading the original service dll loads a malicious one. this malicious library does nothing apart from load and run a backdoor taken from a specified offset on the hard drive where the bootkit installer hdd rootkit had placed it. we have found two versions of hdroot with different methods of doing this. the first one just saves the backdoor as a file and executes it with the help of the winexec api function. by all appearances the malware author later decided that this approach is not the best way to run the backdoor because it is visible to av products and the fact that the application has started may be noticed when inspecting events in the system logs. the other version of the dll does not drop the file but allocates a read backdoor in memory, prepares it for proper execution (loads libraries according to the import table and fixes relocations) and runs it there on its own. this approach is much more clandestine as it substantially reduces the chances of discovering the backdoor even if the dll or poisoned mbr are detected. returning to our experiment, when the command has been run, we restart the operating system. after the os has loaded we can see the result of running of our program , which behaves as though it were a backdoor: the whole process of the hdroot infection is as follows: hdroot operation scheme interestingly, the malware does not have functionality to start the original service that was substituted during the boot process. because the affected services are part of the os, neglecting to do this could cause windows to malfunction and reveal the infection. this is even stranger considering the malware does try to cover its tracks. namely tries , because it fails to do so. the dropped dll has a function to restore the original value of servicedll in the registry, storing the path to the dll associated with the service. but due to flawed code in the 3rd booting block (from rkimage ), which slightly patches the content of dllload before injecting, dll starts holding the wrong data at hardcoded offsets and it prevents the dll from finding the proper registry path to servicedll to restore the original value. that s why, for example, can still be viewed instead of after logging on to windows: path remains to injected malicious dll in registry wrong registry path and value name mistakenly overwritten registry subkey with original value of servicedll as a result, we have to conclude that the malware was not created very carefully, which is not what you expect from such a serious apt actor as winnti. however, we have noticed the malware author s efforts to make this bootkit work properly at the booting stage to avoid completely blocking the os from loading. but the mistakes mentioned above leave some quite conspicuous signs of infection on the compromised computer. for example, original services such as windows update or task scheduler do not work, but it appears nobody noticed them. during the investigation we found several backdoors that the hdroot bootkit used for infecting operating systems. these malicious programs will be described in the next part of our article. apt bootkit cyber espionage digital certificates hdroot malware rootkits targeted attacks winnti
