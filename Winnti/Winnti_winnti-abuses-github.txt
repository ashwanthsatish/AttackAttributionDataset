developers constantly need to modify and rework their source codes when releasing new versions of applications or coding projects they create and maintain. this is what makes github an online repository hosting service that provides version control management popular. in many ways, it s like a social networking site for programmers and developers, one that provides a valuable platform for code management, sharing, collaboration, and integration. github is no stranger to misuse, however. open-source ransomware projects eda2 and hidden tear supposedly created for educational purposes were hosted on github, and have since spawned various offshoots that have been found targeting enterprises. tools that exploited vulnerabilities in internet of things (iot) devices were also made available on github. even the limitless keylogger, which was used in targeted attacks, was linked to a github project. recently, the winnti group, a threat actor with a past of traditional cybercrime -particularly with financial fraud, has been seen abusing github by turning it into a conduit for the command and control (c&c) communications of their seemingly new backdoor (detected by trend micro as bkdr64_winnti.onm). our research also showed that the group still uses some of the infamous plugx malware variants a staple in winnti s arsenal to handle targeted attack operations via the github account we identified. malware analysis the malware we analyzed is separated in two files: a loader, and the payload. the loader, named , is a modified version of its legitimate, similarly named counterpart a microsoft file which helps manipulate the performance registry. an extra component has been added to its sections. it copies itself on %windir%\system32\wbem\ and replaces the original dll. it leverages the wmi performance adapter service (wmiapsrv), a legitimate file in windows that collects information related to system performance, to import the loader via . the system also imports all related dll files and includes the payload . the infection chain includes an additional (albeit empty) function imported from , gzwrite64, which works as a fake application program interface (api) that serves as the payload s entry point. although gzwrite64 is imported by , the payload s main function is actually located in the dllmain of . the payload is a file named that contains decryption, run, and code injection functions. when it is loaded by the system, dllmain decrypts the payload via cryptunprotectdata. since the function highly depends on the actual machine id , decryption on another machine that isn t the original infected host is not viable, making malware analysis more difficult. after decryption, partial code is run on the machine, which is then injected to (a key windows component); payload is then loaded into memory. how is github abused? upon successful infection, the malware starts communicating with an html page from a repository stored in a github project. any malware threat analyst will immediately recognize linein the image above as a potential plugx-encrypted line. the beginning and end markers, dzks and dzjs, are typical in plugx. a closer look, however, shows that the decryption algorithm is different from plugx. in this case, decrypting them reveals references to its actual command and control (c&c) server: an ip address and a port number the malware will connect to. winnti currently uses different encryption algorithms to store those c&c references in the files they stored on github. among them is an algorithm utilized by plugx. in fact, we found references to plugx in the c&c strings we analyzed, indicating that the group may also be using the same backdoor in this particular campaign. although we were unable to find a plugx sample through that particular github, we surmise some plugx variants in the wild use this github repository to get their c&c information. nearly all the other algorithms used in this github campaign are derived from the original plugx algorithm: one algorithm is also built in mark strings + shift string + base64 encoding. following winnti s trails the github account used by the threat actor was created in may 2016. it created one legitimate project/repository (mobile-phone-project) in june 2016, derived from another generic github page. the repository for winnti s c&c communications was created on august 2016. we surmise that the github account was not compromised, and instead created by winnti. by march 2017, the repository already containeddifferent html pages created at various times. timeline of the campaign we mapped winnti s activities for this campaign by analyzing the dates exposed in github. for each file, github stores first-and-last commit timestamps; these enabled us to create a timeline of the first use of the group s many c&c servers. we monitored the period during which ip addresses were found connecting to winnti s c&c servers and found that they started their operations in the afternoon up to late evening. the timetable resembles traditional working hours for cybercriminals, compared to those with less structure who prefer starting their days late, but also working until very late hours. in fact, we only observed one instance of activity during the weekend, where a new html file was created. the earliest activity we tracked on the github account was from august 17, 2016, with the most recent in march 12, 2017. here is a timeline of when the c&c server s ip addresses were first used, based on our monitoring: we have privately disclosed our findings to github prior to this publication and are proactively working with them about this threat. conclusion abusing popular platforms like github enables threat actors like winnti to maintain network persistence between compromised computers and their servers, while staying under the radar. although winnti may still be employing traditional malware, its use of a relatively unique tactic to stay ahead of the threat landscape s curve reflects the increased sophistication that threat actors are projected to employ.
