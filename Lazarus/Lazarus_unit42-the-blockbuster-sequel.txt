unit 42 has identified malware with recent compilation and distribution timestamps that has code, infrastructure, and themes overlapping with threats described previously in the operation blockbuster report, written by researchers at novetta. this report details the activities from a group they named lazarus, their tools, and the techniques they use to infiltrate computer networks. the lazarus group is tied to the 2014 attack on sony pictures entertainment and the 2013 darkseoul attacks. this recently identified activity is targeting korean speaking individuals, while the threat actors behind the attack likely speak both korean and english. this blog will detail the recently discovered samples, their functionality, and their ties to the threat group behind operation blockbuster. initial discovery and delivery
this investigation began when we identified two malicious word document files in autofocus threat intelligence tool. while we cannot be certain how the documents were sent to the targets, phishing emails are highly likely. one of the malicious files was submitted to virustotal on 6 march 2017 with the file name .doc . once opened, both files display the same korean language decoy document which appears to be the benign file located online at . this file (figure 1) appears to be a request form used by the organization. decoy documents are used by attackers who want to trick victims into thinking a received file is legitimate. at the moment, the malware infects the computer, it opens a non-malicious file that contains content the target expected to receive (figure 2.) this serves to fool the victim into thinking nothing suspicious has occurred. when these malicious files are opened by a victim, malicious visual basic for applications (vba) macros within them write an executable to disk and run it. if macros are disabled in microsoft word, the user must click the enable content button for malicious vba script to execute. both documents make use of logic and variable names within their macros, which are very similar to each other. specifically, they both contain strings of hex that when reassembled and xor-decoded reveal a pe file. the pe file is written to disk with a filename that is encoded in the macro using character substitution. figure 3 shows part of the logic within the macros which is identical in both files. the embedded payload
the executable which is dropped by both malicious documents is packed with upx. once unpacked, the payload ( ) can be statically examined. the compile timestamp of the sample is march 2nd, 2017, just a few days before one of the documents carrying the implant was submitted to virustotal. the payload ensures a copy of itself is located on disk within the %temp% directory and creates the following registry entry to maintain persistence if the system is shutdown it then executes itself with the following command line: the implant beacons to its command and control (c2) servers directly via the servers ipv4 addresses, which are hard coded in the binary, no domain name is used to locate the servers. the communications between the implant and the server highly resemble the fake tls protocol associated with malware tools used by the lazarus group and described in the operation blockbuster report. however, the possible values of the server name indication (sni) record within the client hello of the tls handshake used by the implant differ from those described in the report. the names embedded in the new sample and chosen for communications include: the c2 servers contacted by the implant mimic the expected tls server responses from the requested sni field domain name, including certificate fields such as the issuer and subject. however, the certificates validity, serial number, and fingerprint are different. figure 4 shows a fake tls session which includes the sni record destined for an ipv4 address which does not belong to . figure 4 the use of as an sni record of a tls handshake to an ipv4 address which does not host that domain name expanding the analysis
because the attackers reused similar logic and variable names in their macros, we were able to locate additional malicious document samples. due to the heavy reuse of code in the macros we also speculate the documents are created using an automated process or script. our analysis of the additional malicious documents showed some common traits across the documents used by the attackers: many, but not all, of the documents have the same author
malicious documents support the ability to drop a payload as well as an optional decoy document
xor keys used to encode embedded files within the macros seem to be configurable
all of the dropped payloads were compressed with a packer (the packer used varied)
multiple testing documents which dropped and executed the korean version of the microsoft executable, but contained no malicious code, were also identified. this mirrors a common practice in demonstrating exploits of vulnerabilities. interestingly enough, all of the test documents identified were submitted to virustotal with english file names from submitters located in the united states (although not during us working hours ). despite the documents having korean code pages, when executed they open decoy documents with the english text: testteststeawetwetwqetqwetqwetqw . these facts lead us to believe at least some of the developers or testers of the document weaponizing tool may be english speakers. while some of the documents identified carry benign payloads, most of the payloads were found to be malicious. a cluster of three malicious documents were identified that drop payloads which are related via c2 domains. the payloads can be seen highlighted in figure 5. the two malicious payloads circled in figure 5 write a batch script to disk that is used for deleting the sample and itself, which is a common practice. the batch script dropped by the two payloads share a file name, file path, and hash value with a script sample ( ). this sample is described in a 2016 research report by blue coat discussing connections between the darkseoul group and the sony breach of 2014. the script s (figure 6) hash value will vary depending on the name of the file it is to delete. it also includes an uncommon label inside it of l21024 . the file the script deletes is the payload which writes the script to disk. in the case of figure 6, the payload was named . ties to previous attacks
in addition to the commonalities already identified in the communication protocols and the shared cleanup batch script use by implants, the payloads also share code similarities with samples detailed in operation blockbuster. this is demonstrated by analyzing the following three samples, which behave in similar ways: we used these three samples to reach the conclusion that the samples investigated are tied to the lazarus group. first, these three samples all use a unique method of executing a shell command on the system. an assembly function is passed four strings. some of the strings contain placeholders. the function interpolates the strings and creates a system command to be executed. the following four parameters are passed to the function: these are used not only in the implant we investigated, but also in the two samples above. additionally, many samples discussed in the operation blockbuster report also made use of this technique. figure 7 shows the assembly from the unpacked implant ( ) delivered by our malicious document and shows the string interpolation function being used. figure 8 the string interpolation function assembly without library names from the second similarity ties this sample to a known lazarus group sample ( .) upon execution, both samples set aside memory to be used as function pointers. these pointers are assigned values by a dedicated function in the binary. other functions in the binary call the function pointers instead of the system libraries directly. the motivation for the use of this indirection is unclear, however, it provides an identifying detection mechanism. these two samples resolve system library functions in a similar yet slightly different manner. the sample known to belong to the lazarus group uses this indirect library calling in addition to a function that further obfuscates the function s names using a lookup table within a character substitution function. this character substitution aspect was removed in the newer samples. the purpose for removing this functionality between the original operation blockbuster report samples and these newer ones is unclear. figure 9 displays how this character substitution function was called within the lazarus group sample. figure 9 the character substitution function from being called final thought
overlaps in network protocols, library name obfuscation, process creation string interpolation, and dropped batch file contents demonstrate a clear connection between the recent activity unit 42 has identified and previously reported threat campaigns. demonstrated by the malicious document contents, the targets of this new activity are likely korean speakers, while the attackers are likely english and korean speakers. it is unlikely these threat actors will stop attacking their targets. given the slight changes that have occurred within samples between reports, it is likely this group will continue to develop their tools and skillsets. customers using wildfire are protected from these threats and customers using autofocus can find samples from this campaign tagged as blockbuster sequel.