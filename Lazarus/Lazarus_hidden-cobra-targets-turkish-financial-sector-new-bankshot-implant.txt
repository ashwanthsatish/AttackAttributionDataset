this post was prepared with contributions from asheer malhotra, charles crawford, and jessica saavedra-morales. on february 28, the mcafee advanced threat research team discovered that the cybercrime group hidden cobra continues to target cryptocurrency and financial organizations. in this analysis, we observed the return of hidden cobra s bankshot malware implant surfacing in the turkish financial system. based on the code similarity, the victim s business sector, and the presence of control server strings, this attack resembles previous attacks by hidden cobra conducted against the global financial network swift. in this new, aggressive campaign we see a return of the bankshot implant, which last appeared in 2017. bankshot is designed to persist on a victim s network for further exploitation; thus the advanced threat research team believes this operation is intended to gain access to specific financial organizations. based on our analysis, financial organizations in turkey were targeted via spear phishing emails containing a malicious microsoft word document. the document contains an embedded adobe flash exploit, which was recently announced by the korean internet security agency. the exploit, which takes advantage of cve-2018-4878, allows an attacker to execute arbitrary code such as an implant. the further investigation into this campaign and analysis of mcafee product telemetry shows that the infection occurred on march 2 and 3. the implant s first target was a major government-controlled financial organization. it next appeared in another turkish government organization involved in finance and trade. a further three large financial institutions in turkey were victims of this attack. the implant has so far not surfaced in any other sector or country. this campaign suggests the attackers may plan a future heist against these targets by using bankshot to gather information. bankshot implants are distributed from a domain with a name similar to that of the cryptocurrency-lending platform falcon coin, but the similarly named domain is not associated with the legitimate entity. the malicious domain was created december 27, 2017, and was updated on february 19, only a few days before the implants began to appear. these implants are variations of earlier forms of bankshot, a remote access tool that gives an attacker full capability on a victim s system. this implant also contains functionality to wipe files and content from the targeted system to erase evidence or perform other destructive actions. bankshot was first reported by the department of homeland security on december 13, 2017, and has only recently resurfaced in newly compiled variants. the sample we analyzed is 99% similar to the documented bankshot variants from 2017. bankshot implants hosted on .
the bankshot implant is attached to a malicious word document with the filename . the document appears to be an agreement template for bitcoin distribution between an unknown individual in paris and a to-be-determined cryptocurrency exchange. the author of this document is test-pc. it was created february 26 and was submitted from the netherlands. the document contains an embedded flash script that exploits cve-2018-4878 and downloads and executes the dll implant from . we discovered two more documents, written in korean, that exploit the same vulnerability as . these documents appear to be part of the same campaign and may have been used on different targets. these documents also communicated with to install bankshot and also contain themes around cryptocurrency security. malicious documents in the attack. malicious document exploiting cve-2018-4878.
the implants are downloaded via a flash file embedded in the malicious document. they are executed when the victim views the document. the malicious site embedded in the flash file. implant directory contained in the malicious flash file.
the implants (dlls) are disguised as zip files and communicate with three control servers, two of them chinese-language online gambling sites. these urls can be found hardcoded in the implants code. hardcoded control server urls. analyzing bankshot
the sample is a windows dll that serves as a backdoor and contains a variety of capabilities. the malicious dll is not a service dll because it lacks servicemain(). to mask itself, it can run as a regular library loaded into a legitimate process. the malware begins by creating a new thread from the dllmain() function to carry out its malicious activities: new thread created in the malware s dllmain() function.
the malware performs the following activities: builds imports by dynamically loading apis
decrypts strings needed for control server communications
performs control server communications
handles commands issued by the control server
uninstalls self from the system
the malicious thread dynamically loads the apis it needs at the beginning of its execution using loadlibrary() and getprocaddress(). apis from the following libraries are loaded at runtime: a dynamic api loaded by the malware. based on packet capture analysis of previous implants from 2017, the following strings are used in control server communications:
user agents
the implant either fetches the user agent from internet explorer (using obtainuseragentasstring()) or uses a default user agent specified in the malware binary: control server communications
the malware initiates communication with the control server by sending it an http post request with additional optional http data, such as: board_id is a four-digit number that may be an identifier for a campaign id. based on analysis of previous samples, this is a unique identifier.
user_id is a hardcoded value in the malware binary that is sent to the control server. the username appears to be attacker specified and has occurred in 2017 bankshot samples. this links the previous samples with this unique username.
filename is based on static analysis. this looks like a specific beacon to indicate that the malware is ready to receive commands.
the optional http data with looks like a beacon to inform the control server that the malware is ready to accept new commands: commands received from the control server are encoded dwords
after decoding, these dwords should be in the range 123459h to 123490h malware checking to make sure a received command is in the correct range. the command index calculator and jump to the appropriate command. the command index table and command handler address table.
implant capabilities
based on the responses received from the control server, the malware can carry out the following malicious tasks: recursively generate a list of files in a directory and send to the control server
terminate a specific process. the process is identified by the control server sending the pid to the malware. the capability to terminate a process.
gather network addresses and operating system version
execute arbitrary commands using /c the capability to execute system commands. spawning arbitrary processes.
create processes
write responses from the control server to a file
send information for all drives
write data sent by the control server to a temporary file matching the file path pattern %temp%\dws00*
change the time of a file as specified by the control server the malware changing the file time.
create a process by impersonating a logged-on user getting a user token using wtsqueryusertoken. a process created as logged-in user.
gather the process time for all processes getting time information for all processes running on the system.
gather domain and account names based on all running processes gathering account information from running processes.
read a specified file s contents and send the data to the control server
write data sent by the control server to an existing file
mark a file to be deleted on reboot marking a file for deletion on reboot.
overwrite a file with all zeros and mark it for deletion on reboot wiping files with zeros and marking it for deletion on reboot.
delete files using the deletefile() api
load an arbitrary library into its process space. this may be used to load additional downloaded components of the attack. loading an arbitrary library into its own process space.
after every action is performed the malware sends a response to the control server indicating whether the action was successful. connections
the us government reports that bankshot is used by hidden cobra to target multiple industries including financial organizations. this implant has been connected to a major korean bank attack and is also known as trojan manuscript. that variant contained the capability to search for hosts related to the swift network and the same control server strings as the variant we found targeting the turkish financial sector. the implant does not conduct financial transactions; rather it is a channel into the victim s environment, in which further stages of implants can be deployed for financial reconnaissance. the bankshot implant was also observed in 2017 in documents appearing to come from latin american banks. malicious document delivering the bankshot implant in 2017.
these connections, combined with the implant s nearly identical appearance to known variants, are a strong indication that we have uncovered a hidden cobra attack. further, previous implants from 2017 contained bogus documents with financially themed content. a code comparison of hash with hash (from november 28, 2017).
conclusion
we have found what may be an early data-gathering stage for future possible heists from financial organizations in turkey (and possibly other countries). in this campaign, we see the adoption of a recent zero-day adobe flash vulnerability to get the implant onto the victim s systems. the campaign has a high chance of success against victims who have an unpatched version of flash. documents with the flash exploit managed to evade static defenses and remain undetected as an exploit on virustotal. this is the first time that bankshot has been tied directly to financial-related hacking and the first time it has been used since november 2017. mcafee detects these threats as:
