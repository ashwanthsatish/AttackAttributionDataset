novetta is an advanced analytics company that extracts value from the increasing volume,
variety and velocity of data. by mastering scale and speed, our advanced analytics software and
solutions deliver the actionable insights needed to help our customers detect threat and fraud,
this report details some of the technical fndings of the lazarus group s malware,
observed by novetta during operation blockbuster. we recommend reading the initial
report prior to the reverse engineering reports for more details on the operation and the
lazarus group. this reverse engineering report looks at several tools found within the
lazarus group s collection.
not all of the families within the lazarus group s collection are inherently malicious. there are samples that perform
somewhat legitimate functions. these samples are tools, usually one-o tools, that the lazarus group may use for
a specifc purpose and do not gain a wide distribution in the wild. understanding the function of these tools adds
additional insight into the group s methodologies.
the naming scheme used by novetta for the malware identifed during operation blockbuster consists of at least two
identifers which each identifer coming from the international civil aviation organization (icao) s phonetic alphabet,
commonly referred to as the nato phonetic alphabet. the frst identifer specifes the general classifcation of the
malware family while the second identifer specifes the specifc family within the larger general classifcation. for
example, tangoalfa specifes a tool family identifed as alfa.
first level identifier general classification
delta ddos
hotel http server
india installer
lima loader
kilo keylogger
papa proxy
romeo rat
sierra spreader
tango tool (non-classed)
uniform uninstaller
whiskey destructive malware ( wiper )
table 1 1: first level identifiers for the lazarus group family names and their classification meanings
there is no temporal component to the second level identifers given to malware families. while generally the second
identifers are largely sequential (alfa, bravo, charlie, and so on), the identifer does not indicate that one family came
before another chronologically. instead, the second level identifers were assigned by the order novetta discovered each
particular family. 42. [keylogger] kiloalfa
a rudimentary but somewhat clever design, kiloalfa provides keylogging capability for the lazarus group s collection
of malicious tools. the design of kiloalfa is broken down into two basic components: the persistence functionality and
the keylogging functionality. the persistence functionality of kiloalfa allows the malware to self-install on a victim s
machine when activated (described below). the keylogging functionality, as the name would imply, provides keystroke
capturing capabilities by continually monitoring the foreground window and recording the current keyboard s state to a
log fle for later retrieval. kiloalfa establishes a keystroke log fle for each user that accesses the infected machine. kiloalfa
has no capabilities to transmit the log fles to an external server thereby requiring an additional companion malware
family be utilized by attackers for the retrieval of the key log fles.
kiloalfa is a self-installing binary. when activated without any command line arguments or with the command line
argument reg, kiloalfa activates its persistence functionality. in order to maintain persistence on a victim s machine,
kiloalfa copies itself to either %allusersprofile% (if the victim is running windows vista
or newer) or %allusersprofile%\application data (if the victim is running windows
xp or older). a registry key for hklm\software\microsoft\currentversion\run\mozilla update is added
and set to the path of the newly copied kiloalfa binary with the run command line argument added. if the registry key
insertion is unsuccessful, kiloalfa attempts to insert the same key and value within the current user hive (hkcu).
if kiloalfa is activated without any arguments, the persistence functionality attempts to run kiloalfa under all users logged
into the victim s machine through terminal services. by calling wtsenumeratesessionsa to get a list of all currently
active windows terminal services sessions, kiloalfa uses the list of active terminal sessions to determine if is running under the session (to eliminate non-interactive user sessions); kiloalfa then obtains the token of the user of the
session and calls createprocessasusera to activate the newly installed kiloalfa binary ( ) with the run
command line argument. kiloalfa then activates with the run argument for the console session.
after installing kiloalfa as and activating the new binary for all active users, kiloalfa generates and
executes a suicide script to remove the initial instance of itself. the suicide script is saved to %temp% and
takes the form presented in figure 2-1. the script is constructed one line at a time using string concatenation and saved
via writefile before createprocess is called to execute the script. it is worth noting that kiloalfa and indiafoxtrot
share the same suicide generation script code in both functionality and the script itself. additionally, kiloalfa and
indiafoxtrot also use as the suicide script s flename.
figure 2 1: kiloalfa s suicide script
when kiloalfa is activated with the run command line argument, kiloalfa activates its keylogger functionality.
this functionality begins by loading the confguration fle %allusersprofile%\application data\intel\ (on windows xp and later) or %allusersprofile%\intel\adobeupdaterprefs.
dat (on windows vista or newer). the confguration fle contains a list of usernames and their respective keylogger 5flenames and paths. the structure of the confguration fle (table 2-1) consists of a magic value followed by one or more
per-user confguration records (table 2-2). the confguration is encrypted with rc4 using the hardcoded password
c!@i#%vjsieotqwpvz034vua. the magic value allows kiloalfa to determine if the confguration fle has been
successful decrypted prior to attempting to read the per-user confguration records.
offset size description
0 4 bytes magic value (0xaabbccdd)
4 360 bytes first per-user configuration
4+360n 360 bytes nth per-user configuration
table 2 1: structure of kiloalfa s configuration file
offset size description
0 100 bytes username for whom the record pertains
100 260 bytes full path and filename of the user s keystroke log file
table 2 2: per user configuration record s structure
kiloalfa parses all of the per-user confguration records looking for one that belongs to the username under which the
kiloalfa executable is running. if the confguration fle is corrupt or missing, or no entry is found for the current user,
kiloalfa generates a new record for the user and specifes the keystroke log fle s path and name as
%localappdata% . the current state of the confguration fle is written back to disk.
the keylogging functionality of kiloalfa works by establishing an invisible window on the victim s computer and then
spawning a thread that monitors both the current foreground window s title and the current state of the keyboard every 10ms.
the invisible window that kiloalfa registers with the windows gui specifes its class name as windows ime update and
provides a very simple window procedure function. the windows procedure function (a.k.a. winproc) only responds to three
types of messages from the gui: wm_create, wm_destroy, and wm_endsessions. the wm_create handler activates the
keylogger thread after a 10 second delay, the wm_destroy handler simply causes the kiloalfa binary to terminate, and the
wm_endsessions handler causes kiloalfa to ush any bu ered keystroke data to the keystroke log fle.
once activated, the keylogger thread generates an ascii string with the current time and date to form a header
and sends the header to disk after encrypting the data using the dnscalc-style encoding. after writing the
header to disk, the thread enters an infnite loop. at the top of the loop, the keylogger thread waits 10ms before
calling getforegroundwindow to get a handle to the current foreground window. if getforegroundwindow
does not return a valid handle, the keylogger thread continues a sequence of 10ms delays followed by a call to
getforegroundwindow until a valid handle is obtained.
the handle of the current foreground window is compared to the handle of the foreground window from the last iteration
through the keylogger thread s loop. if the foreground window has changed since the last iteration, the class name of
the foreground window is obtained and compared against window ime update; this determines if a window besides
kiloalfa s window is currently in the foreground. if kiloalfa s window is in the foreground, the keylogger thread returns
to the top of the loop and enters another 10ms sleep. otherwise, the title of the foreground window is obtained, and a new
ascii string is generated containing a separator made up of 72 hyphens followed by a line with the current time stamp
and the title of the foreground window. the string is then sent to the keylogger thread s keystroke log data queue.
the keylogger thread does not write entries immediately to disk. instead, data is sent to a bu er in kiloalfa s memory
until the bu er contains at least 2048 bytes. once the bu er has reached the 2kb threshold, the bu er is encrypted using
the dnscalc-style encoding and then written to disk. after the bu er is written to disk, the keylogger thread will clear
the bu er by zeroing its memory. 6the keylogger thread calls getasynckeystate 74 di erent times (for 74 di erent virtual keys) to determine the state
of each key. for any key that indicates it has been pressed, the keylogger thread will record the key to the bu er. once the
keylogger thread has checked all 74 di erent keys and their current state, the thread returns to the top of the loop and
begins another iteration with a 10ms delay.
figure 2-2 illustrates a keystroke log fle (after decryption). the data in the log fle was observed in a memory-dumped
kiloalfa binary.
y
figure 2 2: snippet of a kiloalfa keystroke log (after decryption) 7for some samples of kiloalfa, the developer(s) used the version information resource entry of windows xp s for
kiloalfa s version information. yet for one sample, the developer(s) took the strings, dialog, menu, and version information
from and imported them into the resource section of kiloalfa. the sample that uses s
resources is particularly unique, as it deviates from the normal kiloalfa binary by the following key points: the sample does not use the confguration fle ( ) nor does it support per-user keystroke
log fles the sample does not activate itself under the accounts of users logged in through the terminal services the suicide script is named pre{random value}.bat and changed to
figure 2 3: alternative kiloalfa suicide script
beyond the three listed changes and the inclusion of a large number s resources, the basic functionality
and design of the errant sample is identical to the standard kiloalfa form. 83. [proxy] papaalfa
evidence suggest that the lazarus group uses compromised infrastructure as the public-facing touchpoint for the
majority of their malware samples. papaalfa is believed to be one of the proxy malware components that the lazarus
group uses to hide the true command and control server(s) for operations. papaalfa is not a simple proxy or relay. rather,
papaalfa could be considered a smart proxy due in part to the fact that the attacker can easily switch the backend
destination address and port without having to reestablish control over the infected machine hosting the papaalfa
malware. papaalfa contains an administrative control channel (or admin channel ) separate from its proxy channel.
papaalfa is malware-trafc specifc: papaalfa does not proxy general trafc, but rather trafc that is specifc to the
romeo-coreone based families; these rat families are discussed in novetta s other report on the lazarus group s rat
and staging capabilities.1
in terms of form factor, papaalfa comes in two avors: service dll and standalone executable. the primary di erence
between the two is that the executable variants require the admin channel s listening port number to be specifed on the
command line, otherwise it defaults to 443; meanwhile, the service dll variants receive their admin channel listening
port from a confguration fle ( ). the indiabravo-papaalfa installer is responsible for installing the
service dll variant.
regardless of the form factor, the core of papaalfa is the same. once the core component of papaalfa activates (which occurs
after the service dll initializes or after the standalone executable reaches the main function), the following tasks occur:
1. dynamically load api functions
2. determine the admin channel s listening port number
3. establish the admin channel s listening port and open a hole in the windows firewall to facilitate incoming
connections
4. for each new incoming admin channel connection, generate a new thread to handle the communication.
5. at the start of each new thread, perform a handshake between papaalfa and the client
6. determine if the client is requesting access to the admin channel or initiating the relay mode
papaalfa uses the space-dot obfuscation method, found in multiple other lazarus group malware families, within the
dynamic api loading portion of its code. four di erent sets of api functions are loaded from , (or , depending on the windows os version), , and , but only a fraction of the
loaded api functions are actually used by papaalfa.
the selection of the port to use for papaalfa s admin channel is made either on the command line (for standalone
executable versions of papaalfa) or from a confguration fle ( ) that papaalfa loads. establishing the
admin port begins by frst opening a hole within the windows firewall using the netsh frewall command. papaalfa
uses the following code to construct that command:
1 http:// 9sprintf(szcommandline, "%sd.e%sc n%ssh%srewa%s ad%s po%sop%sing t%s %d \"%s\"",
"cm", "xe /", "et", " f", "ll", "d", "rt", "en", "cp", wport, "adp")
the method of constructing the netsh frewall command is very specifc and can be found in both romeocharlie and
tangoalfa, allowing for a direct code-level connection between the three malware families. after opening the frewall to
allow for incoming connections (a critical operation given that papaalfa operates as a server and not a client), the listening
port is established by calling winsock api functions socket, bind, and listen.
outside of the two form factors that papaalfa can have, there are two distinct variants of papaalfa that have emerged
over time. while both perform the equivalent set of operations for tasks #5 and #6, the underlying communication
subsystem and methodology changes. papaalfa-one uses a very simple, unencrypted communication subsystem and
a straight-forward command processing system, while papaalfa-two employs the fake tls communication scheme to
encrypt communication between the client and the admin channel and uses a more robust command processing system.
despite their communication subsystem di erences, the protocol of the handshake for establishing a connection between
papaalfa and a client is the same. once an external client connects to the admin channel of papaalfa, a new thread is
spun up to handle the communication between itself and the client. the initial communication with the client consists
of the client sending 12 bytes to papaalfa and papaalfa responding with 12 bytes. the 12 bytes that the client sends to
papaalfa take the following format:
offset size description
0 4 bytes (dword) channel id request (dwchannel)
4 4 bytes (dword) ignored, typically set to 0 (dwipaddress)
8 4 bytes (dword) client s internal state (dwstate)
table 3 1: papaalfa client s initial data burst format
the 12 bytes that papaalfa responds with take the following format:
offset size description
0 4 bytes (dword) channel id response code (dwchannel)
4 4 bytes (dword) client s ip address (dwipaddress)
8 4 bytes (dword) papaalfa s current state (dwstate)
table 3 2: papaalfa one s response format to the client
the channel id request (dwchannel) value specifed by the client indicates the type of channel that the client wishes to
activate. there are two supported channels: proxy activation and proxy confguration. the proxy activation channel, as
the name implies, is responsible for the activation of the proxy (or relay) between papaalfa and another endpoint, and the
proxy confguration channel allows the connecting client to confgure or reconfgure the papaalfa proxy. 10the proxy activation channel establishes a connection between papaalfa and a predetermined endpoint. establishing
a connection between papaalfa and the confgured endpoint requires another set of 12-byte data transfers between
papaalfa, as the client, and the endpoint, as the server. since the endpoint retains the same handshake protocol as the
clients connecting to papaalfa, it is theoretically possible to chain multiple papaalfa-infected hosts together to generate a
web of misdirection and obfuscation.
once papaalfa establishes a channel between itself and the endpoint, data transmitted to and from the client is proxied
to the established endpoint. as mentioned previously, the papaalfa-one variants do not introduce any obfuscation or
encryption to the network trafc as it traverses the papaalfa-one node, while papaalfa-two uses the fake tls encryption
scheme found in other lazarus group malware families such as romeoalfa, romeobravo, and romeohotel, among
others. connections between a client and papaalfa are recorded as a 24-byte structure, described in table 3-3, within a log
fle named .
offset size description
0 4 bytes (dword) ip address of client (dwipaddress)
4 4 bytes (dword) reported state of the client (dwstate)
8 16 bytes (systemtime) time of the connection
table 3 3: papaalfa s connection log entry structure
if the client accesses the administrative channel of papaalfa, the client, without authentication, can perform one of the
following functions: receive information about the papaalfa-infected host and change the proxy endpoint receive the connection log ( ) set the ag to allow papaalfa to proxy incoming connections
the act of confguring the endpoint that papaalfa will connect to is done by frst requesting, via the administrative
channel, the infected host s system information and then supplying the port number of the endpoint. papaalfa will use
the client s own ip address as the ip address of the proxy s endpoint. 114. [network tester] tangoalfa
consisting of a single known sample, tangoalfa is a tool used to determine a victim machine s external capabilities,
namely whether or not the victim machine is capable of receiving incoming connections (presumably from the internet,
but possibly from the local network). in order to make such a determination, the application performs the following tasks:
1. determine the target end point from the command line or use the default end point of :8080 if no valid
command line input is supplied
2. test if the end point will respond to a tcp socket connect request and will accept incoming data ( writable ).
3. generate a listening socket on a randomly selected port between 400 and 499 or, if unsuccessful, generate a listening
port between 8000 and 8999.
4. open a hole on the victim machine s frewall for the listening port
5. transmit the port number to the end point as a two-byte value
6. read a four-byte value from the end point to determine the success or failure of the test.
if any of the above steps fail, tangoalfa will report an error, and the test will fail. to that end, tangoalfa is very verbose
about which stage resulted in a failed test as well as which stage tangoalfa is executing at any given time.
tangoalfa can be instructed to connect to any testing server on any port by supplying the ip address and port on the
command line (separated into individual command line arguments). if the user of tangoalfa does not supply a testing
server (or end point ), then tangoalfa will default to :8080. if tangoalfa is unable to connect to the testing
server, it will display the following message:
*****[start test -> :8080]
*****[relay connect fail]
tangoalfa tries up to three times to generate a listening socket on the victim s machine. the frst attempt tries for a
listening port randomly selected in the range of 400 to 499, while the second and third attempt tries the range of 8000
to 8999. if after three attempts to generate a listening port tangoalfa is unable to establish a listening port, it reports a
failure and terminates.
after establishing a listening port, tangoalfa attempts to open the windows firewall on the victim s machine in order
to allow incoming connections. tangoalfa does this by constructing the following command and executing it via
createprocess: /c netsh frewall add portopening tcp <listening port number> "adp"
on windows xp computers, the above command will result in the line ok. being displayed, whereas on newer versions
such as windows 7, the following text will be displayed: 12important: command executed successfully.
however, "netsh frewall" is deprecated;
use "netsh advfrewall frewall" instead.
for more information on using "netsh advfrewall frewall" commands
instead of "netsh frewall", see kb article 947709
with the frewall reconfgured to allow incoming connections to the listening port, tangoalfa displays the listening
port number to the user before sending the value to the test server as a two-byte value. after sending the port number,
tangoalfa waits for the test server to respond with a four-byte value or a timeout of 60 seconds, whichever comes frst. if
the test server sends back 0 (as a 32-bit number), then tangoalfa indicates the test was a failure as seen below:
the structure of the test implies that the test server ultimately determines success or failure. simply establishing a
listening port and accepting incoming connection does not mean a test is successful; rather, the test server must decide
the victim s machine s suitability.
tangoalfa does not use the more common features found in the lazarus group s collection of malware such as the various
encryption/obfuscation methods seen with space-dot, dnscalc, or dynamic api loading. however, it is possible to directly
tie tangoalfa to the rest of the lazarus group s malware based on the method that the developer(s) use for opening a hole in
the victim s windows firewall. when constructing the command, tangoalfa uses a very specifc sprintf statement:
sprintf(szcommandline, "%sd.e%sc n%ssh%srewa%s ad%s po%sop%sing t%s %d \"%s\"", "cm", "xe
/", "et", " f", "ll", "d", "rt", "en", "cp", wport, "adp")
the same format string is found in both papaalfa (see section 3) and romeocharlie, which have more concrete ties to the
larger lazarus group collection of malware families.
given the purpose of tangoalfa the determination of the viability of a victim machine for incoming connections and
the fact that a large number of server mode families are found within the lazarus group s collection, this particular tool
could be extremely useful during an operation for fnding suitable proxy hosts. 135. [domain redirector] tangobravo
tangobravo is a simple piece of malware, consisting of only a handful of non-library functions. using a technique
commonly found in commodity malware versus apt-style malware, tangobravo s sole purpose is to prevent a victim s
machine from accessing specifc domains by modifying the victim s %sysdir%\drivers\etc\hosts fle. to that end,
the frst task that tangobravo performs is to scan the hosts fle line by line and determine if one of the following domains
is present; if so, the line is modifed to replace the existing ip address with the loopback address :
to further ensure that the above domains are inaccessible to the victim, any of the domains that were not explicitly
modifed are appended to the end of the hosts fle with the loopback address. note that not all variants of
tangobravo overwrite all of the domains; specifcally, , , download. , and are
not found in all samples.
upon completion of the hosts fle modifcation, some variants of tangobravo generate and execute a suicide script. it is
this suicide script generation and execution that ties tangobravo into the larger lazarus group s malware collection, as
the suicide script generator and suicide script content is also found in indiacharlie. the di erence, as seen below, is that
tangobravo uses createprocess instead of winexec to activate the script.
additionally, the core component of tangobravo has been found integrated in another malware family within the lazarus
group s collection: indiagolf. 146. [windows firewall disabler] tangocharlie
observed as a payload of sierrajuliett-mikeone, tangocharlie is a singularly focused tool whose one and only purpose is
to disable the windows firewall. depending on the operating system, tangocharlie will use either netsh frewall (for
windows xp or older) or netsh advfrewall (for windows vista or newer) to disable the frewall on a victim s machine.
table 6-1 identifes the full command that tangocharlie passes to winexec in order to open the windows firewall
depending on the victim s windows version.
windows version firewall command
windows xp or older /c netsh frewall set opmode mode=disable
windows vista or newer /c netsh advfrewall frewall add rule
name=corenetworkinghttps dir=in action=allow protocol=tcp
table 6 1: tangocharlie s firewall disabling commands 157. [antivirus suite killer] tangodelta
antivirus applications can be bothersome to malware developers, and tangodelta is a solution to a specifc antivirus
problem: using the open source process hacker s kernel driver,2 tangodelta attempts to terminate various mcafee
virusscan enterprise and mcafee agent-specifc processes listed in table 7-1.
target process name description2 the mcshield on-access scanner service provides the user interface for the updates the system tray icon management tool it is responsible for loading the mcafee virusscan (vshield) +icon in the windows
system tray, the vse about screen, the on-access scanner statistics, and the messages
window. provides the majority of (mcafee agent) functionality facilitates janitorial duties within the mcafee agent responsible for event creation and logging of the mcafee agent the product manager for the mcafee framework service table 7 1: target processes of tangodelta
tangodelta requires no command line arguments; upon activation it will generate and activate a service called
kprocesshacker2 to load the process hacker driver into kernel memory. with the process hacker driver installed,
tangodelta connects to the driver and uses the process hacker function terminatortp3 to terminate each of the
mcafee processes listed in table 7-1 in order. tangodelta pays special attention to the process: after
terminating the mcafee processes, tangodelta continually scans for s process in the list of active
processes on the victim s machine, sleeping for 10ms between scans. once has been successfully
terminated, tangodelta locates the path to the fle by inspecting the registry key hklm\system\
currentcontrolset\services\mcshield\imagepath and then replacing the binary with itself.
this ensures that upon reboot, tangodelta will load rather than the legitimate mcafee binary.
with the mcafee processes terminated and tangodelta replacing the legitimate fle, tangodelta
disconnects from the process hacker driver and removes it from memory before deleting the driver s service from the
windows services database. tangodelta then activates the new binary by reactivating the mcshield
service before generating and executing a suicide script to remove the original tangodelta binary.
2 wen jia liu. overview process hacker http:// /. accessed 27 november 2015.
2 mcafee. process description and load order for virusscan enterprise and mcafee agent . 29 september 2015 16the suicide script that tangodelta generates is nearly identical to that of whiskeyalfa-one. the only di erence
between the suicide scripts is the super uous strcpy(buffer, "@echo off\r\n") instruction at the beginning of
tangodelta s script generation. otherwise, the suicide scripts are identical in structure, flename (%temp% ),
and the apis that are used in their generation and execution, as seen below: 178. conclusion
while the tools profled in this report are not inherently malicious, their capabilities are nonetheless integral to the
lazarus group s cyber operations, both espionage and destructive in nature, making them inherently dangerous to
potential victims. these tools often lay the groundwork for further malicious activity, such as the targeting of antivirus
capabilities and the disabling of frewalls, both of which are very fundamental defensive measures. furthermore, like
many other identifed lazarus group families, these tools showcase the group s creative solutions, such as the papaalfa
proxy, which makes it difcult to immediately identify potentially malicious activity on a compromised network. 18mclean, virginia headquarters
