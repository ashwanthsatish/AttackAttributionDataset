technical walkthrough: office test persistence method used in recent sofacy attacks
robert falcone	by robert falcone
july 20, 2016 at 5:00 am
category: threat prevention, uncategorized, unit 42 tags: autofocus, microsoft office, office test, persistence method, sofacy, trojan as mentioned in our previous blog, we observed the sofacy group using a new persistence mechanism that we call office test to load their trojan each time the user opened microsoft office applications. following the report, we received several questions regarding this persistence method, specifically how it works and which versions of microsoft office were affected. this blog will serve as a technical analysis of this persistence method that security professionals and network defenders can use for awareness, as we believe it is likely additional threat groups will begin using this technique. we have added a malicious behavior tag named officedllsideloading to autofocus for palo alto networks customers to track the usage of this persistence method. office test backstory
during our analysis of the delivery document used by the sofacy group in recent targeted attacks, we saw the document create the following registry key: hkey_current_user\software\microsoft\office test\special\perf based on our analysis, adding a path to a dll to this registry key would load the dll each time a microsoft office application was opened. we had not seen this registry key used for persistence before, so we looked into how this registry key results in the execution of a malicious payload. we checked a clean system with microsoft office installed, and confirmed that it did not have the key in the registry, as seen in figure 1. sofacy_tech walkthrough 1 figure 1 windows registry does not have the office test key by default with microsoft office installation we checked our wildfire data and found only a handful of samples using this registry key for persistence, all of which were used to load the carberp variant of sofacy. at the time, we thought the sofacy group had discovered a new persistence technique, but to our surprise, hexacorn had revealed this registry key in an april 2014 blog post. this suggests that the sofacy group may not have discovered this persistence technique themselves, and as threat actors often do, absorbed an existing technique into their playbook. dll loading process
to determine how this registry key executed the malicious dll, we analyzed activities that occur when the user opens the microsoft word application. we chose to analyze word because we knew from our research on the sofacy attacks that word loaded the trojan s malicious dll; however, other microsoft office applications were also discovered to be susceptible to this persistence method, which we will elaborate on in the next section. figure 2 below shows the api function calls during the startup process that are related to the registry key. the api calls show word ( ) loading , which is a legitimate library loaded by word at runtime. the library opens the registry key in question, queries its default value (null in figure 2) and then loads the malicious dll ( ) stored within this key using loadlibraryw. sofacy_tech walkthrough 2 figure 2 api functions called by word that loads malicious dll the last activity seen by in figure 2 involves an attempt to open a handle to the same registry key within the hkey_local_machine hive, as follows: hkey_local_machine\software\microsoft\office test\special\perf the attempt to open this key fails because the key does not exist with a default installation of microsoft office. in addition, using this registry key for persistence purposes is not ideal because the actor would need elevated privileges to modify registry keys in the hklm hive. instead, the threat actors created the office test registry key in the hkcu hive, which only requires the current account privileges to modify the key with a path to a malicious dll. in the sofacy attacks, the actors added its loader trojan named (figure 2) to the office test registry key. the loader trojan locates and loads a second dll from into word, as seen in figure 3 and exits. the contains the functional code of the carberp variant of the sofacy trojan, which remains running in word until the user closes the application. sofacy_tech walkthrough 3 figure 3 the payload running within microsoft word purpose of the office test key
based on the activities in the startup process, we saw the legitimate library loading the malicious dll from the registry key. we wanted to know why would load a dll from a key that was not added to the registry during the installation of microsoft office. static analysis of revealed that the dll loads the library from the registry key, then attempts to resolve and call an api function named _getperfhosthookversion@0 from the loaded library, as seen in figure 4. sofacy_tech walkthrough 4 figure 4 code within that loads a dll from the registry and attempts to resolve and call _getperfhosthookversion@0 when uses the loadlibraryw function to load the dll from the registry key, it runs the dllentrypoint exported function in the dll. in the case of sofacy s , the dllentrypoint function locates the second dll called , loads and runs its functional code. the file does not contain an exported function named _getperfhosthookversion@0 , but this does not matter as the code in figure 4 would fail to resolve the api function but would continue executing without calling the api. in addition to _getperfhosthookversion@0 , the library also attempts to resolve several additional exported functions from the dll loaded from the registry, specifically with names that contain the following: _initperf
_perfcodemarker
_uninitperf it appears that word (and other microsoft office applications) use this registry key to load dlls in order to conduct performance evaluations and other debugging tasks during development or testing phases of the applications. this would explain the reason why the software\microsoft\office test\special\perf registry keys are not created during the installation of microsoft office. we also discovered that the library will attempt to load a dll from the following registry key in the hkey_local_machine hive, whose key name runtimeperfmeasurement further suggests that uses these registry keys for performance testing and debugging purposes: hkey_local_machine\software\microsoft\office test\special\perf\runtimeperfmeasurement susceptible applications and versions
to see which versions of word were susceptible to this persistence mechanism, we checked in the following word versions: 2003, 2007, 2010, 2013, 2015 and 2016. we were able to confirm from office 2007, 2010, 2013, 2015 and 2016 would load a dll from the office test registry key discussed in this blog. office 2003 would not load a dll from this registry key and it did not have a file. we also tested other microsoft office applications to see which would load a dll from the office test registry key, which includes word, powerpoint, excel, outlook, onenote and publisher. it is interesting to note, that some applications in the office suite do not need to call another dll to load the malicious payload via the registry persistence mechanism (such as word using ) and instead will load the malicious payload directly from the application. figure 5 shows a graphical representation of applications loading the payload directly from the executable versus using a separate dll file. sofacy_tech walkthrough 5 figure 5 office test workflow simple protection
during our research, we found that the office test persistence technique could be easily defeated by manually creating the registry key hkcu\software\microsoft\office test and removing the current user s account write permissions for this key. microsoft office does not require this registry key to operate and does not even create the registry key during installation; therefore, adding this key as read-only will have no effect on the usability of microsoft office applications. the steps taken to defeat the office test persistence mechanism will be outlined below and could also be easily scripted or pushed to systems via group policy. disclaimer: modifying the registry can cause serious problems that may require you to reinstall your operating system. we cannot guarantee that problems resulting from the incorrect use of the registry can be solved. use the information provided at your own risk. first, we created the hkcu\software\microsoft\office test via the reg command. open a command prompt ( ) and input the following: reg add hkcu\software\microsoft\office test sofacy_tech walkthrough 6 figure 6 the reg command used to create the office test registry key we then navigated to the newly created registry key using the regedit application. by right clicking on the key, we can access the permissions associated with the key, as seen in figure 7. sofacy_tech walkthrough 7 figure 7 right clicking key allows access to permissions the current user has full control permissions for this registry key, as seen in figure 8. this permission allows an actor to write the path to the trojan to the special\perf sub-key. the read control in figure 8 allows microsoft office to read the contents of this key and its sub-keys, which is how the actor leverages this technique to load a malicious dll into office applications. to defeat this persistence mechanism, we can remove the current user s write permissions to this key by clicking the advanced button. sofacy_tech walkthrough 8 figure 8 current user s default permissions to the office test registry key the current user was granted full control permissions to this registry key because it inherited permissions from its parent object, which ultimately inherited its permissions from the hkey_current_user hive. to remove the user s write permissions to this registry key, we first must remove the inherited permissions by unchecking the box seen in figure 9. sofacy_tech walkthrough 9 figure 9 remove inherited permissions by unchecking this box by unchecking the box in figure 9, the dialog box in figure 10 pops up, which provides options for remove to remove all permissions from this key or add to set specific permissions for the user. sofacy_tech walkthrough 10 figure 10 dialog box displayed after removing the registry key s inherited permissions here we will click add , select the current user, then press the edit button to set specific permissions for this user. in the next dialog, click the clear all button first to remove all existing permissions then select only read control , as seen in figure 11. sofacy_tech walkthrough 11 figure 11 read-only permissions assigned to this key with the read control permission, microsoft office products are still able to read from this registry key, but malicious documents will not be able to write to this key. we tested this simple registry modification against the delivery document used by sofacy discussed in our previous blog and discovered that while the delivery document was still able to exploit our analysis system, the payload would not be able to run when the user opened microsoft office applications, thus creating a benign infection. autoruns detecting office test
unit 42 reached out to notify microsoft of the office test persistence mechanism and its use by a threat group in targeted attacks. on july 4, 2016, microsoft released a new version of autoruns, specifically v13.52 that includes checks for the office test registry keys. we downloaded autoruns v13.52 and tested both the gui ( ) and cli ( ) versions of the tool on a system compromised with the sofacy tool that used this persistence technique. figure 12 and figure 13 below show the two autoruns tools detecting the use of this registry key for persistence. sofacy_tech walkthrough 12 figure 12 gui version of autoruns detecting office test persistence mechanism sofacy_tech walkthrough 13 figure 13 autorunsc detecting the office test persistence mechanism conclusion
the office test persistence mechanism allows threat actors to execute a trojan each time a user runs any of the office applications. this persistence mechanism loads a malicious dll by leveraging a registry key that appears to be used during the development and testing of microsoft office applications. the use of this registry key for persistence is quite clever, as it requires user interaction to load and execute the malicious payload, which makes automated analysis in sandboxes challenging. low awareness of this persistence method, coupled with the sandbox evasion obtained from user interactions, makes this a potentially attractive persistence method that we believe may be used in future attacks. unit 42 suggests monitoring for systems that have this registry key already created, as it is possible a threat is already using the key for persistence purposes. microsoft has added the office test registry keys to its autoruns tool for detection purposes as well. also, we suggest disabling this persistence method by creating the office test registry key in read-only mode as outlined in this blog.
