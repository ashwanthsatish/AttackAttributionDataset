sofacy (also known as fancy bear , sednit , strontium and apt28 ) is an advanced threat group that has been active since around 2008, targeting mostly military and government entities worldwide, with a focus on nato countries. more recently, we have also seen an increase in activity targeting ukraine. back in 2011-2012, the group used a relatively tiny implant (known as sofacy or sourface) as its first stage malware. the implant shared certain similarities with the old miniduke implants. this led us to believe the two groups were connected, at least to begin with, although it appears they parted ways in 2014, with the original miniduke group switching to the cosmicduke implant. at some point during 2013, the sofacy group expanded its arsenal and added more backdoors and tools, including coreshell, splm (aka xagent, aka chopstick), jhuhugit (which is built with code from the carberp sources), azzy (aka advstoreshell, netui, eviltoss, and spans across four to five generations) and a few others. we ve seen quite a few versions of these implants and they were relatively widespread for a time. #sofacy group has been active since 2008, targeting mostly military and government entities in nato countries tweet
earlier this year, we noticed a new release of the azzy implant which, at the time, was largely undetected by anti-malware products. we observed several waves of attacks using this version, most recently in october. the new waves of attacks also included a new generation of usb stealers deployed by the sofacy actor, with the first versions dating back to february 2015, and which appear to be geared exclusively towards high profile targets. sofacy s august 2015 attack wave
in the months leading up to august, the sofacy group launched several waves of attacks relying on zero-day exploits in microsoft office, oracle sun java, adobe flash player and windows itself. for instance, its jhuhugit implant was delivered through a flash zero-day and used a windows eop exploit to break out of the sandbox. the jhuhugit implant became a relatively popular first stage for the sofacy attacks and was used again with a java zero-day (cve-2015-2590) in july 2015. while the jhuhugit (and more recently, jkeyskw ) implant used in most of the sofacy attacks, high profile victims are being targeted with another first level implant, representing the latest evolution of their azzytrojan. two recurring characteristics of the #sofacy group are speed and the use of multi-backdoor packages tweet
the first versions of the new azzy implant appeared in august of this year. during a high profile incident we investigated, our products successfully detected and blocked a standard sofacy azzy sample that was used to target a range of defense contractors. the sample used in this attack (md5 , compiled july 29th, 2015) was a pretty standard sofacy x64 azzy implant, which has the internal name . interestingly, the fact that the attack was blocked didn t appear to stop the sofacy team. just an hour and a half later they had compiled and delivered another azzy x64 backdoor (md5: , compiled august 4th, 2015). this was no longer detectable with static signatures by our product. however, it was detected dynamically by the host intrusion prevention subsystem when it appeared in the system and was executed. sofacy apt hits high profile targets with updated toolset this recurring, blindingly-fast sofacy attack attracted our attention as neither sample was delivered through a zero-day vulnerability instead, they appeared to be downloaded and installed by another malware. this separate malware was installed by an unknown attack as (md5: ). the top level malware, (named by its authors according to internal strings, and compiled july 28th, 2015) is a rare type of the sofacy azzy implant. it has been modified to drop a separate c&c helper, (md5: ) as . the dropped file is an external c&c communications library, compiled on july 24th, 2015 and used by the main backdoor for all internet-based communications. sofacy apt hits high profile targets with updated toolset decrypted configuration block of the c&c helper library this code modification marks an unusual departure from the typical azzy backdoors, with its c&c communication functions moved to an external dll file. in the past, the sofacy developers modified earlier azzy backdoors to use a c&c server encoded in the registry, instead of storing it in the malware itself, so this code modularisation follows the same line of thinking. in addition to the new azzy backdoors with side-dll for c&c, we observed a new set of data-theft modules deployed against victims by the sofacy group. among the most popular modern defense mechanisms against apts are air-gaps isolated network segments without internet access, where sensitive data is stored. in the past, we ve seen groups such as equation and flame use malware to steal data from air-gapped networks. the sofacy group uses such tools as well. the first versions of these new usb stealer modules appeared around february 2015 and the latest appear to have been compiled in may 2015. older versions of these usbstealer modules were previously described by our colleagues from eset. one example of the new sofacy usbstealer modules is , which is named internally as . sofacy_eng_3 this data theft module appears to have been compiled in may 2015 and is designed to watch removable drives and collect files from them, depending on a set of rules defined by the attackers. the stolen data is copied into a hidden directory as %mypictures%\%volume serial number% , from where it can be exfiltrated by the attackers using one of the azzy implants. more details on the new usb stealers are available in the section on technical analysis. conclusions
over the last year, the sofacy group has increased its activity almost tenfold when compared to previous years, becoming one of the most prolific, agile and dynamic threat actors in the arena. this activity spiked in july 2015, when the group dropped two completely new exploits, an office and java zero-day. at the beginning of august, sofacy began a new wave of attacks, focusing on defense-related targets. as of november 2015, this wave of attacks is ongoing. the attackers deploy a rare modification of the azzy backdoor, which is used for the initial reconnaissance. once a foothold is established, they try to upload more backdoors, usb stealers as well as other hacking tools such as mimikatz for lateral movement. over the last year, the #sofacy group has increased its activity almost tenfold, that spiked in july 2015 tweet
two recurring characteristics of the sofacy group that we keep seeing in its attacks are speed and the use of multi-backdoor packages for extreme resilience. in the past, the group used droppers that installed both the splm and azzy backdoors on the same machine. if one of them was detected, the other one provided the attacker with continued access. as usual, the best defense against targeted attacks is a multi-layered approach. combine traditional anti-malware technologies with patch management, host intrusion detection and, ideally, whitelisting and default-deny strategies. according to a study by the australian dsd, 85% of the targeted attacks analysed could have been stopped by four simple defense strategies. while it s impossible to achieve 100% protection, in practice and most cases all you have to do is increase your defenses to the point where it becomes too expensive for the attacker who will just give up and move on to other targets. more information about the sofacy group is available to customers of kaspersky intelligent services. is there a silver bullet to protect yourself against sofacy? learn more on kaspersky business blog. the library starts its main worker thread from the dllmain function. most of the strings inside the module are encrypted with a homebrew xor-based algorithm. in addition to that, api function names are reversed, presumably to avoid detection in memory. once started, the code in the main thread resolves the basic api functions it needs and loads an additional library from the following location: %temp%\ . if this file is not present, it is recreated from a hardcoded encrypted array inside the body of the dll. next, the module enters an infinite loop. every five minutes it collects basic system information and sends it to the c2 server: windows version number
hardcoded string 4.3 (the backdoor s internal version number)
list of running processes
the main thread also spawns a separate thread for receiving new commands from the c2 servers. every 10 minutes, it sends a new request to the server. the server is expected to send back executable code and one of the following commands: write a new file %local_appdata% or %temp% and execute it, then delete the file
write a new file %local_appdata% or %temp% and call its first exported function using or windows api, then delete the file
run shellcode provided by the server in a new thread
while processing the commands, the backdoor logs all errors and execution results. the module also reads the contents of the file %appdata% and appends it to the results. it then sends the aggregated log back to the c2 server. the module aborts the thread receiving c2 command after it fails to correctly execute commands more than six times in a row, i.e. if file or process creation fails. the export called k is a wrapper for the loadlibrarya api function. the export called senddatatoserver_2 does exactly what the name means: it encrypts all collected data, encodes it using base64 encoding and calls its additional library to send the data to the c2 server. the names of the c2 servers are hardcoded. sofacy_eng_4 hardcoded c&c servers in the main module the two c&c s hardcoded in the configuration block of the main binary are: this external library implements a simple wininet-based transport for the main module. the strings inside the binary are encrypted using 3des and xor and reversed. the dllmain function initializes the library and resolves all required windows api functions. the init export establishes connection to port 80 of a c2 server using wininet api. the user agent string employed is msie 8.0 . the senddata export sends a http post request using a hardcoded uri /store/ . the reply, if its length is not equal to six and its contents do not contain ok is returned back to the caller. the internetexchange export closes the established connection and frees associated handles. most of the strings and data in the file are encrypted using 3des and xor. the code makes use of the windows crypto api for 3des and the decryption key is stored as a standard windows publickeystruc structure: sofacy apt hits high profile targets with updated toolset part of the decryption algorithm sofacy apt hits high profile targets with updated toolset header of one encrypted data buffer containing the hardcoded 3des key first, it creates a new directory: %local_appdata%\microsoft\windows . if the directory creation fails it tries to install into %temp% directory instead. next it writes a hardcoded binary from its body to into the target directory. if the file exists it then moves it to in the same directory and continues the installation. sets file creation timestamp to that of %system% to ensure the dropped payload starts automatically on user log-in it creates the following registry key: [hkcu\software\microsoft\windows\currentversion\run] startupchektemp= %path to % ,#1 next, it starts the dropped dll using the same command line: %path to % ,#1 finally, the program removes itself by starting the following command: cmd /c del %path to self% most of the strings inside the binary are encrypted using a homebrew xor-based algorithm and reversed. the library is an older version of the (md5: ). the dllmain function is identical and starts the main thread; the applicate function is identical to the one in the newer library. this version of the module does not rely on an external transport dll for communicating with its c2 servers; instead it directly uses wininet api functions. the module contains the following hardcoded c2 server names: drivres-update[.]info
softupdates[.]info
the module uses a hardcoded url ( /check/ ) for sending http post requests to its c2 servers. the server is expected to send back executable code and one of the following commands: most of the strings inside the binary are encrypted using 3des and xor and reversed. the program creates the mutex mtx and an event named wertyq34c . upon start, it creates a window with the class name hello and title program , subscribes for device arrival notifications for that window and enters a standard windows message processing loop. the message processing function waits for the wm_devicechange event and starts a new thread on its arrival. the module inspects every new disk volume attached to the system. for every disk it creates a stash directory in %root stash directory location%\%volume serial number in hex% with attributes file_attribute_hidden and file_attribute_system. the root stash directory location may be read from the configuration file or set to the default location which is %mypictures% . then, it traverses the filesystem of the volume looking for files. depending on the settings read from the configuration file, the scope may be narrowed to files with particular extensions and/or files created after a specified date. it is worth noting that if the source file location contains the string system volume information\s-1-5-21-1315235578-283289242\ , then the file is deleted after copying to the stash directory. there are known related samples that are able to create such directories on removable drives, i.e. the sample with md5: . the configuration file is loaded from the same directory as the module and is expected to have a name . it is a text file that may contain the following configuration parameters: this library is a newer version of the file collection module (md5: ) wrapped in a dll file. there are two known variants of this module; they only differ in timestamp values and version information in the resource section. the dllmain function only decrypts the data structures and initializes windows api pointers. the function nvmswt is a wrapper for the api function msgwaitformultipleobjects. the function nvreg is a wrapper for the api function registerclassw. the function nvstart is similar to the main function of the older module; it creates a window and enters the message loop waiting for device arrival notifications. the only difference introduced is that an event named wertyq34c can be signalled by the function nvstop to terminate the message loop and stop processing.
