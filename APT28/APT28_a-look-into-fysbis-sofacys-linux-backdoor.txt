introduction
the sofacy group, also known as apt28 and sednit, is a fairly well known cyber espionage group believed to have ties to russia. their targets have spanned all across the world, with a focus on government, defense organizations and various eastern european governments. there have been numerous reports on their activities, to the extent that a wikipedia entry has even been created for them. from these reports, we know that the group uses an abundance of tools and tactics, ranging across zero-day exploits targeting common applications such as java or microsoft office, heavy use of spear-phishing attacks, compromising legitimate websites to stage watering-hole attacks, and targeting over a variety of operating systems windows, osx, linux, even mobile ios. the linux malware fysbis is a preferred tool of sofacy, and though it is not particularly sophisticated, linux security in general is still a maturing area, especially in regards to malware. in short, it is entirely plausible that this tool has contributed to the success of associated attacks by this group. this blog post focuses specifically on this linux tool preferred by sofacy and describes considerations and implications when it comes to linux malware. malware assessment
fysbis is a modular linux trojan / backdoor that implements plug-in and controller modules as distinct classes. for reference, some vendors categorize this malware under the sednit attacker group naming designation. this malware includes both 32-bit and 64-bit versions of executable and linking format (elf) binaries. additionally, fysbis can install itself to a victim system with or without root privileges. this increases the options available to an adversary when it comes to selecting accounts for installation. summary information for the three binaries we analyzed follows: overall, these binaries are assessed as low sophistication, but effective. they epitomize the grudging reality that advanced persistent threat (apt) actors often don t require advanced means to affect their objectives. rather, these actors more often than not hold their advanced malware and zero day exploits in reserve and employ just enough resources to meet their goals. it is only fair that defenders use any shortcuts or tricks at their disposal to shorten the amount of time it takes to assess threats. in other words, defenders should always look for ways to work smarter before they have to work harder. getting the most out of strings
binary strings alone revealed a good amount about these files, increasing the efficacy of activities such as static analysis categorization (e.g., yara). one example of this is fysbis installation and platform targeting information for the samples in table 1 and table 2. in this case, we can see the binary installation path and local reconnaissance to determine which flavor of linux the malware is running. this is followed by a number of linux shell command style commands related to the malware establishing persistence. another example of easily obtained information from these samples is capability based. figure 2 shows interactive status / feedback strings that can give a defender an initial profile of capabilities. in addition to contributing to static analysis detections, this can be useful as a starting point for further incident response prioritization and qualification of the threat. symbolic information can shorten analysis time
interestingly, the most recent elf 64-bit binary we analyzed (table 3) was not stripped prior to delivery, which offered additional context in the form of symbolic information. defenders more familiar with windows portable executable (pe) binaries can equate this with compilation of a debug version versus a release version. for comparison, if we were to inspect fysbis remoteshell associated strings in one of the stripped variants, we would only see the following: compare this with what is available from the non-stripped variant: little static analysis gifts like these can help to speed defender enumeration of capabilities and more importantly further contribute to correlation and detection across related samples. additionally, this latest sample demonstrated minor evolution of the threat, most notably in terms of obfuscation. specifically, both samples in table 1 and table 2 leaked installation information in the clear within binary strings. this was not the case with the sample in table 3. taking a closer look at this non-stripped binary using a disassembler, the following corresponds to decoding malware installation information for a root-privilege account. in this case, the symbolic information hints at the method used for decoding, with references to mask, path, name, and info byte arrays. as it turns out, the referenced byte mask is applied to the other byte arrays using a rolling double-xor algorithm to construct malware installation paths, filenames, and descriptions for a linux root account. corresponding installuser byte arrays exist, which facilitate the non-root installation for the trojan. the same masking method is also used by the binary to decode malware configuration c2 information, further showcasing how a little symbolic information can go a long way towards completeness and higher confidence in assessment of a malware sample. if you would like to learn more about how fysbis works, the samples analyzed remain fairly consistent with the sample analysis found here. infrastructure analysis
as unit 42 has discussed in depth in other blog articles, we have observed that adversaries in general are seemingly hesitant in changing their infrastructure. this may be due to not wanting to commit additional resources, or simply a matter of retaining familiarity for the sake of timeliness. in either case, we see the same type of behavior here with the fysbis samples in use by sofacy. the oldest sample (table 1), was found to beacon to the domain azureon-line[.]com, which had already been widely publicized as a known command and control domain for the sofacy group. using passive dns, we can see that two of the original ips this domain resolved to, 193.169.244[.]190 and 111.90.148[.]148 also mapped to a number of other domains that had been in use by the sofacy group during that time period. the first of the newer samples (table 2), continues the trend and beacons to an ip also widely associated with the sofacy group, 198.105.125[.]74. this ip has been mostly associated with the tool specifically known as chopstick, which can be read about here. the newest sample (table 3), introduces a previously unknown command and control beacon to mozilla-plugins[.]com. this activity aligns with the previously observed sofacy group tactic of integrating legitimate company references into their infrastructure naming convention. neither this new domain nor the ip it resolves to have been observed in the past, indicating that the sample in table 3 may be associated with a newer campaign. comparing this sample s binary with the other two however, shows there are significant similarities on the code level as well as in terms of shared behavior. conclusion
linux is used across business and home environments and appears in a variety of form factors. it is a preferred platform within data centers and the cloud for businesses, as well as an ongoing favorite when it comes to a majority of internet-facing web and application servers. linux is also at the foundation of android devices and a number of other embedded systems. the value proposition of linux especially when it comes to its use in the enterprise can be broken out into three perceived benefits: lower total cost of ownership (tco), security, and feature set. while numbers and comparison alone can contribute to measurement of tco and feature set, security requires further qualification. expertise in the linux platform is highly sought after across all industries for multiple disciplines, from system administration to big data analytics to incident response. the majority of businesses still maintain windows-heavy user environments where certain core infrastructure components also operate under windows servers (e.g., active directory, sharepoint, etc.). this means, from a practical perspective, most of a business s focus remains on supporting and protecting windows assets. linux remains a mystery to a number of enterprise it specialists most critically for network defenders. identifying and qualifying potential incidents requires a familiarity with what constitutes normal operation in order to isolate anomalies. the same is true for any other asset in an environment, normal operation is entirely dependent on a given asset s role / function in the enterprise. lack of expertise and visibility into non-windows platforms combine in some environments to present significant risks against an organization s security posture. as a recent caution, the linux vulnerability described under cve-2016-0728 further demonstrates the potential breadth of real-world risks to associated platforms. a natural extension of this exposure is increased targeting by both dedicated and opportunistic attackers across various malicious actor motivations. despite the lingering belief (and false sense of security) that linux inherently yields higher degrees of protection from malicious actors, linux malware and vulnerabilities do exist and are in use by advanced adversaries. to mitigate associated risks requires tailored integration of the people, processes, and technology in support of prevention, monitoring, and detection within an environment. linux malware detection and prevention is not prevalent at this time, but palo alto networks customers are protected through our next-generation security platform: ips signature 14917 deployed to identify and prevent command and control activity
the c2 domains and files mentioned in this report are blocked in our threat prevention product.
