sofacy attacks multiple government entities
bryan lee	by bryan lee, mike harbison and robert falcone
february 28, 2018 at 10:00 am
category: unit 42 tags: apt28, carberp, luckystrike, ministry of foreign affairs, powershell, sofacy, trojan the sofacy group (aka apt28, fancy bear, strontium, sednit, tsar team, pawn storm) is a well-known adversary that remains highly active in the new calendar year of 2018. unit 42 actively monitors this group due to their persistent nature globally across all industry verticals. recently, we discovered a campaign launched at various ministries of foreign affairs around the world. interestingly, there appear to be two parallel efforts within the campaign, with each effort using a completely different toolset for the attacks. in this blog, we will discuss one of the efforts which leveraged tools that have been known to be associated with the sofacy group. attack details at the beginning of february 2018, we discovered an attack targeting two government institutions related to foreign affairs. these entities are not regionally congruent, and the only shared victimology involves their organizational functions. specifically, one organization is geographically located in europe and the other in north america. the initial attack vector leveraged a phishing email (seen in figure 1), using the subject line of upcoming defense events february 2018 and a sender address claiming to be from jane s 360 defense events <events@ >. jane s by ihsmarkit is a well-known supplier of information and analysis often times associated with the defense and government sector. analysis of the email header data showed that the sender address was spoofed and did not originate from ihsmarkit at all. the lure text in the phishing email claims the attachment is a calendar of events relevant to the targeted organizations and contained specific instructions regarding the actions the victim would have to take if they had trouble viewing the document . the attachment itself is an microsoft excel xls document that contains malicious macro script. the document presents itself as a standard macro document but has all of its text hidden until the victim enables macros. notably, all of the content text is accessible to the victim even before macros are enabled. however, a white font color is applied to the text to make it appear that the victim must enable macros to access the content. once the macro is enabled, the content is presented via the following code: activesheet.range( a1:c54 ).font.color = vbblack the code above changes the font color to black within the specified cell range and presents the content to the user. on initial inspection, the content appears to be the expected legitimate content, however, closer examination of the document shows several abnormal artifacts that would not exist in a legitimate document. figure 2 below shows how the delivery document initially looks and the transformation the content undergoes as the macro runs. macrobeforeafter
delivery document as mentioned in a recent isc diary entry, the macro gets the contents of cells in column 170 in rows 2227 to 2248 to obtain the base64 encoded payload, which can be seen in the following screenshot: the macro prepends the string begin certificate to the beginning of the base64 encoded payload and appends end certificate to the end of the data. the macro then writes this data to a text file in the c:\programdata folder using a random filename with the .txt extension. the macro then uses the command certutil -decode to decode the contents of this text file and outputs the decoded content to a randomly named file with a .exe extension in the c:\programdata folder. the macro sleeps for two seconds and then executes the newly dropped executable. the newly dropped executable is a loader trojan responsible for installing and running the payload of this attack. we performed a more detailed analysis on this loader trojan, which readers can view in this report s appendix. upon execution, the loader will decrypt the embedded payload (dll) using a custom algorithm, decompress it and save it to the following file: the loader will then create the batch file %localappdata% , which it will write the following: the loader trojan uses this batch file to run the embedded dll payload. for persistence, the loader will write the path to this batch file to the following registry key, which will run the batch file each time the user logs into the system: the payload installed by the loader executable is a variant of the sofacycarberp payload, which is used extensively by the sofacy threat group. overall, sofacycarberp does initial reconnaissance by gathering system information and sending it to the c2 server prior to downloading additional tools to the system. this variant of sofacycarberp was configured to use the following domain as its c2 server: the loader and the sofacycarberp sample delivered in this attack is similar to samples we have analyzed in the past but contains marked differences. these differences include a new hashing algorithm to resolve api functions and to find running browser processes for injection, as well as changes to the c2 communication mechanisms as explained in detail within the appendix. open-source delivery document generator it appears that sofacy may have used an open-source tool called luckystrike to generate the delivery document and/or the macro used in this attack. luckystrike, which was presented at derbycon 6 in september 2016, is a microsoft powershell-based tool that generates malicious delivery documents by allowing a user to add a macro to an excel or word document to execute an embedded payload. we believe sofacy used this tool, as the macro within their delivery document closely resembles the macros found within luckystrike. to confirm our suspicions, we generated a malicious excel file with luckystrike and compared its macro to the macro found within sofacy s delivery document. we found that there was only one difference between the macros besides the random function name and random cell values that the luckystrike tool generates for each created payload. the one non-random string difference was the path to the .txt and .exe files within the command certutil -decode , as the sofacy document used c:\programdata\ for the path whereas the luckystrike document used the path stored in the application.userlibrarypath environment variable. figure 3 below shows a diff with the luckystrike macro on the left and sofacy macro on the right, where everything except the file path and randomly generated values in the macro are exactly the same, including the obfuscation attempts that use concatenation to build strings.
discovery and relationships with much of our research, our initial direction and discovery of emerging threats is generally some combination of previously observed behavioral rulesets or relationships. in this case, we had observed a strange pattern emerging from the sofacy group over the past year within their command and control infrastructure. patterning such as reuse of whois artifacts, ip reuse, or even domain name themes are common and regularly used to group attacks to specific campaigns. in this case, we had observed the sofacy group registering new domains, then placing a default landing page which they then used repeatedly over the course of the year. no other parts of the c2 infrastructure amongst these domains contained any overlapping artifacts. instead, the actual content within the body of the websites was an exact match in each instance. specifically, the strings 866-593-54352 (notice it is one digit too long), 403-965-2341, or the address 522 clematis. suite 3000 was repeatedly found in each instance. threatconnect had made the same observation regarding this patterning in september 2017. hotfixmsupload[.]com is particularly interesting as it has been identified as a sofacy c2 domain repeatedly, and was also brought forth by microsoft in a legal complaint against strontium (sofacy) as documented here. leveraging this intelligence allowed us to begin predicting potential c2 domains that would eventually be used by the sofacy group. in this scenario, the domain cdnverify[.]net was registered on january 30, 2018 and just two days later, an attack was launched using this domain as a c2. conclusion the sofacy group should no longer be an unfamiliar threat at this stage. they have been well documented and well researched with much of their attack methodologies exposed. they continue to be persistent in their attack campaigns and continue to use similar tooling as in the past. this leads us to believe that their attack attempts are likely still succeeding, even with the wealth of threat intelligence available in the public domain. application of the data remains challenging, and so to continue our initiative of establishing playbooks for adversary groups, we have added this attack campaign as the next playbook in our dataset. palo alto networks customers are protected from this threat by: wildfire detects all sofacycarberp payloads with malicious verdicts.
autofocus customers can track these tools with the sofacy, sofacymacro and sofacycarberp
traps blocks the sofacy delivery documents and the sofacycarberp payload. the payload dropped to the system by the macro is an executable that is responsible for installing and executing a dynamic link library (dll) to the system. this executable contains the same decryption algorithm as the loader we analyzed in the dealerschoice attacks in late 2016. the loader has several coding features that make it interesting. for example, upon execution, the loader attempts to load the following library: api-ms-win-core-synch-l1-2- . this dll is part of the universal windows platform app to windows 10. typically, a developer would not link directly to this file, but to windowsapp.lib, which gives access to the underlying apis. it appears the loader included definitions of wrappers for windows api functions that cannot be called directly because they are not supported on all operating systems. upon execution, the loader will decrypt the embedded payload (dll) using a custom algorithm followed by decompressing it using the rtldecompressbuffer api. this api is normally used for windows drivers, but there is nothing to prevent a userland process from using it, and the parameters are documented on msdn. the compression algorithm used is lznt1 with maximum compression level. the payload is decrypted using a starting 10-byte xor key of: 0x3950be2cd37b2c7ccbf8. once decrypted, the data is then passed to the decompression routine. the payload is in the loader at file offset: 0x19880 0x1f23c size of 0x59bd. the payload can be decrypted and decompressed with the following python script:
to evade observable detection from windows explorer, file attributes are set to hidden. %localappdata% would be the user s path from the user who launched the executable, i.e., c:\users\user\appdata\local where the user would contain the user s logon account. to execute the dropped dll, the loader first checks the integrity level of the executing process, and if it does not have the necessary permissions, the loader will enumerate the system s processes searching for . this process was most likely chosen as it typically runs with administrator privileges. the loader will attempt to use the permission of to execute the dropped dll via createprocessasuser. if the user who executed the loader is admin or has sufficient privileges this step is skipped. the execution is handled using the windows program and calls the dll s export via ordinal number 1. example: for persistence, the loader will add the following registry key userinitmprlogonscript to hkcu \environment with the following value: this entry would cause the batch file to be executed any time the user logs on. the batch file contains the following information: the use of the userinitmprlogonscript is not new to sofacy, as mitre s att&ck framework shows sofacy s use of this registry key as an example of the logon scripts persistence technique. sofacycarberp payload the dll delivered in these attacks is a variant of the sofacycarberp payload, which is used extensively by the sofacy threat group. api resolution previous versions of this trojan used code taken from the leaked carberp source code, which mainly involved carberp s code used to resolve api functions. however, this version of sofacycarberp uses a hashing algorithm to locate the correct loaded dll based on its basedllname in order to manually load api functions. it does so by loading the peb, then accesses the _peb_ldr_data structure and then obtains the unicode string for basedllname in the inloadordermodulelist. it treats this unicode string as an ascii string by skipping every other byte then gets the lowercase version of the string. it then subjects the resulting string of lowercase characters to a hashing algorithm and checks the resulting hash to a hardcoded value. the following python script shows the algorithm used to determine the hashed values: the trojan will use the same hashing algorithm for api resolution to find browser processes running on the system with the intention of injecting code into the browser to communicate with its c2 server. the use of this hashing algorithm differs from previous variants of sofacycarberp, as previously reported by eset. to begin the code injection, the trojan calls the zwquerysysteminformation function, specifically requesting for the data associated with systemprocessinformation. the result is a structure named system_process_information, which the trojan will access the unicode string in the field imagename (offset 0x3c). the trojan then subjects this unicode string in ascii format to the hashing algorithm, looking for the following: the trojan will attempt to inject code into these browsers to carry out its c2 communications. to carry out c2 communications via injected code in a remote process, the injected code reaches out to the c2 server and saves the response to a memory mapped file named snfirnw. the trojan uses a custom communication protocol within this mapped file, but at a high level the trojan will continually look for data within the mapped snfirnw file and process the data in the same manner as if it communicated with the c2 server within its own process. command and control communications in addition to being able to communicate with its c2 server from code injected into a web browser, the trojan can also carry out the same communication process within its own process. the c2 communication uses https and specifically sets the following flags to do so in a manner to allow invalid certificates: security_flag_ignore_cert_date_invalid|security_flag_ignore_cert_cn_invalid|security_flag_ignore_unknown_ca|security_flag_ignore_revocation the initial request sent from the trojan is to , likely as an internet connectivity check. this list of strings differs from previously analyzed sofacycarberp samples, such as the variant discussed in our june 2016 blog new sofacy attacks against us government agency that chose from a list of strings .xml, .pdf, .htm or .zip. the value for the one parameter, specifically wrlqg1kmjxpgid1rodm= is base64 encoded ciphertext that decrypts to the string uihklepz4v, which is hardcoded in the trojan. the algorithm used to encrypt the data in the url the same algorithm as used in previous sofacycarberp samples we have analyzed. the data in the post request is the base64 encoded user-agent seen in the request. after establishing that the system has internet access, the trojan will gather detailed system information and send it to the c2 server. the gathered information includes a unique identifier based on the storage volume serial number (id field), a list of running processes, network interface card information, the storage device name (disk field), the trojan s build identifier (build field, specifically 0x9104f000), followed by a screenshot of the system (img field). the screenshot functionality in this trojan is rather interesting, as instead of using windows apis to take a screenshot, the trojan s code simulates the user pressing the take screenshot key (vk_screenshot) on the keyboard which saves the screenshot to the clipboard. the trojan then accesses the data in the clipboard and converts it to a jpg image to include in this http request. all of this data is encrypted, base64 encoded and sent to the c2 server in a http post to a url that a similar structure as the initial internet connectivity check. the sofacycarberp trojan parses the c2 server s response to the request for data that the trojan will then use to download a secondary payload to the system. the trojan looks in the response data for sections between the tags [file] and [/file] and [settings] and [/settings], which we have observed in other sofacycarberp samples we have analyzed. however, this particular variant also contains another section with the tags [shell] and [/shell]. the trojan parses these sections for specific fields that dictate how the trojan will operate, including where the trojan will save the downloaded file, how the trojan runs the secondary payload and what c2 location the trojan should communicate with. the following fields are parsed by the trojan:
