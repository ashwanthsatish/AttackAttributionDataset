 dealerschoice is sofacy s flash player exploit platform by robert falcone and bryan lee
october 17, 2016 at 11:00 pm
category: unit 42 tags: adobe, dealerschoice, exploit, flash player, sofacy unit 42 has reported on various sofacy group attacks over the last year, most recently with a post on komplex, an os x variant of a tool commonly used by the sofacy group. in the same timeframe of the komplex attacks, we collected several weaponized documents that use a tactic previously not observed in use by the sofacy group. weaponizing documents to exploit known microsoft word vulnerabilities is a common tactic deployed by many adversary groups, but in this example, we discovered rtf documents containing embedded ole word documents further containing embedded adobe flash (.swf) files, designed to exploit flash vulnerabilities rather than microsoft word. we have named this tool that generates these documents dealerschoice. in addition to the discovery of this new tactic, we were able to identify two different variants of the embedded swf files: the first being a standalone version containing a compressed payload which we have dubbed dealerschoice.a and a second variant being a much more modular version deploying additional anti-analysis techniques which we have dubbed . the unearthing of suggests a possible code evolution of the initial dealerschoice.a variant. also, artifacts within dealerschoice suggests that sofacy created it with the intentions to target both windows and osx operating systems, as dealerschoice could potentially be cross-platform due to its use of adobe flash files. targeting data of sofacy group attacks remain limited, but we were able to identify a ukrainian based defense contractor as well as the ministry of foreign affairs of a nation state in that same region as being targeted by these attacks. the following post focuses on our study of dealerschoice, though it is worth noting that the u.s. government has recently attributed many of the same indicators of compromise associated with this entity during the dnc intrusion to russia. (sofacy, also known as apt 28, is a group commonly attributed to russia.) dealerschoice attacks
based on our telemetry, the attacks delivering dealerschoice documents occurred in august 2016 and focused primarily on organizations in countries that were part of the former soviet republic. these malicious documents were delivered to a ukrainian-based defense contractor as well as a ministry of foreign affairs of a nation state in the same region, both via phishing attacks. we were able to collect the actual phishing email targeting the ukrainian based defense contractor, which can be seen in figure 1. the emails shows a fairly well crafted phish, which had a spoofed sender address masquerading as part of the european parliament s press unit and used an existing person s signature block to increase the appearance of legitimacy. the file attachment is a sample of the dealerschoice.a variant named containing details about a possible russian invasion of ukraine. dealerschoice_1 figure 1 attack email delivered to ukrainian defense organization and mfa of nearby country if the recipient opens the attachment, a decoy document is displayed that has a title of russian invasion possible at any minute , as seen in figure 2. the contents of the decoy document were copied and pasted from an august 7, 2016 article posted at the irish times with very little modification. dealerschoice_2 figure 2 decoy document displayed by dealerschoice documents on possible russian invasion of ukraine during our analysis of the dealerschoice delivery document, we found a second, albeit different, version of dealerschoice that we do not have the associated targeting information, although we believe it was delivered in another phishing attack. this additional sample also opened a decoy document, which in this case was a document detailing turkish politics. again, it appears the threat actors took content from an online news article, as the contents in this decoy documents match an august 4, 2016 article posted to the huffington post. figure 3 shows this decoy content, which in this case the threat actors appear to be less careful when they copied and pasted the content, as they introduced a spelling error (see stanbul ) at the beginning of the document. dealerschoice_3 figure 3 decoy document opened by the additional dealerschoice sample deal with it
while the decoy documents are displayed to victim, the dealerschoice delivery document is busy carrying out malicious activities in an attempt to exploit the system. as previously mentioned, we have seen two different variations of dealerschoice. both variations share a common core of components, however, how they exploit vulnerabilities and install the payload is markedly different. we will describe specifics on how both dealerschoice.a and operate in further sub-sections; however, we need to first describe the core components shared between the two. at face value, dealerschoice is a rich text file (rtf) that has two responsibilities: display the decoy content embedded within the rtf and to load an embedded word document (ole). the word document loads an embedded flash file (swf), which ultimately executes actionscript that begins the malicious activity on the system. the actionscript within the embedded flash file, specifically the code and the actions it carries out is where the two variants of dealerschoice differ. as depicted in the diagram in figure 4, the actionscript in dealerschoice.a checks the version of flash player and attempts to exploit a vulnerability by loading one of three embedded flash files (swf) to install an embedded payload. the actionscript in differs dramatically, as it contacts a c2 server to receive a flash file and a payload in order to exploit a vulnerability and install a trojan. dealerschoice_4 figure 4 dealerschoice variants a and b use different approaches to achieve the same goal as you can see, dealerschoice.a is more of a standalone toolkit with all components embedded within one file, whereas requires an active c2 server to obtain additional resources required to exploit the system. the filename of the flash file embedded in the word document of dealerschoice.a suggests it author intended it to be standalone as well. dealerschoice.a
the dealerschoice.a variant is a standalone tool that contains all the necessary components to exploit the system. based on embedded metadata, the dealerschoice.a swf file was created on august 15, 2016, which is the same day in which the attack on the ukrainian defense organization and a day before the attack on the targeted ministry of foreign affairs. the flash swf file that contained the malicious actionscript also had four files embedded within it, named extswf, extswf1, extswf2 and main22_pay. the actionscript uses the zlib library to decompress the main22_pay file, which contains the shellcode and the payload that the shellcode will install on the system. the actionscript will check the version of flash player and will use zlib to decompress followed by a decryption routine (0xb7 as a key) on one of the extswf, extswf1 or extswf2 files as an embedded swf. the following actionscript shows the custom algorithm that will decrypt the embedded swf file: the embedded swf decrypted contains actionscript that attempts to exploit a vulnerability. the purpose of aforementioned version check is to make sure that the correct malicious actionscript is executed to exploit a vulnerability that the flash player is vulnerable to. table 1 shows the range of flash player versions within dealerschoice.a, the embedded swf file loaded and the associated vulnerability exploited by the loaded swf. able 1 versions of flash player dealerschoice.a looks for and the associated vulnerability exploited it appears the author(s) of dealerschoice did extensive research, as the range of versions for each vulnerability aligns with the vulnerable versions as described in the vendor s advisory. it should also be noted that if the flash version on the system is not within these ranges, dealerschoice will not load any of the malicious swf files and therefore not attempt to exploit the system. the result of exploiting any of the vulnerabilities listed in table 1 is the execution of shellcode from the main22_pay file embedded within the swf. the shellcode appears to use the mersenne twister algorithm with an initial seed value of 0xd01a7c2 to generate a pseudo-random number to use as a key to decrypt an embedded payload. once decrypted, the shellcode installs the payload to %appdata% (sha256: ). the shellcode also creates the following registry key for persistence, which is the office test persistence method used by sofacy in previous attacks: while analyzing dealerschoice.a, we found an interesting artifact in the extswf swf file, which sets a flag with the following line of code if the system is running on apple s osx operating system: this artifact is interesting as the shellcode executed relies on windows apis and the payload installed is a windows dll that would not run on osx. this flag does suggest that the threat actors do consider the osx operating system when developing their malicious exploit code in cross platform file types, such as flash swf files. while we cannot confirm this, it is possible that the threat actors could use dealerschoice.a to exploit and load an osx trojan if prepared with the appropriate shellcode. while researching dealerschoice.a, we found delivery documents that shared many of the same attributes, but were newer as the metadata within the embedded flash file suggests they were created on august 25, 2016. documents are slightly different than their predecessors, specifically in that they do not contain three separate swf files to exploit vulnerabilities on the system. instead, relies on an active c2 server to provide a malicious swf file to exploit a vulnerability, as well as the payload to execute. we presume that the threat actor checks the version of flash player at the c2 and loads the malicious exploit code on the fly. we named these documents based on this difference. during our analysis, the c2 server was not operational so we were unable to obtain the malicious swf or payload associated with this delivery document. the core components of dealerschoice are in variant b, specifically an rtf file with an embedded word document that loads an embedded flash file (swf). however, the flash file in variant b are different than its predecessor, which contains one embedded file named main64_pay. the main64_pay file is decompressed using the zlib library and decrypted using the same algorithm as discussed in the dealerschoice.a section, but using 0x8f as a key instead of 0xb7. when loaded, main64_pay runs actionscript in a function named main32 , which begins creating and sending http get request to the following url: the <capabilities.serverstring> portion of the url is the output of the read only string provided within the flash.system.capabilities.serverstring property, which contains a string of system specific information that the webserver can use to determine the system s operating system, flash version and more. during our analysis, the http get request appears as the following, which shows the system specific information sent to the c2 server: we believe the threat actors use the system information in this beacon for the following reasons (and possibly others): determine the version of flash to serve an appropriate malicious swf to exploit a vulnerability in that version of flash
determine the operating system to provide the appropriate payload, possibly making this a cross-platform exploit framework
filter out analysis systems based on operating system, architecture, screen resolution and/or language
if the c2 server is operational, it is going to respond to the beacon to server.php with data that include variables named k1 , k2 , k3 and k4 . the function is going to use the value in the k1 variable in another http request to the following url: the c2 server will respond to this request with compressed and encrypted binary data that the function will decrypt using the k4 variable as a key using the same encryption algorithm. the decrypted binary data is the payload that is loaded into memory, suggesting the payload provided by the c2 server will be similar to the payload embedded in the other version of this toolkit, specifically starting with shellcode that decrypts and installs an embedded dll. infrastructure
amongst the two known dealerschoice variants, dealerschoice.a was found to drop a payload onto the victim host after exploiting an available adobe flash vulnerability which then communicated with a c2 server located at servicecdp[.]com. this c2 was previously reported on by unit 42 in a june 2016 blog regarding an attack campaign targeting government organizations. the payload discovered communicating to servicecdp[.]com in june was then linked to other sofacy group attacks in that time frame using the same microsoft word dll side-loading technique. while we were unable to retrieve the payload for , we were able to identify appexsrv[.]net as the c2 server used to deliver the malicious exploit code and the payload. examination of passive dns records did not show overlaps with previous attack campaigns, but we were able to identify two other domains, appexrv[.]com and upmonserv[.]net registered by the same email address, kellen.green82@ . these additional domains do not appear to be active c2s at this time. figure 5 shows the infrastructure and samples associated with dealerschoice. dealerschoice_6 figure 5 infrastructure and samples associated with dealerschoice evidence of a tiered infrastructure
the remote server used by to obtain its malicious exploit code and its payload is appexsrv[.]net (resolved to ). during our analysis, the remote server did not serve a swf file or a payload, but instead it responded with the following http 503 error that is quite interesting: the http 503 error shows that the server at is running a squid http proxy. the response shows that the proxy was unable to connect to the server that the proxy is configured to communicate, specifically with a 110 error that occurs when the connection timed out. this suggests that the server is most likely set up as a transparent proxy to forward http requests to another server. the use of this squid proxy suggests the threat actors want to conceal the true location of their c2 server. conclusion
dealerschoice is an exploit platform that allows the sofacy threat group to exploit vulnerabilities in adobe flash. cross-platform exploits are obviously a focus for sofacy, as they included checks within dealerschoice to determine the operating system of the targeted system. these checks were specifically for apple s os x operating system, which coupled with our discovery of sofacy s komplex osx trojan suggests that this threat group is capable of operating in both windows and apple environments. our analysis of dealerschoice has also led us to the discovery of a potential tiered infrastructure that leverages transparent proxies to hide the true location of sofacy s c2 servers. palo alto networks customers are protected from dealerschoice delivery documents and the sofacy carberp payload via: wildfire detection of all known samples as malicious
all known c2s are classified as malicious in pan-db
traps was able to block exploit code used by dealerschoice
autofocus customers can gather additional information on dealerschoice and sofacy carberp via: autofocus tags have been created dealerschoice
payload matches sofacycarberp tag in autofocus
