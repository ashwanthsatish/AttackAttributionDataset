sofacy s komplex os x trojan by dani creus, tyler halfpop and robert falcone
september 26, 2016 at 11:00 am
category: unit 42 tags: aerospace, komplex, os x, sofacy, trojan unit 42 researchers identified a new os x trojan associated with the sofacy group that we are now tracking with the komplex tag using the palo alto networks autofocus threat intelligence platform. the sofacy group, also known as apt28, pawn storm, fancy bear, and sednit, continues to add to the variety of tools they use in attacks; in this case, targeting individuals in the aerospace industry running the os x operating system. during our analysis, we determined that komplex was used in a previous attack campaign targeting individuals running os x that exploited a vulnerability in the mackeeper antivirus application to deliver komplex as a payload. komplex shares a significant amount of functionality and traits with another tool used by sofacy the carberp variant that sofacy had used in previous attack campaigns on systems running windows. in addition to shared code and functionality, we also discovered komplex command and control (c2) domains that overlapped with previously identified phishing campaign infrastructures associated with the sofacy group. komplex binder
komplex is a trojan that the sofacy group created to compromise individuals using os x devices. the trojan has multiple parts, first leading with a binder component that is responsible for saving a second payload and a decoy document to the system. we found three different versions of the komplex binder, one that was created to run on x86, another on x64, and a third that contained binders for both x86 and x64 architectures. we found the following samples of the komplex binder: the binder component saves a decoy document named roskosmos_2015- to the system and opens it using the preview application built into os x. figure 2 shows a portion of the 17 page decoy document. this document is titled 2016 2025 and describes the russian federal space program s projects between 2016 and 2025. we do not have detailed targeting information regarding the sofacy group s attack campaign delivering komplex at this time; however, based on the contents of the decoy document, we believe that the target is likely associated with the aerospace industry. komplex dropper
the komplex dropper component is saved to the system as /tmp/content (sha256: ) and is responsible for installing a third executable to the system and setting up persistence for the third executable to launch each time the os x operating system starts. this dropper also provided the basis for the name komplex , which is seen in several folder paths that were included within the mach-o file, such as /users/kazak/desktop/project/komplex . the komplex dropper is fairly straightforward from a functional perspective, as it contains all of its functionality within its _main function. the _main function (figure 3) accesses data within three variables named _payload_1 , _payload_2 and _payload_3 , and writes them to three files on the system. komplex payload
the ultimate purpose of the aforementioned components is to install and execute the komplex payload. the dropper component saves the payload to /users/shared/.local/kextd (sha256: ) and ultimately executes the payload. the payload begins by conducting an anti-debugging check to see if it is being debugged before proceeding with executing its main functionality, which can be seen in the amibeingdebugged function in figure 6. the amibeingdebugged function uses the sysctl function to check to see if a specific p_traced flag is set, which signifies that the process is being debugged. a particularly interesting part of this function is that it is very similar to the function provided by apple to its developers in a guide created in 2004 titled detecting the debugger . this is not the first time the sofacy group s malware authors have obtained techniques from publicly available sources, as demonstrated in the use of the office test persistence method that they obtained from a blog posted in 2014. after determining that it is not running in a debugger, the payload performs an anti-analysis/sandbox check by issuing a get request to google, to check for internet connectivity. the payload will sleep until it receives a response from the http requests to google, which means komplex will only communicate to its c2 servers in internet enabled environments. figure 7 shows the connectedtointernet function that confirms whether the payload is able to communicate with http:// before carrying out its functionality. figure 7 the connectedtointernet function testing for an active internet connection after confirming an active internet connection, the komplex payload begins carrying out its main functionality. the komplex payload uses an 11-byte xor algorithm to decrypt strings used for configuration and within c2 communications, including the c2 domains themselves. figure 8 shows a screenshot of komplex s custom string decryption algorithm, along with the xor key used to decrypt strings within the payload. sofacy_2 figure 8 11-byte xor algorithm used by komplex to decrypt configuration strings the algorithm seen in figure 8 decrypts the strings seen in table 1, which the payload references using the associated variable names. the payload uses these decrypted strings for a variety of purposes, such as command parsing and c2 server locations. he komplex payload uses the servers variable to obtain the location of its c2, which it communicates with using http post requests. the payload generates a url to communicate with its c2 server that has the following structure: /<random path>/<random string>.<chosen extension>/?<random string>=<encrypted token> the <chosen extension> portion of the url is chosen at random from the list of legitimate file extensions: .xml, .zip, .htm and .pdf. the <encrypted token> within the parameters of the url is base64 encoded ciphertext created from the string h8sn3vq6kl . the ciphertext of the string is generated via a custom algorithm that uses a random 4-byte integer as a key that is modified by xor with the static value 0xe150722. the payload also encrypts the data sent within the post request using the same algorithm and encodes it using base64. figure 9 below shows an example http post sent from the payload to its c2 server. the http post data in figure 9 is comprised of information that the malware collects from the infected system. the system information sent to the c2 includes data such as the system version, username, and process list, which is gathered within a function named getosinfo within the infoos class (figure 10). the sofacy c2 server will respond to this http request with encrypted data that the payload will decrypt using the same custom algorithm used to encrypt the post data. the komplex payload will parse the c2 response for the following strings: [file] and [/file] , filename= , pathtosave= , shell= , execute , and delete . the delete action does nothing more than delete a file specified by pathtosave / filename , whereas the execute action involves running the following system commands before executing the specified file: the payload will treat [file] and [/file] as delimiters that specify the data that the payload should write to a specified file, which allows the threat actor to download additional files to the system. lastly, the payload can execute commands on the compromised system specified within the shell field, which the payload will execute and then send results back to the c2. connections to sofacy and previous attacks.
code overlaps while reverse engineering the komplex payload, we came across a few code overlaps that we believed were worth exploring. first, we noticed striking similarities between the komplex payload and the traits and behavior of an os x trojan discussed in a bae systems blog titled new mac os malware exploits mackeeper. according to this blog post, an os x trojan was delivered via a vulnerability in the mackeeper application. the nameless os x trojan uses an 11-byte xor algorithm to decrypt an embedded configuration, which has all of the same variable names and values as the komplex sample (see table 1). the algorithm used to encrypt and decrypt the network traffic, as well as all static elements of the network communications (composition of url, structure of http data, command parsing procedure, etc.) discussed in the blog post are the exact same as seen in the komplex payload. these overlaps suggest that the trojan delivered by the mackeeper vulnerability was in fact the komplex trojan. the second code overlap ties the komplex trojan to sofacy s carberp variant, which we have analyzed in previous research efforts. even though komplex was created to run on os x and sofacy s carberp variant was developed to run on windows, they share many commonalities, including: same url generation logic using random path values, a random file extension and encrypted token
same file extensions used in c2 url that are listed within the binaries in the same order
same algorithm used to encrypt and decrypt the token in the url and http post data (carberp key is modified using value 0xaa7d756 whereas komplex uses 0xe150722)
very similar command handling, including parsing specifically for execute, delete, [file], [/file], filename, and pathtosave.
checks for internet connectivity by connecting to uses an 11-byte xor key to decrypt strings within the configuration
in addition to these common traits, we found a sofacy carberp variant (sha256: ) using the same token value of h8sn3vq6kl within its c2 url, as observed in komplex payloads. based on these observations, we believe that the author of sofacy s carberp variant used the same code, or at least the same design, to create the komplex trojan. a benefit of retaining many of the same functionalities within the windows and os x trojans is that it would require fewer alterations to the c2 server application to handle cross-platform implants. infrastructure overlap while komplex s c2 domain appleupdate[.]org does not appear to have any previously known activity associated with it, both the apple-iclouds[.]net and itunes-helper[.]net domains have direct ties to sofacy activity. the apple-iclouds[.]net domain is mentioned within a pwc tactical intelligence bulletin that discussed a phishing campaign conducted by the sofacy group. the itunes-helper[.]net domain is associated with separate activity discussed in trend micro s blog titled looking into a cyber-attack facilitator in the netherlands that included research on hosting providers used by pawn storm (sofacy). the domain appleupdate[.]org does have one interesting correlation point, specifically involving the ip 185.10.58[.]170 that resolved this domain between april 2015 through april 2016. researchers at bae systems provided unit 42 the komplex payload delivered through the exploitation of mackeeper (dropper sha256: and payload sha256: ), which used the ip address 185.10.58[.]170 within its configuration as a c2 server. this infrastructure overlap further strengthens the connection between the komplex payload we discovered with the prior campaign using mackeeper for delivery. conclusion
the sofacy group created the komplex trojan to use in attack campaigns targeting the os x operating system a move that showcases their continued evolution toward multi-platform attacks. the tool is capable of downloading additional files to the system, executing and deleting files, as well as directly interacting with the system shell. while detailed targeting information is not currently available, we believe komplex has been used in attacks on individuals related to the aerospace industry, as well as attacks leveraging an exploit in mackeeper to deliver the trojan. the komplex trojan revealed a design similar to sofacy s carberp variant trojan, which we believe may have been done in order to handle compromised windows and os x systems using the same c2 server application with relative ease. while unit 42 continues to research and track this threat, palo alto networks customers are protected via the following: wildfire correctly identifies known komplex executables as malicious
ips signature #14442 sofacy.gen command and control traffic can detect and block outbound c2 requests generated by the komplex trojan.
customers can track this trojan via the komplex tag in autofocus. 