the cozyduke apt
by kurt baumgartner, costin raiu on april 21, 2015. 8:50 pm
cozyduke (aka cozybear, cozycar or office monkeys ) is a precise attacker. kaspersky lab has observed signs of attacks against government organizations and commercial entities in the us, germany, south korea and uzbekistan. in 2014, targets included the white house and the us department of state, as believed. the operation presents several interesting aspects extremely sensitive high profile victims and targets
evolving crypto and anti-detection capabilities
strong malware functional and structural similarities mating this toolset to early miniduke second stage components, along with more recent cosmicduke and onionduke components
the actor often spearphishes targets with e-mails containing a link to a hacked website. sometimes it is a high profile, legitimate site such as , hosting a zip archive. the zip archive contains a rar sfx which installs the malware and shows an empty pdf decoy. monkeys in other highly successful runs, this actor sends out phony flash videos directly as email attachments. a clever example is office monkeys lol . the executable within not only plays a flash video, but drops and runs another cozyduke executable. these videos are quickly passed around offices with delight while systems are infected in the background silently. many of this apt s components are signed with phony intel and amd digital certificates. recent cozyduke apt activity attracted significant attention in the news: let s examine a smattering of representative cozyduke files and data. there is much to their toolset. office monkeys dropper analysis
cozyduke droppers and spyware components often maintain fairly common characteristics, but these files functionality are modified in slight ways depending on the team s needs. this rapid development and deployment is interesting. believe it or not, recipients in bulk run the file within: this file in turn drops two executables to %temp%: it first launches , playing a self-contained, very funny video of white-collar tie wearing chimpanzees working in a high rise office with a human colleague. it then launches , a cozyduke dropper maintaining anti-detection techniques: anti-detection and trojan functionality
the file collects system information, and then invokes a wmi instance in the rootsecuritycenter namespace to identify security products installed on the system, meaning that this code was built for x86 systems, wql here: in addition to the wmi/wql use, it also hunts through the softwaremicrosoftwindowscurrentversionuninstall registry key looking for security products to avoid. following these checks, it drops several more malware files signed with the pasted amd digital signature to a directory it creates. these files are stored within an 217kb encrypted cab file in the dropper s resources under the name a . the cab file was encrypted and decrypted using a simple xor cipher with a rotating 16 byte key: x36x11xddx08xacx4bx72xf8x51x04x68x2ex3ex38x64x32. the code copies from windowssystem32 to its newly created %appdata%ati_subsystem subdirectory as alongside the three dll s listed above. it runs with two parameter values, it s only export and an arbitrary pid, i.e.: c:documents and settingsuserapplication dataati_subsystem c:documents and settingsuserapplication dataati_subsystem , adl2_applicationprofiles_system_reload 1684 this dll is built with anti-av protections as well. however, it looks for a different but overlapping set, and the random duplication suggests that this component was cobbled together with its dropper, partly regionally based on target selection. finally, this process beacons to , which appears to be a site that has been compromised and misused multiple times in the past couple of years.
hxxp://www.sanjosemaristas[.]com/app/index.php?{a01ba0ad-9bb3-4f38-b76b-a00ad11cbaaa}, providing the current network adapter s service name guid. it uses standard win32 base cryptography functions to generate a calg_rc4 session key to encrypt the collected data communications and posts it to the server. executable-signing certificates
samples are usually signed with a fake certificate we ve seen two instances, one amd and one intel: these are base64 encoded and use the same rc4 encryption key as the malware configuration. decoding them resulted in the following payloads: decoding them also resulted in a set of tasking files maintaining agent commands and parameter values: and a set of reporting files, maintaining stolen system info , error output, and agentinfo output, from victim systems: is a 32-bit dll used to take a screenshot of the full desktop window and save it as a bitmap in %temp%. the number of times the screenshot is repeated is configurable within the xml task file. is a 32-bit dll that maintains several primitives. it is used to create new processes, perform as a command line shell, and several other tasks. each of these payloads is delivered together with a configuration file that explains how to run it, for instance: decodedconfig
in another tasking, we notice a tracked victim: victimtask attackers map a network drive use microsoft onedrive to run further tools: victimonedrive they copy down a base64 encoded document from microsoft onedrive to the victim system and decode it there: victimdecode not everything works as planned, so they maintain error reporting facility for the c2 communications: victimerrors furthermore, chromeupdate is a 64-bit executable (which appears to be a wextract package) that oddly drops a 32-bit dll. is simply stored as a cabinet file in the chromeupdate s resource section. rc4 decrypt hardcoded c2 and urls
resolve hidden function calls
collect identifying victim system data
encrypt collected data
send stolen data to c2 and retrieve commands code details
structurally, is a fairly large backdoor at 425kb. it maintains both code and data in the raw, encrypted blobs of data to be decrypted and used at runtime, and hidden functionality that isn t exposed until runtime. no pdb/debug strings are present in the code. it maintains eight exports, including dllmain: above, we see a new thread created with the start address of export adb_load by the initial thread. this exported function is passed control while the initial thread runs a windows message loop. it first grabs an encrypted blob stored away in a global variable and pulls out 381 bytes of this encrypted data: the code then decodes this set of import symbols and resolves addresses for its networking and data stealing functionality: this seems to indicate the authors of onionduke and cozyduke / cozy bear are the same, or working together. another interesting comparison of two other files matches a recent second stage tool from the cozyduke attacks with a second stage component from other miniduke/onionduke attacks. the two share identical export function names in their export directories, and the naming appears to be randomly assigned at compile time. the table below presents the function matches based on size data, but the calls, jmps and code all match as well. the contents of only one of these exports in has no match whatsoever in . exports unlike the file above, however, and do not maintain anti-av and anti-analysis functionality sets. perhaps they plan to pair this stealer with another dropper that maintains the wmi anti-av functionality. this rotating functionality seems representational for the set, along with other characteristics. their custom backdoor components appear to slightly evolve over time, with modifications to anti-detection, cryptography, and trojan functionality changing per operation. this rapid development and deployment reminds us of the apt28/sofacy toolset, especially the coreshell and chopstick components. we expect ongoing and further activity from this group in the near future and variations on the malware used in previous duke-ish incidents.
