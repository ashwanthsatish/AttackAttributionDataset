
executive summary the samples were clearly malicious and varied in sophistication. all three samples provided remote access
to the attacker, via two command and control (c2) servers. one sample is typical of what is commonly
referred to as a dropper because its primary purpose is to write a malicious component to disk and connect
it to the targeted hosts operating system. the malicious component in this case is what is commonly referred to as a remote access tool (rat), this rat is manifested as a dynamic link library (dll) installed
as a service. the second sample analyzed is a dual use tool that can function both as a post exploitation
tool used to infect other systems, download additional tools, remove log data, and itself be used as a
backdoor. the third sample was a sophisticated implant that in addition to having multiple communication
capabilities, and the ability to act as a relay for other infected hosts, utilized a kernel mode driver that can
hide aspects of the tool from user-mode tools. this third component is likely used for long-term
implantation and intelligence gathering. some av engines occasionally identify this sample as derusbi
trojan. crowdstrike intelligence team has seen trojans from 8 different builder variants of this rat,
including 64-bit versions, used in targeted attacks in 2011 against defense, energy/power, and chemical
industries in us and japan. target various strategic interests of the united states including high tech/heavy industry,
non-governmental organizations (ngos), state/federal government, defense industrial base (dib), and
organizations with vast economic interests. this report contains an in-depth technical analysis of the
samples, detection/remediation/mitigation information, attribution intelligence, and a conclusion aimed at
providing the reader with a synopsis of the report. technical analysis
the executable is commonly referred to as a dropper , which is
designed with the purpose of extracting from itself a malicious payload and to initialize and install it into a
targeted system. in this case, the malicious payload is a dynamic-link library (dll), which enables an
attacker to have full control of the system. this code appears to have been compiled on wednesday may
4th, 2011 at 11:04:24 . utc (equivalent to early evening time in china). note that the timestamp is in
resolves several library functions provided by microsoft using the loadlibrary() and getprocaddress()
application programming interfaces (apis). the imported function names are not encrypted; however, the
function name is minutely obfuscated by a simple single character substitution:
the dropper invokes the shgetspecialfolderpath() api supplying a constant special item id list (csidl)
of csidl_common_documents to identify the destination folder for the malicious dll payload. the
users. a typical path is c:\documents and settings\all users\documents. available name in this set: artifact which indicates the language setting on the compiler used by the person who built the binary was code version. since the dropped resource is not compressed, the routine fails. this indicates a low parameter. this export then implements the actual install logic to maintain persistence and invoke the main
routine. the dropper binary contains an icon resource that resembles the google chrome browser icon, the resystems language set to chinese. the use of the chrome icon may indicate a possible attempt to socially this code appears to have been compiled on wednesday may 4th, service despite the appearance. if the service is present, the malware replaces its previous instances or
versions of this backdoor. after attempting to disable the existing service, the malware tries to install itself as
a service with that same name. during installation, the sample attempts to use documented apis such as
openscmanager() and createservice() to initialize itself as a persistent windows service. as a
precaution, the sample writes settings directly to the windows registry to accomplish the same goal if
installing the service with the documented apis fails. the registry change creates the following key:
hkey_local_machine\\system\\currentcontrolset\\services\\msupdate\\parameters
following this, the subroutine will set the value of the servicedll to the module handle of the dll.
the next key to be changed is:
the msupdate key set to msupdate .
the export collectw3perfdata is registered as the main function of the dll. if the installation of the new
service is successful, the sample then starts the new service and exits. if the installation fails, the sample
exported function. in the case of installation failure, calls the main functions export over the machine, as is frequently launched by tasks such as changing the time, wallpaper,
or other system settings. this means that after cleaning up the components dropped by the malware, the
system remains vulnerable to local attacks by simply overwriting the legitimate executable with
a malicious version and await it s automatic execution by the operating system. window with class nod32_%d where %d is replaced with a pseudo-random number. this may be an
attempt to fool some automated dynamic analysis or anti-malware software into believing this is the after creating this window, the routine starts the main thread that eventually initiates calling out to the
command and control (c2). in order to accomplish this task, the newly created thread initializes networking apis using wsastartup() and resolves some other apis dynamically
using loadlibrary() and getprocaddress(). once the proper api s have been resolved, the sample then
assigns a null sid to the executable and sets the current process window station to winsta0 , which enables the sample to access the real user s desktop if started as service.
the communication to the c2 is handled by a while() loop, with each successive connection attempt
causing the loop to invoke the windows sleep() api for a time interval of 2 seconds, exponentially
increasing in length up to 1024 seconds (17 minutes) and then restarting back to 2 seconds. initial c2 phone home beacon software package that automates the creation of the malicious sample.
the malicious sample sends an initial beacon to the c2 that includes the following information: desktop session or none otherwise. the following python function can be used to decode the beacon stings: after sending the initial beacon, the routine loops receiving incoming commands and executes them in
sequence. when a connection can successfully be established to the c2 server, the sleep timer is reset to
two seconds for the next attempt. network protocol and implementation
the network protocol used by this sample resembles a type-length-value layout in both directions.
each 16 byte request header consists of: commands instead of the arbitrary length payload buffer of 408 bytes size. providing additional payload of any larger size will result in a trivial exploitable stack
exploitation of this vulnerability is unnecessary due to the already available unauthenticated command
execution capabilities of this backdoor.
certain commands initiate a second connection to the c2 in a separate thread using the same network backdoor functionality, supported commands
the primary aim of this backdoor is remote desktop control functionality comparable to vnc or remote
desktop over a custom protocol. it allows the adversary to view the main desktop graphically and
control the keyboard and mouse. this remote control functionality is implemented as separate messages
0x22000001 initiates continuous transmission of screen captures to the c2. the screen captures are
created using a series of microsoft windows graphic device interface (gdi) api calls culminating in a call to
getdibits().
from the system. account and the user is deleted. it would appear this technique is meant to obfuscate the activities of the
malicious sample by masking the process creator s user name to appear to be a generic domain user. note
that such an account does not normally exist in an active directory environment.
additionally, the primary c2 connection allows for requests to start additional connections to the c2 implementing the following functionality: killing of running processes post exploitation tool sample (md5: )
this sample is typical of a post exploitation tool; it is written in .net 2.0. this code appears to have been
compiled on thursday may 26th, 2011 at 10:21:44 . utc (early evening time in china). the backdoor
functionality can be instantiated either directly from the command line or through commands issued over a
network based protocol via the c2. if no arguments are given, a connection to the c2 is initiated to the stati- line arguments can be viewed in appendix a. this activity is generally associated with log cleaning to complicate a forensic investigation.
the sample contains an embedded ip address for c2 that is stored in an encrypted format as a string resource: network protocol and implementation
there are three components to the protocol:
authentication is accomplished using a 32 byte packet, this packet consists of: 2. a four byte random number generated by the rand() function
3. the machine id comprised of an obfuscated combination of the machine name and hard drive
serial number. the algorithm for generating this is in appendix b
4. the communication protocol version number, which in this sample is 0x2
5. the version of the malicious sample, in this case it is 841 an example authentication packet sent to the c2 is located in appendix e to the client which is then rc4 encrypted using the random number generated in step 2 from above as the
password. this value is then transformed using a simple algorithm in appendix f into a 32 byte array. the
up aes encryption which is then used to encrypt and decrypt any further communications. beacon, this is typical of this type of malicious sample, it allows the operator to separate various infected
hosts in a targeted campaign. the beacon for this sample is formatted as xml and consists of: an example of an unencrypted beacon: command handling loop, this is a loop structure that will process and execute commands sent by the c2.
the malware sends and receives a heartbeat/keepalive packet every 2 minutes. the command format is
derived from a structure consisting of: description of the possible values for commands is in appendix d. it is important to note that the order in calling methods on those assemblies, connecting to new c2 servers and executing processes.
this sample is a sophisticated backdoor which implements several communications protocols and was utc (late evening time in china). the code contains several run time type information (rtti) artifacts that variants of this trojan are sometimes detected under the name derusbi by microsoft, trend, sophos and
symantec av engines.
this sample is a dll which can be registered as a service and is used to drop a kernel driver and provide
an interactive command line shell to the c2. it also is able to bypass user account control (uac) to install
itself by using the microsoft windows executable provided by the targeted system. the steps it
takes to install itself onto a system are as follows:
1. copies itself to to %windir%\system32\msres<3 random the current system time when the copy was made but with the year changed to 2005.
4. adds itself to list of services started by netsvc using the service name helpsvc .
5. if mcafee av is installed, creates a copy of named and then schedules
the copy to be deleted on reboot using the well documented movefileexa api.
6. it then calls either the original or copy of with the parameters /s /u and the path to
the copy of itself it made in step 1. the /u parameter means uninstall , which calls
dllunregisterserver, this is an unsophisticated method of dll entry point obfuscation.
7. dllunregisterserver installs the driver and initiates the backdoor component. exe is running (antivirus360 program from the chinese quihoo 360 technology co., ltd 360
),
or the username of the dll s host process context is not system , the driver is not written to disk. barring
the two aforementioned conditions, the sample decrypts the kernel driver to: the backdoor then loads the original service s dll into the address space with loadlibrary and invokes the
servicemain export. this effectively hijacks the original service s entry while retaining its functionality.
while there is code in the binary that allows downloading a list of c2 servers from an http url, the default
the one used by the post exploitation .net tool. c2 communication mechanisms
the malware has three distinct c2 protocols two of which can be transmitted over http proxies and one
can be bundled in two different dual modes (see 3.), totaling 7 distinct supported c2 mechanisms. the con- 1. proprietary binary header (optionally over an http proxy using connect mechanism); this
protocol consists of 64 random bytes being sent to the c2. the c2 then responds with 64 bytes bytes rotated right by seven bits and compares that value to the seven bits rotated right version of
the server s response, effectively neutralizing the rotation s effect; the purpose of this is unclear.
request string including http headers (optionally over a http proxy using connect). the
malware requires the response to start with http/1.0 200 or http/1.1 200 and an absence of
a connection: close header. this one http connection will be used for bi-directional
communications, sending chunks of post payload and receiving chunks of the response,
interleaved.
3. two long-running http requests to the same c2 (optionally over an http proxy with original
request verb), one get request to ?loginid= followed by a random number
and one post request to . the get request serves as a down-stream
channel while the post request serves as a upstream channel. legitimate appearing channels as required in order to appear request for comment (rfc) compliant with
the http protocol. due to time constraints.
after establishing any of the aforementioned channels for arbitrary binary data exchange, the malware will
start sending and receiving compressed binary blobs via the channel of choice. the c2 s binary data blobs
are compressed. no further encryption of the data takes place.
all c2 transport implementations contain code for accepting and handling server-side connections of the
respective protocols. however, this code does not appear to be invoked. it appears that the author of this
code shares the library that implements these transports for the client with the c2 server. c2 command invocation
the main backdoor thread then reads commands from the chosen c2 protocol and passes them on to any
of the following registered handler classes based upon a command id. the handler class is responsible for
parsing the remainder of the command. pcc_proxy: tcp proxy
this handler class implements a generic tcp proxy. it supports establishing tcp connections to other hosts
and also listening for incoming connections. the incoming connection contents are forwarded to the c2 and
data from the c2 is passed on to connections. it supports up to 1024 parallel connections.
pcc_misc : gather and report system information
the malware is capable of gathering various pieces of information from the system, triggered by a command
id 10. the capabilities include recovering authentication credentials from various system and client storage
such as mozilla firefox, internet explorer, and remote access service (ras). this class also supports
gathering intelligence on the infected system including identifying security tools by their process name, proxy
accounts, and version numbers for the operating system (os) and internet explorer.
pcc_sys: system management
this handler class provides the attacker with the ability to manage system components including start/stop/
delete system services, enumerate/alter registry keys, and manage running processes. this class also
provides the ability for the attacker to take a screen shot of the users desktop.
internal_cmd: command-line shell this handler class uses the command id 5 and implements an interactive command line shell accessible
from the c2 server, containing a series of built-in commands. if the input is not in this list of built-in
commands, the malware attempts to invoke in the background, launching a command or command
line utility already present on the system. the standard output channel of that command is provided back to
the c2. the supported built-in commands are: kill switch / self-destruction
the only command that is implemented directly in the main backdoor thread as a subprocedure call and not
via a generic command handler class is command id 256. this command results in the dll deleting itself
and terminating the backdoor process. this sample is a packed 32-bit kernel driver extracted by the aforementioned dll with an md5 hash of: , this sample will only function on a windows 32-bit kernel. this code
appears to have been compiled on sunday october 9, 2011 at 4:50:31 . utc (very early morning time
of monday, october 10 in china). entrypoint
this section describes how the driver performs its initialization routine.
multiple instance protection
the driver begins by opening a named event in the basenamedobjects object directory with the name
exists, the driver fails to load, presumably to avoid a multiple instances of itself. if the event does not exist, the driver then creates it using the windows api and indicative of relatively limited windows api knowledge of the author of that part of the code. it is
interesting to note that some of the hex digits in the object name are mixed case which is potentially
indicative of the code being re-appropriated from another source.
anti-debugging protection
the second component of the entry point performs an anti-debugging technique, calling the function
kddisabledebugger(), which allows the driver to disable usage of the built-in windows kernel debugging
facility that is used by popular kernel debuggers kd and windbg. tools such as syser debugger, or
debugging through a virtual machine are unaffected by this technique. the sample, rather than importing the
kddisabledebugger() api using conventional methods, looks up the api through
mmgetsystemroutineaddress() instead. all of the other apis used by the driver are imported normally, so
this is not a technique to hide import apis used throughout the driver. searching google for mmgetsystemroutineaddress and kddisabledebugger results in dozens of chinese language blogs
which explain how to use this technique to disable windbg .
hooking
is designed to hook the system call table, while the other hooks the network stack.
network stack hooking
the version is necessary because windows versions beginning with vista utilize a redesigned tcp/ip network stack, most hooking operations will require a different implementation for these versions. on versions
prior to windows vista, the tcp/ip driver creates a \device\tcp device object through which most network
requests are piped through. on vista and later, tcp/ip has been split up into multiple components, and ip
connection enumeration, which this driver is targeting, is managed by \device\nsiproxy instead.
in either case, the driver obtains the device object by using iogetdeviceobjectpointer() and hooks major
function 14 the irp_mj_device_control, as this is the function through which all input output
controlls (ioctls) are sent, such as the ioctl for querying active ip connections.
network store interface (nsi) hook
the nsi hook, targets ioctl 0x12001b, which is used by nsigetobjectallparameters() in when
users typically run commands such as or use any of the ip helper apis in . the
purpose of the hook is to scan the list of active connections returned to the user, and hide any such
connection currently bound to a local tcp port in the range between 40000 and 45000. the hooking is performed by creating a new completion routine
associated with any irp_mj_device_control irp that matches the ioctl, attaching to the target
process, performing several memory copies to hide the entry, and detaching.
this functionality is nearly identical to the code posted by edward sun (aka cardmagic, sunmy1@ ,
onlyonejazz@ , cardcian@ , qq# 28025945) from hefei, anhui province
(nanjing military district) on july 8, 2007, then a china-based researcher at trend micro (now working at
at
http:// (see appendix g). crowdstrike has
no information connecting mr. sun to this intrusion activity, his code appears to have been appropriated by
the actor to add similar functionality to their code.
tcp hook
the tcp hook works almost identically to the nsi hook, though instead hooking ioctl 0x120003 (ioctl_ any connections listening on tcp ports in the range between 40000 and 45000.
system call hooking dword at each of these exported functions. because the system call stub uses the eax register as an
index for the system call id, and a mov eax, imm32 instruction instruction is used, this second dword
will match the system call id. it then adds this index to the value of keservicedescriptortable.base, which
is the exported kernel variable (on 32-bit windows only) which directly points to the system call table. this is
one of the simplest ways to do a system call hook, but will not work on 64-bit windows as this variable is not
exported in addition to the protection provided by microsoft patchguard. windows api ioallocatemdl(), and associating the mdl to a non-paged buffer using
mmbuildmdlfornonpagedpool(). once the mdl is associated to the non-paged buffer, the sample locks the
underlying pages using the windows api mmprobeandlockpages(). instead of hooking the entry in the
table directly, which is easily detectable, the driver uses the ldasm open-source disassembly engine to
analyze the function that is being pointed to by the table, and applying a detours-style hook directly in the
code. it uses the standard mov cr0, eax technique, turning off the write protect (wp) bit as it does this.
when the hook is installed, it writes a special dword value, kdtr , which allows it to prevent
double-hooking or badly-hooking the system call, during unhooking, this value is also checked. user-mode component of this malware is a service called msupdate , this driver is attempting to hide the key, due to the fact that these apis provide almost identical functionality when it comes to reading registry
values.
in the registry hooking code of the driver, a call is made to obreferenceobjectbyhandle(). this allows the
driver to receive the cm_key_object which is then used with obquerynamestring() to get the key/value
path. however, no call to obdereferenceobject() is ever made, which means that all registry objects being
sent to these apis are eventually leaked.
in the registry hook, it was noticed that currentcontrolset001 was used as the target, if the target machine
function as intended. this is the reason the microsoft implemented a symbolic link to \\currentcontrolset mitigation / remediation network signatures
the following network signatures are designed for the popular open source ids called snort.
these signature can be ported to other formats upon request.
malware #1 attribution
attribution in the cyber domain is always a tricky subject when relying solely on malicious samples.
compiler artifacts and language settings can of course be deliberately masked or spoofed. uses a unique approach of comprehensive threat analysis in order to decipher attributable components.
based on the corroborating evidence discovered in the course of this analysis, it appears there are
numerous indications that this is a chinese-speaking actor.
, a chinese security product available from
http:// /. this is particularly relevant in this case because the backdoor dll sample with an md5
this tool. speculatively this may be because this security product detects this rootkit, or the author was
attempting to prevent accidental infection on systems running this anti-virus product.
the obfuscation of the kddisabledebugger() function call is seen on several chinese language forums,
and can be seen being reused in several code samples on those forums. as previously mentioned there is
no advantage associated with using this call obfuscation, and appears to be reused for no apparent reason
other than the attackers have copied code directly from forum code.
while the various network hooking techniques used in the kernel driver may appear novel or well by a chinese language developer. this post is currently mirrored on dozens of chinese hacking
websites.
similarly the system call hooking is less impressive after searching for ioallocatemdl and cr0 (bbs.pediy.
com/showthread.php?t=77467
perform system call hooking through mdls. the ldasm inline hooking is also repeated in numerous postings
to chinese forums. one particular website (http:// ) had an almost identical ldasm loop that tried to
identify the exact same code sequences. open source research of the 4 innocuous kernel apis
chinese website that has a cached rootkit performing similar hooks on the same 3 registry related apis.
while the driver does not use pool tags for most of its allocations, it does utilize them in the networking
hooking code, much like the examples found on the chinese language forums. this sample uses pool tags: tnet, and kdtr . although the meaning of the kdtr tag is not coincides with the matching functionality of the detour-style inline hook.
the driver code (md5: ) appears to be a combination of various
code that is easily searchable on the internet, and almost always attributed to chinese language forums
and websites. the system call hooking parts of the code appear to be identical to the code
authored by steven lai embedlinux and utilized in what the author titled cc rootkit on on august 4, 2008
who s email address is hqulyc@ . this user has a qq identity of: 5054-3533, qq is a popular
(http:// ) appears to be steven lai. he was is 28 years old (born september 5,
at xiamen xoceco new technic co., ltd. (http:// ), a company that builds
however was used by whomever built the kernel driver utilized by the backdoor and for this reason we are
providing the background on this individual. attribution for more information about intelligence-as-a-service or
specific attribution information on deep panda, contact
the crowdstrike global intelligence team conclusion
the samples involved in this incident are typical of attacks commonly associated with the people s
republic of china (prc). these code samples have a variety of tools, techniques, and procedures (ttps) the ability to conduct incident response (ir) including forensics, and log analysis, greatly augments this
visibility into these aspects of the incident. some indications as to the adversaries capabilities can be
derived from the captured samples alone. dropper/implant #1
the dropper code (md5: ) does not utilize any techniques that are
unique or unusual, and is consistent with tools, techniques, and procedures of attacks targeting proprietary
information and generally attributed to the prc. the presence of dead code and its replacement by a more
side. the dead code utilizes a more sophisticated compression algorithm provided by a third party which
was rendered useless for some reason. this may have been a result of the attacker modifying an existing
tool, or unknowingly using a re-purposed tool. the dropper resources indicate the compiler used to build the
tool was running on a system that utilized the chinese simple language pack and was built on wednesday
may 4th, 2011 at 11:04:24 . utc (early evening time in china). while this can be deliberately spoofed
speaking actor.
the dropped dll (md5: ) itself contains functionality that is typical
encryption/obfuscation using a statically compiled xor key. the sample uses tcp port 443 for communication, but makes no attempt to mimic the ssl protocol typically used on that port number, which would
provide enhanced operational security (opsec). this code appears to have been compiled on wednesday may 4th, 2011 at 10:48:19 . utc (early evening time in china). post exploitation tool
the post exploitation tool (md5: ) is a dual-use tool, it can be
dropped and executed by a client-side exploit, or the adversary can launch it using a variety of command
line options. this tool is built in microsoft .net framework, which is typically an indication of a less sophisticated attacker, because .net is easier to develop in but requires the .net framework be present on the
victim machine. the tool appears to have been compiled on thursday may 26th, 2011 at 10:21:44 .
utc (early evening time in china). the sample utilizes the aes cryptographic algorithm to protect its c2
communications. implant #2
backdoor dll
this dll is a moderately sophisticated backdoor with several well designed communication mechanisms
not typically seen in these types of implants. the code base for the sample was developed in c++. the
code appears to have been compiled on sunday october 30, 2011 at 12:43:33 . utc (late evening time
in china). this sample has multiple communication capabilities available that makes it far more versatile
and stealthy. it implements relatively well thought out protocols including http and dns. the tool has the
ability to automatically down select the most effective communication channel once it has been instantiated,
which can help avoid detection from solutions like dns blacklisting and rfc protocol enforcement. the
dll itself contains traces of the original c++ class names that were utilized in the source code, which in communicating to the c2, thus enhancing opsec. the sample contains dead code which appears to be
command and control server classes, this is likely an indicator that the c2 client which would communicate
with this sample shares the same communications library which was compiled into this sample.
system driver
the kernel driver component dropped by the backdoor dll bears many tool marks associating it with the
ccrootkit package publicly by steven lai (a/k/a embedlinux). this kernel mode rootkit implements several
hooking techniques that are aimed at preventing a system administrator from detecting the backdoor dll.
the implementation of these techniques has some unique idiosyncrasies that permit direct attribution to the
source code steven lai posted. this driver attempts to hide a wide swath of tcp ports (40000-45000) for
an unknown reason, however it is suspected that this may relate to the potential network relaying capability
alluded to for the backdoor dll. system driver
the kernel driver component dropped by the backdoor dll bears many tool marks associating it with the
ccrootkit package publicly by steven lai (a/k/a embedlinux). this kernel mode rootkit implements several
hooking techniques that are aimed at preventing a system administrator from detecting the backdoor dll.
the implementation of these techniques has some unique idiosyncrasies that permit direct attribution to the
source code steven lai posted. this driver attempts to hide a wide swath of tcp ports (40000-45000) for
an unknown reason, however it is suspected that this may relate to the potential network relaying capability
alluded to for the backdoor dll.
