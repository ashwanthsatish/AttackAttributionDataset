int august 2012, an attack campaign known as shamoon targeted a saudi arabian energy company to deliver a malware called disttrack. disttrack is a multipurpose tool that exhibits worm-like behavior by attempting to spread to other systems on a local network using stolen administrator credentials. more importantly, its claim to fame is the ability to destroy data and to render infected systems unusable. the attack four years ago resulted in 30,000 or more systems being damaged. last week, unit 42 came across new disttrack samples that appear to have been used in an updated attack campaign. the attack targeted at least one organization in saudi arabia, which aligns with the targeting of the initial shamoon attacks. it appears the purpose of the new disttrack samples were solely focused on destruction, as the samples were configured with a non-operational c2 server to report to and were set to begin wiping data exactly on 2016/11/17 20:45. in another similarity to shamoon, this is the end of the work week in saudi arabia (their work week is from sunday to thursdays), so the malware had potentially the entire weekend to spread. the 2012 shamoon attacks took place on lailat al qadr, the holiest night of the year for muslims; another time the attackers could be reasonably certain employees would not be at work. composition of disttrack
disttrack is comprised of three distinct parts: the dropper, communications and wiper components. the main disttrack executable is a dropper that extracts additional tools from embedded resources and coordinates when to save and execute them. embedded within each disttrack sample is a component responsible for communicating with a c2 server and a separate component used to carry out the wiping functionality. the dropper extracts the communications and wiper components from resources named pkcs7 and pkcs12 respectively, while the x86 sample extracts the x64 variant of disttrack from a resource named x509 . to extract the components, the dropper is configured to seek specific offsets within the resource, read a specified number of bytes and decrypt the contents using a specified key. the key exists in the sample as a base64 encoded string that the dropper will decode then use each byte of the resulting string to xor the data obtained from the resource. when determining the location of the ciphertext within the resource, the dropper subtracts 14 from the offset value in the sample s configuration as an additional layer of obfuscation. table 1 shows the resources within the disttrack x86 sample, the component it contains and the values needed to decrypt its contents. disttrack functionality
disttrack is mainly focused on data destruction and attempting to damage as many systems as possible. to do so, this malware attempts to spread to other systems on network using what are likely stolen administrator credentials. this is again similar to the 2012 shamoon attacks, where compromised but legitimate credentials obtained in advance of the attacks were also hard coded into the malware to aid in its propagation. disttrack also has the ability to download and execute additional applications to the system, as well as remotely set the date to start wiping systems. local network spreading
the disttrack malware spreads to other systems automatically using stolen credentials. the disttrack we analyzed contained the internal domain names and administrator credentials associated with the targeted organization. the internal domain and credentials appear to be stolen prior to the creation of this tool, as it is not a public domain and the credentials are not weak enough to have obtained through guessing, brute force or dictionary attacks. disttrack uses the internal domain names and credentials to log into remote systems on the same network segment. the malware determines the local network segment associated with the target system (call to gethostname) by obtaining the ip address for the system (call to gethostbyname). it then uses the system s ip addresses to enumerate the /24 network (x.x.x.0-255) that the system is networked with, and will attempt to spread to each of these remote systems. the dropper then attempts to open the service manager on each remote system to start the remoteregistry service, which it will connect to using regconnectregistryw. once connected, the dropper attempts to disable uac (user access control) remote restrictions by setting the following registry key to a value of 1 : software\microsoft\windows\currentversion\policies\system\localaccounttokenfilterpolicy after disabling uac, the dropper connects to the remote system (using netuseadd) and logs in using the embedded stolen credentials. the dropper then checks to see if it has administrator privileges on the remote system by attempting to open , which allows it to determine if it can write its payload to the \system32 folder on the remote system. the dropper then has two different methods in which it can pivot to the remote system. the first method involves the dropper writing itself to on the remote system. after writing itself to the remote system, the dropper creates a service named ntssrv , with a display name of microsoft network realtime inspection service and a description of helps guard against time change attempts targeting known and newly discovered vulnerabilities in network time protocols to execute the payload. the second, alternative method also involves the dropper copying itself to on the remote system; however, instead of creating a remote service, this method calls the netschedulejobadd function within the windows netapi32 library to create a scheduled task to run the payload. scheduled tasks require a time in which the task will run, which the dropper determines by calling the function netremotetod to obtain the time of day from the remote system. the dropper then adds 90 seconds to the time of day value on the remote system and uses this value as the jobtime to run the task in three minutes, which executes the payload on the remote system. the following pseudo-code shows the scheduled task creation process: the communication module interacts with its c2 server using http requests. the communications modules in both the x86 and x64 variants of disttrack we analyzed were configured to use :8080 for its c2 server, which does not host an operational disttrack c2 server. the lack of an operational c2 server suggests that the threat actors did not desire remote access to infected systems, rather the actors sought to render them unusable instead. if the modules were configured with an operational c2 server, the module would generate an http get request that resembles the following: the interesting part of the request above is that the host server , the url category/page.php , the parameter shinu and the user-agent mozilla/5.0 (msie 7.1; windows nt 6.0) are hardcoded into the tool. the data in shinu parameter is a combination of the system s tickcount, local ip address, operating system version, keyboard layout and the contents of %windows%\inf\netimm173.pnf. the c2 server can respond to this http request with one of the following two commands:
we believe the http host value of server and the non-operational c2 address may suggest that the communication module is created with a builder tool, which in this case the actor mistakenly or purposefully did not provide an active c2 server when building this module. while completely speculative, the word shinu used as a parameter could be a reference to the arabic slang for the word what , as well as a reference to a village name in northwestern iran. disttrack data destruction
the disttrack dropper is responsible for installing the wiper component of this trojan, however, it will only activate this component if the system time is greater than a preset date. the dropper obtains a date used to activate the wiping functionality by reading a specific file, or using a hardcoded timestamp of 2016/11/17 20:45 . the file containing this timestamp is named \inf\usbvideo324.pnf , which is not initially installed but is provided by the c2 server if it sends the communications module the t command. the usbvideo324.pnf file would have the following structure: if the dropper determines the system date is larger than the specified date, the dropper will extract the wiper component from a resource named pkcs12 and save it to the system32 folder with one of the following filenames appended with a .exe extension:
the dropper then runs the wiper component with a command line argument of 1 . the wiper component extracts a driver from its resource section and decrypts it with a 226 byte xor key. the wiper saves the extracted driver to and installs the kernel driver by creating a service named drdisk with the following command line commands: the kernel driver is a commercial product that the attackers are abusing called rawdisk by eldos corporation, which provides direct access to files, disks and partitions. it appears that the driver (sha256: ) is the exact same driver as used in the shamoon attack in 2012. with the kernel driver installed, the wiper can begin writing to protected system locations, such as the master boot record (mbr) and partition tables of storage volumes. the wiper can be configured to overwrite files in three different ways, specified by a configuration setting of f , r or e . if configured with the f setting, the wiper loads a resource named ajkeoa, which extracts a jpeg image to use to overwrite files and partition tables. if the wiper is configured with the e setting, the wiper will encrypt the contents of the file using a random value as a key and the rc4 algorithm. if configured with the r setting, the wiper will overwrite files with the random values that would be used as a key in e . the sample we analyzed was configured with f , meaning it would overwrite files with an image obtained from its resource section. the image extracted is a picture of a syrian boy named alan kurdi, whose drowning on september 2, 2015 received international attention in regards to the ongoing syrian refugee crisis. the previous shamoon attack in 2012 used an image of a burning american flag, continuing the political image theme. from a functionality standpoint, the wiper relies on eldos rawdisk driver to overwrite files on the system. during this activity, we noticed the wiper changing the system time to august 2012, as the temporary license key for the rawdisk driver requires the system time to not exceed the month of august, which is when the temporary license would expire. this modification to the system time was seen in the previous campaign, and the temporary license key within the wiper component is the exact same as wiper component from the 2012 attacks. the wiper itself queries the following registry keys to obtain a list of partitions to overwrite: in addition to these partitions, the wiper attempts to overwrite files and subfolders within in the following folders: after overwriting these files and the partition tables, the wiper issues the following command to restart the system: the arguments and switches used in the shutdown command above forces all running applications to close and causes the system to reboot ( -r ) after 2 seconds ( -t 2 ). this command does result in a dialog prompt, seen in figure 1, that informs the user that the system is shutting down. figure 1 dialog prompt displayed when the wiper component runs the shutdown command with the partition tables overwritten, the system will no longer be able to properly boot, which renders the system unusable. during analysis, our analysis system was rendered unusable, as the virtual machine was unable to find the operating system during boot up, as seen in figure 2.
figure 2 analysis virtual machine unable to boot after executing disttrack wiper conclusion
after a four year hiatus, threat actors likely associated with the shamoon attack campaign have used their disttrack malware to target at least one organization in saudi arabia. the current attack campaign has several ttp overlaps with the original shamoon campaign, especially from a targeting and timing perspective. also, disttrack malware used in the recent attacks is very similar to the variant used in the 2012 attacks, which uses the exact same rawdisk device driver as well (down to the same, temporary license key).. the main purpose of the disttrack malware is to overwrite files and storage partitions in an attempt to destroy data and render the system unusable. to maximize its destruction, the disttrack tool attempts to spread to other systems on the network using stolen administrator credentials, which suggests that the threat actors had previous access to the network or carried out successful phishing attacks prior to the attack using disttrack. palo alto networks customers are protected from disttrack: all known samples have a malicious verdict in wildfire
autofocus customers can monitor disttrack activity via the disttrack tag