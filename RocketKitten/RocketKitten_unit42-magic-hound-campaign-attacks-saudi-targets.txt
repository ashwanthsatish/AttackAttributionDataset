unit 42 has discovered a persistent attack campaign operating primarily in the middle east dating back to at least mid-2016 which we have named magic hound. this appears to be an attack campaign focused on espionage. based upon our visibility it has primarily targeted organizations in the energy, government, and technology sectors that are either based or have business interests in saudi arabia. the adversaries appear to have evolved their tactics and techniques throughout the tracked time-period, iterating through a diverse toolset across different waves of attacks. link analysis of infrastructure and tools also revealed a potential relationship between magic hound and the adversary group called rocket kitten (aka operation saffron rose, ajax security team, operation woolen-goldfish) as well as an older attack campaign called newscasters. artifacts of this campaign was also recently published by secureworks ctu.
we were able to collect over fifty samples of the tools used by the magic hound campaign using the autofocus threat intelligence tool. the earliest malware sample we were able to collect had a compile timestamp in may 2016. the samples themselves ranged from irc bots, an open source python remote access tool, malicious macros, and others. it is believed the use of specific tools may have coincided with specific attack waves by this adversary, with the most recent attacks using weaponized microsoft office documents with malicious macros. due to the large amount of data collected, and limitations on attack telemetry, this blog will focus primarily on the most recent attacks occurring in the latter half of 2016.
attack details
the samples initially collected and associated with magic hound were microsoft word and excel documents containing embedded malicious macros. we were able to expand our data set by pivoting on infrastructure and tool behavior, which uncovered additional types of tools in use by magic hound, such as regular portable executable (pe) payloads, pe files compiled in .net framework, various forms of irc bots, and an open source file-less python remote access tool called pupy.
the weaponized office documents were found to be hosted either on what appeared to be compromised legitimate websites, or on websites using domain names similar to legitimate domain names in appearance. the two legitimate websites we were able to identify were owned by organizations in the government and energy sectors. based on the existence of these malicious files on the legitimate websites, it is highly probable that the websites had already been compromised in some fashion. at the time of investigation, the files had already been removed from the websites. the two other delivery sites were ntg-sa[.]com, which may be trying to spoof a saudi based information and communication technology conglomerate and -ho[.]me, which may be trying to spoof the ministry of labor. a third delivery site was identified at -ho[.]me which may appear to be a benign domain.
several of these documents were also found on a seemingly unrelated, but benign-looking domain, briefl[.]ink.
it is highly likely the adversary then used spear-phishing attacks containing links to these malicious documents as a delivery mechanism. we were ultimately able to identify multiple organizations in the government, energy, and technology sectors targeted by magic hound.
the weaponized documents themselves all contained malicious macros which were designed to call windows powershell to retrieve additional tools. a handful of lures with different themes were used repeatedly with variations throughout the eighteen collected documents. they ranged from documents masquerading as official saudi government forms to a holiday greetings card. the forms masquerading as official government documents specifically used imagery from the ministry of health and the ministry of commerce claiming to be mandatory forms that required macros to be enabled. examples of the documents can be seen below: infrastructure
analysis of the weaponized documents revealed some peculiarities right away. the majority of documents used the name gerry knight for the author field in the document metadata, and the embedded macros largely used direct ip connections to command and control (c2) servers rather than using domain names. these c2 servers also appeared to lack any relationships to each other and were hosted on a variety of vps providers. two of the word documents using the gerry knight author name however were found to be communicating to c2 servers on two specific domains, www1.chrome-up[.]date and www3.chrome-up[.]date. using these domains as pivot points, we were able to expand our data set. as seen below, the relational analysis proved to be quite fruitful: figure 1 overview of relationships
we rapidly discovered a different set of tools communicating to the exact same c2 servers as those two word documents, in addition to other tools communicating to other subdomain variations of chrome-up[.]date as seen in the following graphic: figure 2 command and control overlaps
from there, we were able to map out a large infrastructure separating out into four categories of tools: downloaders, droppers, loaders, and payloads. what initially appeared as a disparate and segregated attack campaign appeared very rapidly to be a persistent and prolonged attack campaign with very specific goals in mind.
in total, we were able to collect over fifty different samples via infrastructure reuse, behavioral matching, and the reuse of a specific file for maintaining persistence. these tools included microsoft office documents, portable executables (pe), .net framework pe files, meterpreter, irc bots, an open sourced meterpreter module called magic unicorn, and an open sourced python rat called pupy.
interestingly as we continued to expand and pivot in our data set, one of the c2 ips used by an irc bot payload from magic hound was found to be the same ip used to deliver a different irc bot called mpk. figure 3 rocket kitten and magic hound infrastructure overlap
the mpk bot is not publicly available and had previously been attributed to an adversary group called rocket kitten which has often been thought to be a state sponsored adversary operating in the middle east region. although the likelihood of two different adversaries focused on espionage operating in the same geographical region using one specific ip and not being related somehow is fairly slim, due to limited telemetry, we lack additional corroborating evidence of a conclusive relationship.
magic hound toolset
the magic hound attacks did not rely on exploit code to compromise targeted systems, instead relying on executables and microsoft office documents, specifically excel and word documents containing malicious macros. during our analysis, we were able to determine the ultimate payload for several of these attacks. one payload was a python based open source remote administration tool (rat) called pupy. a second payload was an irc bot we have named magichound.leash. we have also seen this group use the magic unicorn module to generate a powershell script to deliver a shellcode-based payload. while we have not been able to obtain a secondary payload from the unicorn generated powershell script, we believe that this group uses the script to deliver metasploit s meterpreter as a potential payload as well.
we have categorized the custom tools in use by the magic hound campaign into five categories, with corresponding names in table 1. additional details for these tools may be found in the appendix.
magichound.rollover
the magic hound campaign used word and excel documents containing malicious macros as a delivery method, specifically attempting to load either the pupy rat or meterpreter which we have called magichound.rollover. the malicious macros were all designed to use windows powershell to download a shellcode-based payload from a remote server. we discovered two different techniques used in the powershell scripts, the first being a straightforward execute command of a string retrieved from the remote server. the second technique appeared to be from a tool called magic unicorn, an open source module for meterpreter. specifically, we discovered code in the powershell script that was a match for code in magic unicorn containing the comment one line shellcode injection with native x86 shellcode .
magichound.fetch
in addition to loading payloads using macros within delivery documents, we observed the magic hound campaign using executables to load secondary payloads from a remote server. both a custom developed loader, which we have named magichound.fetch, as well as the default loader that comes with pupy were found to be in use. the fetch loader allowed us to use attributes within the loader to uncover more tools used by this group, which included a backdoor and an irc bot.
fetch first attempts to create persistent access to the targeted host then retrieve a secondary payload from a remote server. to set up persistence, the loader writes a file to and executes it with specific command line arguments to create auto run registry keys. all fetch samples drop the same exact executable to set up persistence.
many of the fetch samples we analyzed attempted to obfuscate their functionality by encrypting their embedded strings using aes. however, they all used the same key agkrhfpdbvhdhrkj . the loader s main goal was to run a powershell command to execute shellcode. we found the powershell command used by fetch within the source code of magic unicorn, which was also used in the magic hound delivery documents. the shellcode executed by this powershell is the exact same as in the delivery documents, using code from metasploit which can obtain additional shellcode to execute using an http request to the following url:
we were not able to retrieve the shellcode hosted at this url. however, as alluded to above, we believe that this adversary used the open source magic unicorn tool to load a shellcode-based payload which is likely to be meterpreter.
pupy loader
the pupy rat comes packaged by default with loaders that can run the rat on a variety of platforms such as windows, macos, linux and android. we have seen the magic hound campaign use both the 32-bit and 64-bit dll loaders that come with pupy to infect windows systems. analysis of their configurations show that the c2 servers used both fully-qualified domain names and ip addresses. also, the configurations show the use of the obfs3 (the threebfuscator) transport, which is an obfuscation method to hide the true tcp-based communications protocol. the obfs3 is used in the tor project and the specifics of this transport can be found at the tor project.
magichound.dropit
the magic hound campaign was also discovered using a custom dropper tool, which we have named magichound.dropit. the dropit trojan we analyzed is an executable that builds another executable by decoding embedded blobs of base64 encoded data and concatenating them together in the correct order. in all of the dropit samples we collected, the dropper then saves the executable to the user s %temp% folder and executes the file.
we have also seen magic hound using dropit as a binder, specifically dropping a legitimate decoy executable along with the malicious executable onto the target host. the legitimate decoy executable and the malicious executable are then both executed, but with the malicious file running in the background and the decoy presented to the user. these types of tactics are generally used for evasion and to not trigger and suspicion from the victim. in one example, the decoy executable was a legitimate flash installer, therefore from the victim s perspective, they would experience the expected behavior of a flash installer.
magichound.retriever
we observed a dropit sample installing another trojan we call magichound.retriever. at a high level, retriever is a .net downloader that retrieves secondary payloads using an embedded url in its configuration as the c2. retriever uses .net web services and the soaphttpclientprotocol class to communicate with its c2 server, which generates http requests resembling the example request in figure 4. figure 4 retriever http request sent to its c2 server
magichound.leash
the magic hound campaign was also discovered deploying an irc bot, which we have named magichound.leash. we discovered this connection when we observed a dropit sample installing a backdoor trojan that used irc for its c2 communications.
leash obtains its commands via private messages (privmsg) sent from the adversary who must also be connected to the irc server. all of its available commands (see appendix), except for the ver command seen in figure 5, must be issued by individuals in the irc channel with nicknames that start with as_ or af_ . figure 5 lecash bot responding to ver command
there are a great deal of similarities between the irc bot originally discussed in isight s newscaster whitepaper and leash. isight s whitepaper provided details on an irc bot, which some refer to as parastoo based on the password used to join the irc channel, as seen in the following network traffic generated when attempting to connect to the c2:
parastoo trojan
magichound.leash performing a binary diff revealed a 67% similarity between the leash and parastoo samples. in addition to sharing significant portions of code, both of the irc bots require an irc user s nickname to start with either af_ or as_ to run commands on the system. also, the two bots have similar responses to ver commands seen in figure 6 below, which differ slightly from the responses seen generated by leash. figure 6 parastoo trojan responding to commands in similar manner to leash
mpkbot
we also found a second irc bot called mpk using the same ip for its c2 server that a leash sample was hosted on. this mpk irc bot is very similar to the mpk trojan that used a custom c2 communications protocol, as detailed in a whitepaper by checkpoint regarding a threat group called rocket kitten. we believe this version of the mpk trojan is based on the same code base, as both the irc version and the one referenced in the white paper have considerable similarities from a behavior standpoint as well as direct code overlap.
conclusion
the magic hound attack campaign is an active and persistent espionage motivated adversary operating in the middle east region. organizations in the government, energy, and technology sectors have been targeted by this adversary, specifically organizations based in or doing business in saudi arabia. the toolset used by the magic hound campaign was an assortment of custom tools, as well as open sourced tools available to the general public. none of the tools we uncovered were found to be exploit-driven, and relied exclusively on social engineering tactics to compromise targets. while we did discover a potential relationship with the rocket kitten adversary group, we cannot confirm the extent of that relationship at this time, although we will continue to monitor the activities of magic hound.
palo alto networks customers are protected via the following:
wildfire identification and detection of malicious samples
command and control servers are classified as malicious
autofocus tags have been created 